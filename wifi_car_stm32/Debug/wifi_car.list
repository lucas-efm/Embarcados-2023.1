
wifi_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800a248  0800a248  0001a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b4  0800a6b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6bc  0800a6bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001148  200001e0  0800a8a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001328  0800a8a4  00021328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017359  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000324c  00000000  00000000  00037569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029319  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173f8  00000000  00000000  000663f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc8e1  00000000  00000000  0007d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  0017a124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a22c 	.word	0x0800a22c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a22c 	.word	0x0800a22c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001fc 	.word	0x200001fc
 8000edc:	20000250 	.word	0x20000250

08000ee0 <usDelay>:

char uartBuf[100];


void usDelay(uint32_t uSec)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d801      	bhi.n	8000ef2 <usDelay+0x12>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <usDelay+0x60>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <usDelay+0x60>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <usDelay+0x60>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <usDelay+0x60>)
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <usDelay+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <usDelay+0x60>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000f18:	bf00      	nop
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <usDelay+0x60>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1f9      	bne.n	8000f1a <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <usDelay+0x60>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <usDelay+0x60>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6113      	str	r3, [r2, #16]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40000800 	.word	0x40000800

08000f44 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

		if(captureIdx == 0) //First edge
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10a      	bne.n	8000f6a <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edgeTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f003 fc5a 	bl	8004810 <HAL_TIM_ReadCapturedValue>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000f60:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 8000f68:	e010      	b.n	8000f8c <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10c      	bne.n	8000f8c <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f72:	2100      	movs	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f003 fc4b 	bl	8004810 <HAL_TIM_ReadCapturedValue>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000f7e:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200005f6 	.word	0x200005f6
 8000f98:	200005f8 	.word	0x200005f8
 8000f9c:	200005fc 	.word	0x200005fc
 8000fa0:	200005f5 	.word	0x200005f5

08000fa4 <measureDistance>:
//    char str[25];
//    sprintf(str, "Distance = %d\n\r", num);
//    return str;
//}

float measureDistance(){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f001 fbb1 	bl	8002718 <HAL_GPIO_WritePin>
	usDelay(3);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f7ff ff92 	bl	8000ee0 <usDelay>

	//*** START Ultrasonic measure routine ***//
	//1. Output 10 usec TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 fba8 	bl	8002718 <HAL_GPIO_WritePin>
	usDelay(10);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f7ff ff89 	bl	8000ee0 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f001 fb9f 	bl	8002718 <HAL_GPIO_WritePin>

	//2. ECHO signal pulse width

	//Start IC timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4821      	ldr	r0, [pc, #132]	; (8001064 <measureDistance+0xc0>)
 8000fde:	f002 ff8b 	bl	8003ef8 <HAL_TIM_IC_Start_IT>
	//Wait for IC flag
	uint32_t startTick = HAL_GetTick();
 8000fe2:	f001 f82f 	bl	8002044 <HAL_GetTick>
 8000fe6:	6078      	str	r0, [r7, #4]
	do
	{
	if(icFlag) break;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <measureDistance+0xc4>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d108      	bne.n	8001002 <measureDistance+0x5e>
	}while((HAL_GetTick() - startTick) < 500);  //500ms
 8000ff0:	f001 f828 	bl	8002044 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ffe:	d3f3      	bcc.n	8000fe8 <measureDistance+0x44>
 8001000:	e000      	b.n	8001004 <measureDistance+0x60>
	if(icFlag) break;
 8001002:	bf00      	nop
	icFlag = 0;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <measureDistance+0xc4>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800100a:	2100      	movs	r1, #0
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <measureDistance+0xc0>)
 800100e:	f003 f8bd 	bl	800418c <HAL_TIM_IC_Stop_IT>

	//Calculate distance in cm
	if(edge2Time > edgeTime)
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <measureDistance+0xc8>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <measureDistance+0xcc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d914      	bls.n	8001048 <measureDistance+0xa4>
	{
	distance = ((edge2Time - edgeTime) + 0.0f)*speedOfSound;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <measureDistance+0xc8>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <measureDistance+0xcc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001030:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001074 <measureDistance+0xd0>
 8001034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001038:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001078 <measureDistance+0xd4>
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <measureDistance+0xd8>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
 8001046:	e003      	b.n	8001050 <measureDistance+0xac>
	}
	else
	{
	distance = 0.0f;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <measureDistance+0xd8>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	}

	//Print to UART terminal for debugging

	return distance;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <measureDistance+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3

}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000450 	.word	0x20000450
 8001068:	200005f5 	.word	0x200005f5
 800106c:	200005fc 	.word	0x200005fc
 8001070:	200005f8 	.word	0x200005f8
 8001074:	00000000 	.word	0x00000000
 8001078:	3c8c7e28 	.word	0x3c8c7e28
 800107c:	20000600 	.word	0x20000600

08001080 <sendChar>:


void sendChar(unsigned char c, int uart_number){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	unsigned char pChar = c;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	73fb      	strb	r3, [r7, #15]
	if(uart_number == 1)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <sendChar+0x28>
		HAL_UART_Transmit(&huart3, &pChar,1 ,HAL_MAX_DELAY );
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	2201      	movs	r2, #1
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <sendChar+0x48>)
 80010a2:	f003 ff93 	bl	8004fcc <HAL_UART_Transmit>
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
}
 80010a6:	e00a      	b.n	80010be <sendChar+0x3e>
	else if(uart_number == 2)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d107      	bne.n	80010be <sendChar+0x3e>
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
 80010ae:	f107 010f 	add.w	r1, r7, #15
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	2201      	movs	r2, #1
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <sendChar+0x4c>)
 80010ba:	f003 ff87 	bl	8004fcc <HAL_UART_Transmit>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000056c 	.word	0x2000056c
 80010cc:	200004e8 	.word	0x200004e8

080010d0 <readChar>:
		HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
}

char readChar(int uart_number){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	unsigned char caracter;

	if(uart_number == 1){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10c      	bne.n	80010f8 <readChar+0x28>
		while(HAL_UART_Receive(&huart3, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 80010de:	bf00      	nop
 80010e0:	f107 010f 	add.w	r1, r7, #15
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2201      	movs	r2, #1
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <readChar+0x50>)
 80010ec:	f004 f802 	bl	80050f4 <HAL_UART_Receive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f4      	bne.n	80010e0 <readChar+0x10>
 80010f6:	e00e      	b.n	8001116 <readChar+0x46>
	}
	else if(uart_number == 2){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d10b      	bne.n	8001116 <readChar+0x46>
		while(HAL_UART_Receive(&huart2, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 80010fe:	bf00      	nop
 8001100:	f107 010f 	add.w	r1, r7, #15
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	2201      	movs	r2, #1
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <readChar+0x54>)
 800110c:	f003 fff2 	bl	80050f4 <HAL_UART_Receive>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f4      	bne.n	8001100 <readChar+0x30>
	}
	return caracter;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000056c 	.word	0x2000056c
 8001124:	200004e8 	.word	0x200004e8

08001128 <recebe_da_node_mcu>:


void recebe_da_node_mcu(void *vParam){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	unsigned char caracter;
	while(1){
		//Aguarda receber um caracter da UART1 que esta conectada ao Node MCU
		caracter = readChar(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ffcd 	bl	80010d0 <readChar>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
		//Envia o caracter recebido para a UART 2 que está conectada ao terminal serial
		move = caracter;
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <recebe_da_node_mcu+0x2c>)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	7013      	strb	r3, [r2, #0]

		sendChar(caracter, 2);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2102      	movs	r1, #2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff9b 	bl	8001080 <sendChar>
		vTaskDelay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f005 fb80 	bl	8006850 <vTaskDelay>
		caracter = readChar(1);
 8001150:	e7ee      	b.n	8001130 <recebe_da_node_mcu+0x8>
 8001152:	bf00      	nop
 8001154:	200005f4 	.word	0x200005f4

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	struct Flags flags;
	flags.movement = 's';
 800115e:	2373      	movs	r3, #115	; 0x73
 8001160:	f887 3020 	strb.w	r3, [r7, #32]
	flags.state = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fefc 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f846 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9b8 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001174:	f000 f894 	bl	80012a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001178:	f000 f904 	bl	8001384 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800117c:	f000 f952 	bl	8001424 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001180:	f000 f980 	bl	8001484 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4816      	ldr	r0, [pc, #88]	; (80011e0 <main+0x88>)
 8001188:	f002 feb6 	bl	8003ef8 <HAL_TIM_IC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <main+0x8c>)
 800118e:	1d3c      	adds	r4, r7, #4
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800119a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 f8ad 	bl	8006302 <osThreadCreate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <main+0x90>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	490b      	ldr	r1, [pc, #44]	; (80011ec <main+0x94>)
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <main+0x98>)
 80011c0:	f005 fa10 	bl	80065e4 <xTaskCreate>
  		  "cli",
  		  configMINIMAL_STACK_SIZE,
  		  &flags,
  		  1,
  		  NULL);
  xTaskCreate(
 80011c4:	2300      	movs	r3, #0
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <main+0x9c>)
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <main+0xa0>)
 80011d4:	f005 fa06 	bl	80065e4 <xTaskCreate>
//		NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011d8:	f005 f88c 	bl	80062f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <main+0x84>
 80011de:	bf00      	nop
 80011e0:	20000450 	.word	0x20000450
 80011e4:	0800a26c 	.word	0x0800a26c
 80011e8:	200005f0 	.word	0x200005f0
 80011ec:	0800a254 	.word	0x0800a254
 80011f0:	080018ed 	.word	0x080018ed
 80011f4:	0800a258 	.word	0x0800a258
 80011f8:	08001129 	.word	0x08001129

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2244      	movs	r2, #68	; 0x44
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f006 fafe 	bl	800780c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001222:	f001 fa9f 	bl	8002764 <HAL_PWREx_ControlVoltageScaling>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800122c:	f000 fc1a 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001238:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2310      	movs	r3, #16
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001242:	2302      	movs	r3, #2
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800124a:	230a      	movs	r3, #10
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124e:	2307      	movs	r3, #7
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fad6 	bl	8002810 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800126a:	f000 fbfb 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fe9e 	bl	8002fc8 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001292:	f000 fbe7 	bl	8001a64 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3758      	adds	r7, #88	; 0x58
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_TIM2_Init+0xdc>)
 80012ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <MX_TIM2_Init+0xdc>)
 80012d6:	224f      	movs	r2, #79	; 0x4f
 80012d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_TIM2_Init+0xdc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_TIM2_Init+0xdc>)
 80012e2:	4a27      	ldr	r2, [pc, #156]	; (8001380 <MX_TIM2_Init+0xe0>)
 80012e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <MX_TIM2_Init+0xdc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_TIM2_Init+0xdc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f2:	4822      	ldr	r0, [pc, #136]	; (800137c <MX_TIM2_Init+0xdc>)
 80012f4:	f002 fd48 	bl	8003d88 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80012fe:	f000 fbb1 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4619      	mov	r1, r3
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <MX_TIM2_Init+0xdc>)
 8001310:	f003 f9b5 	bl	800467e <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800131a:	f000 fba3 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <MX_TIM2_Init+0xdc>)
 8001320:	f002 fd89 	bl	8003e36 <HAL_TIM_IC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800132a:	f000 fb9b 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_TIM2_Init+0xdc>)
 800133e:	f003 fd51 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001348:	f000 fb8c 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800134c:	230a      	movs	r3, #10
 800134e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_TIM2_Init+0xdc>)
 8001364:	f003 f8ef 	bl	8004546 <HAL_TIM_IC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800136e:	f000 fb79 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	; 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000450 	.word	0x20000450
 8001380:	000f423f 	.word	0x000f423f

08001384 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_TIM4_Init+0x94>)
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <MX_TIM4_Init+0x98>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_TIM4_Init+0x94>)
 80013aa:	224f      	movs	r2, #79	; 0x4f
 80013ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM4_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000000;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_TIM4_Init+0x94>)
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <MX_TIM4_Init+0x9c>)
 80013b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_TIM4_Init+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_TIM4_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013c6:	4814      	ldr	r0, [pc, #80]	; (8001418 <MX_TIM4_Init+0x94>)
 80013c8:	f002 fcde 	bl	8003d88 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013d2:	f000 fb47 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM4_Init+0x94>)
 80013e4:	f003 f94b 	bl	800467e <HAL_TIM_ConfigClockSource>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 fb39 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_TIM4_Init+0x94>)
 8001400:	f003 fcf0 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800140a:	f000 fb2b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000049c 	.word	0x2000049c
 800141c:	40000800 	.word	0x40000800
 8001420:	000f4240 	.word	0x000f4240

08001424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART2_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <MX_USART2_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001468:	f003 fd62 	bl	8004f30 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 faf7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200004e8 	.word	0x200004e8
 8001480:	40004400 	.word	0x40004400

08001484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART3_UART_Init+0x58>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_USART3_UART_Init+0x5c>)
 800148c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_USART3_UART_Init+0x58>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART3_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_USART3_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART3_UART_Init+0x58>)
 80014c8:	f003 fd32 	bl	8004f30 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 fac7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000056c 	.word	0x2000056c
 80014e0:	40004800 	.word	0x40004800

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b40      	ldr	r3, [pc, #256]	; (80015fc <MX_GPIO_Init+0x118>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <MX_GPIO_Init+0x118>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <MX_GPIO_Init+0x118>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <MX_GPIO_Init+0x118>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a39      	ldr	r2, [pc, #228]	; (80015fc <MX_GPIO_Init+0x118>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <MX_GPIO_Init+0x118>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_GPIO_Init+0x118>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a33      	ldr	r2, [pc, #204]	; (80015fc <MX_GPIO_Init+0x118>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_GPIO_Init+0x118>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_GPIO_Init+0x118>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <MX_GPIO_Init+0x118>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <MX_GPIO_Init+0x118>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f001 f8d8 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800156e:	4824      	ldr	r0, [pc, #144]	; (8001600 <MX_GPIO_Init+0x11c>)
 8001570:	f001 f8d2 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_GPIO_Init+0x120>)
 800157a:	f001 f8cd 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001584:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	481b      	ldr	r0, [pc, #108]	; (8001604 <MX_GPIO_Init+0x120>)
 8001596:	f000 ff15 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = TRIG_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800159a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b6:	f000 ff05 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_6;
 80015ba:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <MX_GPIO_Init+0x11c>)
 80015d4:	f000 fef6 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_GPIO_Init+0x120>)
 80015f0:	f000 fee8 	bl	80023c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400
 8001604:	48000800 	.word	0x48000800

08001608 <ledB>:
/* USER CODE BEGIN 4 */




void ledB(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <ledB+0x24>)
 8001614:	f001 f880 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f001 f879 	bl	8002718 <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	48000400 	.word	0x48000400

08001630 <ledP>:

void ledP(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <ledP+0x24>)
 800163c:	f001 f86c 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f001 f865 	bl	8002718 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	48000400 	.word	0x48000400

08001658 <buzzR>:

void buzzR(){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f001 f857 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <buzzR+0xb4>)
 8001672:	f001 f851 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2110      	movs	r1, #16
 800167a:	4824      	ldr	r0, [pc, #144]	; (800170c <buzzR+0xb4>)
 800167c:	f001 f84c 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001684:	f000 fcea 	bl	800205c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f001 f841 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169c:	481b      	ldr	r0, [pc, #108]	; (800170c <buzzR+0xb4>)
 800169e:	f001 f83b 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	4819      	ldr	r0, [pc, #100]	; (800170c <buzzR+0xb4>)
 80016a8:	f001 f836 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f000 fcd5 	bl	800205c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f001 f82c 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <buzzR+0xb4>)
 80016c8:	f001 f826 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2110      	movs	r1, #16
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <buzzR+0xb4>)
 80016d2:	f001 f821 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016da:	f000 fcbf 	bl	800205c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 f816 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <buzzR+0xb4>)
 80016f4:	f001 f810 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2110      	movs	r1, #16
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <buzzR+0xb4>)
 80016fe:	f001 f80b 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f000 fcaa 	bl	800205c <HAL_Delay>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	48000400 	.word	0x48000400

08001710 <moveFr>:


void moveFr(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f000 fffc 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <moveFr+0x38>)
 8001726:	f000 fff7 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <moveFr+0x3c>)
 8001730:	f000 fff2 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f000 ffeb 	bl	8002718 <HAL_GPIO_WritePin>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800

08001750 <moveLe>:

void moveLe(){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f000 ffdc 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <moveLe+0x6c>)
 8001766:	f000 ffd7 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <moveLe+0x70>)
 8001770:	f000 ffd2 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f000 ffcb 	bl	8002718 <HAL_GPIO_WritePin>


	HAL_Delay(700);
 8001782:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001786:	f000 fc69 	bl	800205c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 ffc1 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <moveLe+0x6c>)
 800179c:	f000 ffbc 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <moveLe+0x70>)
 80017a6:	f000 ffb7 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f000 ffb0 	bl	8002718 <HAL_GPIO_WritePin>



}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800

080017c4 <moveRi>:

void moveRi(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f000 ffa2 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <moveRi+0x6c>)
 80017da:	f000 ff9d 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <moveRi+0x70>)
 80017e4:	f000 ff98 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f000 ff91 	bl	8002718 <HAL_GPIO_WritePin>



	HAL_Delay(700);
 80017f6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80017fa:	f000 fc2f 	bl	800205c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f000 ff87 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2140      	movs	r1, #64	; 0x40
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <moveRi+0x6c>)
 8001810:	f000 ff82 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <moveRi+0x70>)
 800181a:	f000 ff7d 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f000 ff76 	bl	8002718 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800

08001838 <moveBa>:

void moveBa(){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f000 ff68 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001848:	2201      	movs	r2, #1
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <moveBa+0x6c>)
 800184e:	f000 ff63 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <moveBa+0x70>)
 8001858:	f000 ff5e 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f000 ff57 	bl	8002718 <HAL_GPIO_WritePin>


	HAL_Delay(700);
 800186a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800186e:	f000 fbf5 	bl	800205c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f000 ff4d 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <moveBa+0x6c>)
 8001884:	f000 ff48 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <moveBa+0x70>)
 800188e:	f000 ff43 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f000 ff3c 	bl	8002718 <HAL_GPIO_WritePin>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	48000400 	.word	0x48000400
 80018a8:	48000800 	.word	0x48000800

080018ac <moveStop>:

void moveStop(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f000 ff2e 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	4808      	ldr	r0, [pc, #32]	; (80018e4 <moveStop+0x38>)
 80018c2:	f000 ff29 	bl	8002718 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <moveStop+0x3c>)
 80018cc:	f000 ff24 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f000 ff1d 	bl	8002718 <HAL_GPIO_WritePin>

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800

080018ec <cli>:

    //return HAL_ADC_GetValue(&hadc1);
//}

void cli(void * vParam)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fa:	4853      	ldr	r0, [pc, #332]	; (8001a48 <cli+0x15c>)
 80018fc:	f000 ff0c 	bl	8002718 <HAL_GPIO_WritePin>

	for (int i = 0; i < 4; ++i) {
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	e012      	b.n	800192c <cli+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	484f      	ldr	r0, [pc, #316]	; (8001a48 <cli+0x15c>)
 800190c:	f000 ff04 	bl	8002718 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f000 fba3 	bl	800205c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2110      	movs	r1, #16
 800191a:	484b      	ldr	r0, [pc, #300]	; (8001a48 <cli+0x15c>)
 800191c:	f000 fefc 	bl	8002718 <HAL_GPIO_WritePin>
		HAL_Delay(70);
 8001920:	2046      	movs	r0, #70	; 0x46
 8001922:	f000 fb9b 	bl	800205c <HAL_Delay>
	for (int i = 0; i < 4; ++i) {
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b03      	cmp	r3, #3
 8001930:	dde9      	ble.n	8001906 <cli+0x1a>
	}
	float dist;
	int sf = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
	char pmove = "X";
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <cli+0x160>)
 8001938:	75fb      	strb	r3, [r7, #23]

	while(1)

	{

		vTaskDelay(5);
 800193a:	2005      	movs	r0, #5
 800193c:	f004 ff88 	bl	8006850 <vTaskDelay>

		if (pmove == move && move != 'W'){
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <cli+0x164>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	7dfa      	ldrb	r2, [r7, #23]
 8001946:	429a      	cmp	r2, r3
 8001948:	d103      	bne.n	8001952 <cli+0x66>
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <cli+0x164>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b57      	cmp	r3, #87	; 0x57
 8001950:	d175      	bne.n	8001a3e <cli+0x152>
			continue;
		}

		pmove = move;
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <cli+0x164>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	75fb      	strb	r3, [r7, #23]

		dist = measureDistance();
 8001958:	f7ff fb24 	bl	8000fa4 <measureDistance>
 800195c:	ed87 0a04 	vstr	s0, [r7, #16]

		if(move == 'S') {
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <cli+0x164>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b53      	cmp	r3, #83	; 0x53
 8001966:	d105      	bne.n	8001974 <cli+0x88>
			ledB();
 8001968:	f7ff fe4e 	bl	8001608 <ledB>
			moveBa();
 800196c:	f7ff ff64 	bl	8001838 <moveBa>
			sf = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
		}

		if(move == 'H'){
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <cli+0x164>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b48      	cmp	r3, #72	; 0x48
 800197a:	d114      	bne.n	80019a6 <cli+0xba>
			buzzR();
 800197c:	f7ff fe6c 	bl	8001658 <buzzR>
			if (!sf){
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d150      	bne.n	8001a28 <cli+0x13c>
				int dchar = dist;
 8001986:	edd7 7a04 	vldr	s15, [r7, #16]
 800198a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	60bb      	str	r3, [r7, #8]

				sendChar(dchar , 1);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb70 	bl	8001080 <sendChar>
				sf = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	e040      	b.n	8001a28 <cli+0x13c>
			}
		}
		else if(move == 'A') {
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <cli+0x164>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b41      	cmp	r3, #65	; 0x41
 80019ac:	d106      	bne.n	80019bc <cli+0xd0>
			ledB();
 80019ae:	f7ff fe2b 	bl	8001608 <ledB>
			moveLe();
 80019b2:	f7ff fecd 	bl	8001750 <moveLe>
			sf = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	e035      	b.n	8001a28 <cli+0x13c>
		}
		else if(move == 'D') {
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <cli+0x164>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b44      	cmp	r3, #68	; 0x44
 80019c2:	d106      	bne.n	80019d2 <cli+0xe6>
			ledB();
 80019c4:	f7ff fe20 	bl	8001608 <ledB>
			moveRi();
 80019c8:	f7ff fefc 	bl	80017c4 <moveRi>
			sf = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	e02a      	b.n	8001a28 <cli+0x13c>
		}
		else if(move == 'X'){
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <cli+0x164>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b58      	cmp	r3, #88	; 0x58
 80019d8:	d106      	bne.n	80019e8 <cli+0xfc>
			ledP();
 80019da:	f7ff fe29 	bl	8001630 <ledP>
			moveStop();
 80019de:	f7ff ff65 	bl	80018ac <moveStop>
			sf = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	e01f      	b.n	8001a28 <cli+0x13c>
		}

		else if (dist < 25) {
 80019e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d516      	bpl.n	8001a28 <cli+0x13c>
			moveStop();
 80019fa:	f7ff ff57 	bl	80018ac <moveStop>
			buzzR();
 80019fe:	f7ff fe2b 	bl	8001658 <buzzR>


			if (!sf){
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11c      	bne.n	8001a42 <cli+0x156>
				int dchar = dist;
 8001a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	60fb      	str	r3, [r7, #12]

				sendChar(dchar , 1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb2f 	bl	8001080 <sendChar>
				sf = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
			}


			continue;
 8001a26:	e00c      	b.n	8001a42 <cli+0x156>
		}

		if(move == 'W') {
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <cli+0x164>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b57      	cmp	r3, #87	; 0x57
 8001a2e:	d184      	bne.n	800193a <cli+0x4e>
			ledB();
 8001a30:	f7ff fdea 	bl	8001608 <ledB>
			moveFr();
 8001a34:	f7ff fe6c 	bl	8001710 <moveFr>
			sf = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	e77d      	b.n	800193a <cli+0x4e>
			continue;
 8001a3e:	bf00      	nop
 8001a40:	e77b      	b.n	800193a <cli+0x4e>
			continue;
 8001a42:	bf00      	nop
		vTaskDelay(5);
 8001a44:	e779      	b.n	800193a <cli+0x4e>
 8001a46:	bf00      	nop
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	0800a288 	.word	0x0800a288
 8001a50:	200005f4 	.word	0x200005f4

08001a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f004 fc9c 	bl	800639a <osDelay>
 8001a62:	e7fb      	b.n	8001a5c <StartDefaultTask+0x8>

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_MspInit+0x4c>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_MspInit+0x4c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6613      	str	r3, [r2, #96]	; 0x60
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_MspInit+0x4c>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_MspInit+0x4c>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_MspInit+0x4c>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	f06f 0001 	mvn.w	r0, #1
 8001aae:	f000 fbd4 	bl	800225a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d131      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b12:	2320      	movs	r3, #32
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f000 fc48 	bl	80023c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2105      	movs	r1, #5
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f000 fb8e 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f000 fba7 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b44:	e010      	b.n	8001b68 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM4)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_TIM_Base_MspInit+0xb4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10b      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_TIM_Base_MspInit+0xb0>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40000800 	.word	0x40000800

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ae      	sub	sp, #184	; 0xb8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2288      	movs	r2, #136	; 0x88
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fe37 	bl	800780c <memset>
  if(huart->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_UART_MspInit+0x154>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d144      	bne.n	8001c32 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fc2b 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc0:	f7ff ff50 	bl	8001a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a41      	ldr	r2, [pc, #260]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f000 fbd2 	bl	80023c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2105      	movs	r1, #5
 8001c24:	2026      	movs	r0, #38	; 0x26
 8001c26:	f000 fb18 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c2a:	2026      	movs	r0, #38	; 0x26
 8001c2c:	f000 fb31 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c30:	e047      	b.n	8001cc2 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_UART_MspInit+0x15c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d142      	bne.n	8001cc2 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fbe1 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001c54:	f7ff ff06 	bl	8001a64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0x158>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c88:	2330      	movs	r3, #48	; 0x30
 8001c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001caa:	4619      	mov	r1, r3
 8001cac:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <HAL_UART_MspInit+0x160>)
 8001cae:	f000 fb89 	bl	80023c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	2027      	movs	r0, #39	; 0x27
 8001cb8:	f000 facf 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cbc:	2027      	movs	r0, #39	; 0x27
 8001cbe:	f000 fae8 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	37b8      	adds	r7, #184	; 0xb8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40004800 	.word	0x40004800
 8001cd8:	48000800 	.word	0x48000800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 f986 	bl	800201c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d10:	f005 f8c6 	bl	8006ea0 <xTaskGetSchedulerState>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d1a:	f005 fb05 	bl	8007328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM2_IRQHandler+0x10>)
 8001d2a:	f002 faed 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000450 	.word	0x20000450

08001d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART2_IRQHandler+0x10>)
 8001d3e:	f003 faab 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200004e8 	.word	0x200004e8

08001d4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <USART3_IRQHandler+0x10>)
 8001d52:	f003 faa1 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000056c 	.word	0x2000056c

08001d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_kill>:

int _kill(int pid, int sig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7a:	f005 fd0f 	bl	800779c <__errno>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2216      	movs	r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_exit>:

void _exit (int status)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe7 	bl	8001d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da2:	e7fe      	b.n	8001da2 <_exit+0x12>

08001da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e00a      	b.n	8001dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db6:	f3af 8000 	nop.w
 8001dba:	4601      	mov	r1, r0
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf0      	blt.n	8001db6 <_read+0x12>
  }

  return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e009      	b.n	8001e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60ba      	str	r2, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbf1      	blt.n	8001df0 <_write+0x12>
  }
  return len;
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_close>:

int _close(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_isatty>:

int _isatty(int file)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f005 fc74 	bl	800779c <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20018000 	.word	0x20018000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	20000604 	.word	0x20000604
 8001ee8:	20001328 	.word	0x20001328

08001eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f14:	f7ff ffea 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	; (8001f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f005 fc33 	bl	80077a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f42:	f7ff f909 	bl	8001158 <main>

08001f46 <LoopForever>:

LoopForever:
    b LoopForever
 8001f46:	e7fe      	b.n	8001f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f54:	0800a6c4 	.word	0x0800a6c4
  ldr r2, =_sbss
 8001f58:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f5c:	20001328 	.word	0x20001328

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_Init+0x3c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_Init+0x3c>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 f962 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 f80f 	bl	8001fa4 <HAL_InitTick>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	e001      	b.n	8001f96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f92:	f7ff fd6d 	bl	8001a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_InitTick+0x6c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d023      	beq.n	8002000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_InitTick+0x70>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_InitTick+0x6c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f96d 	bl	80022ae <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d809      	bhi.n	8001ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 f937 	bl	800225a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_InitTick+0x74>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e004      	b.n	8002004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e001      	b.n	8002004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	20000608 	.word	0x20000608

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000608 	.word	0x20000608

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d008      	beq.n	80022f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e022      	b.n	8002336 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 020e 	bic.w	r2, r2, #14
 80022fe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 021c 	and.w	r2, r3, #28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d005      	beq.n	8002366 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e029      	b.n	80023ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 020e 	bic.w	r2, r2, #14
 8002374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f003 021c 	and.w	r2, r3, #28
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
    }
  }
  return status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d2:	e17f      	b.n	80026d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8171 	beq.w	80026ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d005      	beq.n	8002404 <HAL_GPIO_Init+0x40>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b03      	cmp	r3, #3
 8002470:	d118      	bne.n	80024a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	6939      	ldr	r1, [r7, #16]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80ac 	beq.w	80026ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <HAL_GPIO_Init+0x330>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <HAL_GPIO_Init+0x330>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6613      	str	r3, [r2, #96]	; 0x60
 8002582:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <HAL_GPIO_Init+0x330>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_GPIO_Init+0x334>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x242>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_GPIO_Init+0x338>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x23e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_GPIO_Init+0x33c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x23a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_GPIO_Init+0x340>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x236>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_GPIO_Init+0x344>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x232>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_GPIO_Init+0x348>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x22e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_GPIO_Init+0x34c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x22a>
 80025ea:	2306      	movs	r3, #6
 80025ec:	e00c      	b.n	8002608 <HAL_GPIO_Init+0x244>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00a      	b.n	8002608 <HAL_GPIO_Init+0x244>
 80025f2:	2305      	movs	r3, #5
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x244>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x244>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x244>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x244>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x244>
 8002606:	2300      	movs	r3, #0
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_GPIO_Init+0x334>)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_GPIO_Init+0x350>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <HAL_GPIO_Init+0x350>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_GPIO_Init+0x350>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_GPIO_Init+0x350>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_GPIO_Init+0x350>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_GPIO_Init+0x350>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_GPIO_Init+0x350>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_GPIO_Init+0x350>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f47f ae78 	bne.w	80023d4 <HAL_GPIO_Init+0x10>
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	48000400 	.word	0x48000400
 8002700:	48000800 	.word	0x48000800
 8002704:	48000c00 	.word	0x48000c00
 8002708:	48001000 	.word	0x48001000
 800270c:	48001400 	.word	0x48001400
 8002710:	48001800 	.word	0x48001800
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002734:	e002      	b.n	800273c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <HAL_PWREx_GetVoltageRange+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002772:	d130      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800277c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002780:	d038      	beq.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2232      	movs	r2, #50	; 0x32
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a8:	e002      	b.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	d102      	bne.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f2      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d110      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e00f      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e2:	d007      	beq.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40007000 	.word	0x40007000
 8002808:	20000000 	.word	0x20000000
 800280c:	431bde83 	.word	0x431bde83

08002810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e3ca      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002822:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282c:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80e4 	beq.w	8002a0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_RCC_OscConfig+0x4a>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	f040 808b 	bne.w	8002968 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	f040 8087 	bne.w	8002968 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e3a2      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <HAL_RCC_OscConfig+0x7c>
 8002882:	4b7f      	ldr	r3, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288a:	e005      	b.n	8002898 <HAL_RCC_OscConfig+0x88>
 800288c:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002898:	4293      	cmp	r3, r2
 800289a:	d223      	bcs.n	80028e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fd55 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e383      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	496d      	ldr	r1, [pc, #436]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ce:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	4968      	ldr	r1, [pc, #416]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
 80028e2:	e025      	b.n	8002930 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028ea:	f043 0308 	orr.w	r3, r3, #8
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4960      	ldr	r1, [pc, #384]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	495b      	ldr	r1, [pc, #364]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fd15 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e343      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002930:	f000 fc4a 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4950      	ldr	r1, [pc, #320]	; (8002a84 <HAL_RCC_OscConfig+0x274>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <HAL_RCC_OscConfig+0x278>)
 800294e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002950:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <HAL_RCC_OscConfig+0x27c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fb25 	bl	8001fa4 <HAL_InitTick>
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d052      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	e327      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d032      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297c:	f7ff fb62 	bl	8002044 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002984:	f7ff fb5e 	bl	8002044 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e310      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a36      	ldr	r2, [pc, #216]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4931      	ldr	r1, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	492c      	ldr	r1, [pc, #176]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e01a      	b.n	8002a0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e2:	f7ff fb2f 	bl	8002044 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ea:	f7ff fb2b 	bl	8002044 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e2dd      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x1da>
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d074      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x21a>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d10e      	bne.n	8002a42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d10b      	bne.n	8002a42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d064      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2f0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d160      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e2ba      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x24a>
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e026      	b.n	8002aa8 <HAL_RCC_OscConfig+0x298>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a62:	d115      	bne.n	8002a90 <HAL_RCC_OscConfig+0x280>
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a02      	ldr	r2, [pc, #8]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x298>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	0800a294 	.word	0x0800a294
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a9f      	ldr	r2, [pc, #636]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b9d      	ldr	r3, [pc, #628]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a9c      	ldr	r2, [pc, #624]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fac8 	bl	8002044 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fac4 	bl	8002044 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e276      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aca:	4b92      	ldr	r3, [pc, #584]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x2a8>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fab4 	bl	8002044 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fab0 	bl	8002044 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e262      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af2:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2d0>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d060      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x310>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d119      	bne.n	8002b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d116      	bne.n	8002b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b20:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_OscConfig+0x328>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e23f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	4973      	ldr	r1, [pc, #460]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	e040      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d023      	beq.n	8002b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b56:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6e      	ldr	r2, [pc, #440]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7ff fa6f 	bl	8002044 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7ff fa6b 	bl	8002044 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e21d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7c:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	495f      	ldr	r1, [pc, #380]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	e018      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5c      	ldr	r2, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff fa4b 	bl	8002044 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff fa47 	bl	8002044 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1f9      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be4:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fa26 	bl	8002044 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7ff fa22 	bl	8002044 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1d4      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3ec>
 8002c1c:	e01b      	b.n	8002c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c24:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fa09 	bl	8002044 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c36:	f7ff fa05 	bl	8002044 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1b7      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ef      	bne.n	8002c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80a6 	beq.w	8002db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x508>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d118      	bne.n	8002cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_OscConfig+0x508>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x508>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca8:	f7ff f9cc 	bl	8002044 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb0:	f7ff f9c8 	bl	8002044 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e17a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_RCC_OscConfig+0x508>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4d8>
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce6:	e029      	b.n	8002d3c <HAL_RCC_OscConfig+0x52c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d115      	bne.n	8002d1c <HAL_RCC_OscConfig+0x50c>
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_OscConfig+0x504>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x52c>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	4b9c      	ldr	r3, [pc, #624]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4a9b      	ldr	r2, [pc, #620]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2c:	4b98      	ldr	r3, [pc, #608]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	4a97      	ldr	r2, [pc, #604]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d016      	beq.n	8002d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7ff f97e 	bl	8002044 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7ff f97a 	bl	8002044 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e12a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d62:	4b8b      	ldr	r3, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ed      	beq.n	8002d4c <HAL_RCC_OscConfig+0x53c>
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7ff f967 	bl	8002044 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff f963 	bl	8002044 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e113      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d90:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ed      	bne.n	8002d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	4a79      	ldr	r2, [pc, #484]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80fe 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 80d0 	bne.w	8002f64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dc4:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d130      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	3b01      	subs	r3, #1
 8002de4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d127      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d11f      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e04:	2a07      	cmp	r2, #7
 8002e06:	bf14      	ite	ne
 8002e08:	2201      	movne	r2, #1
 8002e0a:	2200      	moveq	r2, #0
 8002e0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d113      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d109      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d06e      	beq.n	8002f18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d069      	beq.n	8002f14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0ad      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e68:	f7ff f8ec 	bl	8002044 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff f8e8 	bl	8002044 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e09a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e82:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8e:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_RCC_OscConfig+0x784>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e9e:	3a01      	subs	r2, #1
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ea8:	0212      	lsls	r2, r2, #8
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eb0:	0852      	lsrs	r2, r2, #1
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0552      	lsls	r2, r2, #21
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ebc:	0852      	lsrs	r2, r2, #1
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	0652      	lsls	r2, r2, #25
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec8:	0912      	lsrs	r2, r2, #4
 8002eca:	0452      	lsls	r2, r2, #17
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	4930      	ldr	r1, [pc, #192]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eec:	f7ff f8aa 	bl	8002044 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7ff f8a6 	bl	8002044 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e058      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f12:	e050      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d148      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f3c:	f7ff f882 	bl	8002044 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7ff f87e 	bl	8002044 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e030      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x734>
 8002f62:	e028      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d023      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <HAL_RCC_OscConfig+0x780>)
 8002f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7ff f865 	bl	8002044 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7ff f861 	bl	8002044 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d905      	bls.n	8002f98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x7b0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ec      	bne.n	8002f7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_OscConfig+0x7b0>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4905      	ldr	r1, [pc, #20]	; (8002fc0 <HAL_RCC_OscConfig+0x7b0>)
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x7b4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
 8002fb0:	e001      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	feeefffc 	.word	0xfeeefffc

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0e7      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b72      	ldr	r3, [pc, #456]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4970      	ldr	r1, [pc, #448]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b6e      	ldr	r3, [pc, #440]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0cf      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	429a      	cmp	r2, r3
 8003026:	d908      	bls.n	800303a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4960      	ldr	r1, [pc, #384]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04c      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d121      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0a6      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d115      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e09a      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307e:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08e      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e086      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309e:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4943      	ldr	r1, [pc, #268]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b0:	f7fe ffc8 	bl	8002044 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe ffc4 	bl	8002044 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e06e      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 020c 	and.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1eb      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d208      	bcs.n	800310e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	492b      	ldr	r1, [pc, #172]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d210      	bcs.n	800313e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	4923      	ldr	r1, [pc, #140]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCC_ClockConfig+0x1ec>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e036      	b.n	80031ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4918      	ldr	r1, [pc, #96]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4910      	ldr	r1, [pc, #64]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317c:	f000 f824 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	490b      	ldr	r1, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1f4>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1f8>)
 800319a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1fc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe feff 	bl	8001fa4 <HAL_InitTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	0800a294 	.word	0x0800a294
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d121      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d11e      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003224:	4a2b      	ldr	r2, [pc, #172]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d102      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e004      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d101      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 800324e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d134      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0xa6>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xac>
 800326c:	e005      	b.n	800327a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003270:	617b      	str	r3, [r7, #20]
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003276:	617b      	str	r3, [r7, #20]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	617b      	str	r3, [r7, #20]
      break;
 800327e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	3301      	adds	r3, #1
 800328c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	fb03 f202 	mul.w	r2, r3, r2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0e5b      	lsrs	r3, r3, #25
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	3301      	adds	r3, #1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032c0:	69bb      	ldr	r3, [r7, #24]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0800a2ac 	.word	0x0800a2ac
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4904      	ldr	r1, [pc, #16]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	0800a2a4 	.word	0x0800a2a4

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003328:	f7ff ffda 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCC_GetPCLK2Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	0800a2a4 	.word	0x0800a2a4

08003350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003368:	f7ff f9ee 	bl	8002748 <HAL_PWREx_GetVoltageRange>
 800336c:	6178      	str	r0, [r7, #20]
 800336e:	e014      	b.n	800339a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4a24      	ldr	r2, [pc, #144]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f9de 	bl	8002748 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a0:	d10b      	bne.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d919      	bls.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2ba0      	cmp	r3, #160	; 0xa0
 80033ac:	d902      	bls.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ae:	2302      	movs	r3, #2
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e013      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e010      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d902      	bls.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033c0:	2303      	movs	r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e00a      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	d102      	bne.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033cc:	2302      	movs	r3, #2
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e004      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b70      	cmp	r3, #112	; 0x70
 80033d6:	d101      	bne.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d8:	2301      	movs	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 0207 	bic.w	r2, r3, #7
 80033e4:	4909      	ldr	r1, [pc, #36]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	40022000 	.word	0x40022000

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003418:	2300      	movs	r3, #0
 800341a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800341c:	2300      	movs	r3, #0
 800341e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003428:	2b00      	cmp	r3, #0
 800342a:	d041      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003434:	d02a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800343a:	d824      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800343c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003446:	d81e      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800344c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003450:	d010      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003452:	e018      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003454:	4b86      	ldr	r3, [pc, #536]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a85      	ldr	r2, [pc, #532]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003460:	e015      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fabb 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003472:	e00c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3320      	adds	r3, #32
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fba6 	bl	8003bcc <RCCEx_PLLSAI2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	74fb      	strb	r3, [r7, #19]
      break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	4973      	ldr	r1, [pc, #460]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034aa:	e001      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d041      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c4:	d02a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ca:	d824      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d6:	d81e      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d010      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034e2:	e018      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a61      	ldr	r2, [pc, #388]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fa73 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3320      	adds	r3, #32
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fb5e 	bl	8003bcc <RCCEx_PLLSAI2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	74fb      	strb	r3, [r7, #19]
      break;
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800351c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003524:	4b52      	ldr	r3, [pc, #328]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003532:	494f      	ldr	r1, [pc, #316]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800353a:	e001      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a0 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	4a40      	ldr	r2, [pc, #256]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	6593      	str	r3, [r2, #88]	; 0x58
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003580:	2301      	movs	r3, #1
 8003582:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003590:	f7fe fd58 	bl	8002044 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003596:	e009      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fe fd54 	bl	8002044 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d902      	bls.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	74fb      	strb	r3, [r7, #19]
        break;
 80035aa:	e005      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ef      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d15c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01f      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d019      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fd13 	bl	8002044 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003620:	e00b      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fe fd0f 	bl	8002044 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d902      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	74fb      	strb	r3, [r7, #19]
            break;
 8003638:	e006      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ec      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003666:	e009      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367c:	7c7b      	ldrb	r3, [r7, #17]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b9e      	ldr	r3, [pc, #632]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4a9d      	ldr	r2, [pc, #628]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369a:	4b98      	ldr	r3, [pc, #608]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0203 	bic.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	4994      	ldr	r1, [pc, #592]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036bc:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 020c 	bic.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	498c      	ldr	r1, [pc, #560]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036de:	4b87      	ldr	r3, [pc, #540]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4983      	ldr	r1, [pc, #524]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003700:	4b7e      	ldr	r3, [pc, #504]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	497b      	ldr	r1, [pc, #492]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003722:	4b76      	ldr	r3, [pc, #472]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	4972      	ldr	r1, [pc, #456]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003744:	4b6d      	ldr	r3, [pc, #436]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	496a      	ldr	r1, [pc, #424]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003766:	4b65      	ldr	r3, [pc, #404]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	4961      	ldr	r1, [pc, #388]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003788:	4b5c      	ldr	r3, [pc, #368]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	4959      	ldr	r1, [pc, #356]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037aa:	4b54      	ldr	r3, [pc, #336]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	4950      	ldr	r1, [pc, #320]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	4948      	ldr	r1, [pc, #288]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	493f      	ldr	r1, [pc, #252]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d028      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382e:	d106      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003830:	4b32      	ldr	r3, [pc, #200]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a31      	ldr	r2, [pc, #196]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	60d3      	str	r3, [r2, #12]
 800383c:	e011      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003846:	d10c      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	2101      	movs	r1, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f8c8 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	491f      	ldr	r1, [pc, #124]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388c:	d106      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388e:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003898:	60d3      	str	r3, [r2, #12]
 800389a:	e011      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f899 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ea:	d109      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a02      	ldr	r2, [pc, #8]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
 80038f8:	e014      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f867 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393e:	4928      	ldr	r1, [pc, #160]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800394a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394e:	d10d      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f844 	bl	80039e4 <RCCEx_PLLSAI1_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	74bb      	strb	r3, [r7, #18]
 800396a:	e011      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003974:	d10c      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f925 	bl	8003bcc <RCCEx_PLLSAI2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ce:	4904      	ldr	r1, [pc, #16]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039f2:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0203 	and.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10d      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
       ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a16:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
       ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d047      	beq.n	8003aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e044      	b.n	8003aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d018      	beq.n	8003a6a <RCCEx_PLLSAI1_Config+0x86>
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d825      	bhi.n	8003a88 <RCCEx_PLLSAI1_Config+0xa4>
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d002      	beq.n	8003a46 <RCCEx_PLLSAI1_Config+0x62>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d009      	beq.n	8003a58 <RCCEx_PLLSAI1_Config+0x74>
 8003a44:	e020      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a46:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a56:	e01a      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a58:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e013      	b.n	8003a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a76:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a86:	e006      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e004      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e002      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	4944      	ldr	r1, [pc, #272]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d17d      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fe faba 	bl	8002044 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fe fab6 	bl	8002044 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae8:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d160      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b00:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	0912      	lsrs	r2, r2, #4
 8003b18:	0452      	lsls	r2, r2, #17
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	492a      	ldr	r1, [pc, #168]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
 8003b22:	e027      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d112      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2a:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	0211      	lsls	r1, r2, #8
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6912      	ldr	r2, [r2, #16]
 8003b40:	0852      	lsrs	r2, r2, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	0552      	lsls	r2, r2, #21
 8003b46:	430a      	orrs	r2, r1
 8003b48:	491f      	ldr	r1, [pc, #124]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
 8003b4e:	e011      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6952      	ldr	r2, [r2, #20]
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	0652      	lsls	r2, r2, #25
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4916      	ldr	r1, [pc, #88]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe fa60 	bl	8002044 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b88:	f7fe fa5c 	bl	8002044 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
          break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d018      	beq.n	8003c18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003be6:	4b67      	ldr	r3, [pc, #412]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0203 	and.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10d      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bfe:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d047      	beq.n	8003ca2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e044      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d018      	beq.n	8003c52 <RCCEx_PLLSAI2_Config+0x86>
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d825      	bhi.n	8003c70 <RCCEx_PLLSAI2_Config+0xa4>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <RCCEx_PLLSAI2_Config+0x62>
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d009      	beq.n	8003c40 <RCCEx_PLLSAI2_Config+0x74>
 8003c2c:	e020      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c2e:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11d      	bne.n	8003c76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3e:	e01a      	b.n	8003c76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c50:	e013      	b.n	8003c7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c52:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c6e:	e006      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	e004      	b.n	8003c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	4939      	ldr	r1, [pc, #228]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d167      	bne.n	8003d78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fe f9c6 	bl	8002044 <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cba:	e009      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cbc:	f7fe f9c2 	bl	8002044 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cce:	e005      	b.n	8003cdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ef      	bne.n	8003cbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d14a      	bne.n	8003d78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce8:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6892      	ldr	r2, [r2, #8]
 8003cf8:	0211      	lsls	r1, r2, #8
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	0912      	lsrs	r2, r2, #4
 8003d00:	0452      	lsls	r2, r2, #17
 8003d02:	430a      	orrs	r2, r1
 8003d04:	491f      	ldr	r1, [pc, #124]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	614b      	str	r3, [r1, #20]
 8003d0a:	e011      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6912      	ldr	r2, [r2, #16]
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0652      	lsls	r2, r2, #25
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	4916      	ldr	r1, [pc, #88]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d30:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe f982 	bl	8002044 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d42:	e009      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d44:	f7fe f97e 	bl	8002044 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	73fb      	strb	r3, [r7, #15]
          break;
 8003d56:	e005      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ef      	beq.n	8003d44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4904      	ldr	r1, [pc, #16]	; (8003d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000

08003d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e049      	b.n	8003e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fe86 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fd8e 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e049      	b.n	8003edc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f841 	bl	8003ee4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 fd37 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_IC_Start_IT+0x1e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e023      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x66>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_IC_Start_IT+0x2e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e01b      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x66>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_IC_Start_IT+0x3e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e013      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x66>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_IC_Start_IT+0x4e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	e00b      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x66>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0x5e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e003      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x66>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_TIM_IC_Start_IT+0x78>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e013      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0xa0>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d104      	bne.n	8003f80 <HAL_TIM_IC_Start_IT+0x88>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e00b      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0xa0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d104      	bne.n	8003f90 <HAL_TIM_IC_Start_IT+0x98>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0xa0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa0:	7b7b      	ldrb	r3, [r7, #13]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0dd      	b.n	8004166 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_IC_Start_IT+0xc2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	e023      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x10a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_IC_Start_IT+0xd2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc8:	e01b      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x10a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0xe2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd8:	e013      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x10a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_IC_Start_IT+0xf2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe8:	e00b      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x10a>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_IC_Start_IT+0x102>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	e003      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x10a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0x11a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	e013      	b.n	800403a <HAL_TIM_IC_Start_IT+0x142>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d104      	bne.n	8004022 <HAL_TIM_IC_Start_IT+0x12a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	e00b      	b.n	800403a <HAL_TIM_IC_Start_IT+0x142>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d104      	bne.n	8004032 <HAL_TIM_IC_Start_IT+0x13a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004030:	e003      	b.n	800403a <HAL_TIM_IC_Start_IT+0x142>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d841      	bhi.n	80040c4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_TIM_IC_Start_IT+0x150>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040c5 	.word	0x080040c5
 8004058:	0800408f 	.word	0x0800408f
 800405c:	080040c5 	.word	0x080040c5
 8004060:	080040c5 	.word	0x080040c5
 8004064:	080040c5 	.word	0x080040c5
 8004068:	080040a1 	.word	0x080040a1
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040c5 	.word	0x080040c5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040b3 	.word	0x080040b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0202 	orr.w	r2, r2, #2
 800408a:	60da      	str	r2, [r3, #12]
      break;
 800408c:	e01d      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
      break;
 800409e:	e014      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	60da      	str	r2, [r3, #12]
      break;
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0210 	orr.w	r2, r2, #16
 80040c0:	60da      	str	r2, [r3, #12]
      break;
 80040c2:	e002      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
      break;
 80040c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d149      	bne.n	8004164 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fe5d 	bl	8004d98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_TIM_IC_Start_IT+0x278>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d018      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <HAL_TIM_IC_Start_IT+0x27c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_TIM_IC_Start_IT+0x280>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_TIM_IC_Start_IT+0x284>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_TIM_IC_Start_IT+0x288>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x22c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_TIM_IC_Start_IT+0x28c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d115      	bne.n	8004150 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_TIM_IC_Start_IT+0x290>)
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d015      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x26a>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d011      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	e008      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e000      	b.n	8004164 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40014000 	.word	0x40014000
 8004188:	00010007 	.word	0x00010007

0800418c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d841      	bhi.n	8004224 <HAL_TIM_IC_Stop_IT+0x98>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	08004225 	.word	0x08004225
 80041b0:	08004225 	.word	0x08004225
 80041b4:	08004225 	.word	0x08004225
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	08004225 	.word	0x08004225
 80041c0:	08004225 	.word	0x08004225
 80041c4:	08004225 	.word	0x08004225
 80041c8:	08004201 	.word	0x08004201
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004225 	.word	0x08004225
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004213 	.word	0x08004213
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0202 	bic.w	r2, r2, #2
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e01d      	b.n	800422a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0204 	bic.w	r2, r2, #4
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e014      	b.n	800422a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0208 	bic.w	r2, r2, #8
 800420e:	60da      	str	r2, [r3, #12]
      break;
 8004210:	e00b      	b.n	800422a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0210 	bic.w	r2, r2, #16
 8004220:	60da      	str	r2, [r3, #12]
      break;
 8004222:	e002      	b.n	800422a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	bf00      	nop
  }

  if (status == HAL_OK)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d166      	bne.n	80042fe <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fdad 	bl	8004d98 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	f241 1311 	movw	r3, #4369	; 0x1111
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_TIM_IC_Stop_IT+0xe2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	f240 4344 	movw	r3, #1092	; 0x444
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d107      	bne.n	800426e <HAL_TIM_IC_Stop_IT+0xe2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_TIM_IC_Stop_IT+0xf2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	e023      	b.n	80042c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d104      	bne.n	800428e <HAL_TIM_IC_Stop_IT+0x102>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	e01b      	b.n	80042c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_TIM_IC_Stop_IT+0x112>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	e013      	b.n	80042c6 <HAL_TIM_IC_Stop_IT+0x13a>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_IC_Stop_IT+0x122>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_IC_Stop_IT+0x13a>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d104      	bne.n	80042be <HAL_TIM_IC_Stop_IT+0x132>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_IC_Stop_IT+0x13a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_IC_Stop_IT+0x14a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	e013      	b.n	80042fe <HAL_TIM_IC_Stop_IT+0x172>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_IC_Stop_IT+0x15a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_IC_Stop_IT+0x172>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_IC_Stop_IT+0x16a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f4:	e003      	b.n	80042fe <HAL_TIM_IC_Stop_IT+0x172>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0202 	mvn.w	r2, #2
 8004334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fdfa 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 faaa 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fab1 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0204 	mvn.w	r2, #4
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fdd0 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa80 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa87 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0208 	mvn.w	r2, #8
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fda6 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa56 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa5d 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fd7c 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa2c 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa33 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0201 	mvn.w	r2, #1
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa06 	bl	8004898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d10e      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fd28 	bl	8004f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c6:	d10e      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fd1b 	bl	8004f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d10e      	bne.n	8004512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d107      	bne.n	8004512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f9e1 	bl	80048d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b20      	cmp	r3, #32
 800451e:	d10e      	bne.n	800453e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d107      	bne.n	800453e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0220 	mvn.w	r2, #32
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fcdb 	bl	8004ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004560:	2302      	movs	r3, #2
 8004562:	e088      	b.n	8004676 <HAL_TIM_IC_ConfigChannel+0x130>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11b      	bne.n	80045aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 fa4b 	bl	8004a1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 020c 	bic.w	r2, r2, #12
 8004594:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6999      	ldr	r1, [r3, #24]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	e060      	b.n	800466c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d11c      	bne.n	80045ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f000 fac9 	bl	8004b56 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6999      	ldr	r1, [r3, #24]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
 80045e8:	e040      	b.n	800466c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f000 fb16 	bl	8004c30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 020c 	bic.w	r2, r2, #12
 8004612:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69d9      	ldr	r1, [r3, #28]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	61da      	str	r2, [r3, #28]
 8004626:	e021      	b.n	800466c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d11c      	bne.n	8004668 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f000 fb33 	bl	8004ca8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004650:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	021a      	lsls	r2, r3, #8
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	61da      	str	r2, [r3, #28]
 8004666:	e001      	b.n	800466c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7dfb      	ldrb	r3, [r7, #23]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_TIM_ConfigClockSource+0x1c>
 8004696:	2302      	movs	r3, #2
 8004698:	e0b6      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x18a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d6:	d03e      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0xd8>
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	f200 8087 	bhi.w	80047ee <HAL_TIM_ConfigClockSource+0x170>
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	f000 8086 	beq.w	80047f4 <HAL_TIM_ConfigClockSource+0x176>
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d87f      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 80046ee:	2b70      	cmp	r3, #112	; 0x70
 80046f0:	d01a      	beq.n	8004728 <HAL_TIM_ConfigClockSource+0xaa>
 80046f2:	2b70      	cmp	r3, #112	; 0x70
 80046f4:	d87b      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 80046f6:	2b60      	cmp	r3, #96	; 0x60
 80046f8:	d050      	beq.n	800479c <HAL_TIM_ConfigClockSource+0x11e>
 80046fa:	2b60      	cmp	r3, #96	; 0x60
 80046fc:	d877      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 80046fe:	2b50      	cmp	r3, #80	; 0x50
 8004700:	d03c      	beq.n	800477c <HAL_TIM_ConfigClockSource+0xfe>
 8004702:	2b50      	cmp	r3, #80	; 0x50
 8004704:	d873      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d058      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x13e>
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d86f      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 800470e:	2b30      	cmp	r3, #48	; 0x30
 8004710:	d064      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x15e>
 8004712:	2b30      	cmp	r3, #48	; 0x30
 8004714:	d86b      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 8004716:	2b20      	cmp	r3, #32
 8004718:	d060      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x15e>
 800471a:	2b20      	cmp	r3, #32
 800471c:	d867      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d05c      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x15e>
 8004722:	2b10      	cmp	r3, #16
 8004724:	d05a      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x15e>
 8004726:	e062      	b.n	80047ee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6899      	ldr	r1, [r3, #8]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f000 fb0e 	bl	8004d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800474a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
      break;
 8004754:	e04f      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f000 faf7 	bl	8004d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004778:	609a      	str	r2, [r3, #8]
      break;
 800477a:	e03c      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	461a      	mov	r2, r3
 800478a:	f000 f9b5 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2150      	movs	r1, #80	; 0x50
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fac4 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 800479a:	e02c      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	461a      	mov	r2, r3
 80047aa:	f000 fa11 	bl	8004bd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2160      	movs	r1, #96	; 0x60
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fab4 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80047ba:	e01c      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f000 f995 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2140      	movs	r1, #64	; 0x40
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 faa4 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80047da:	e00c      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fa9b 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      break;
 80047f2:	e000      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d831      	bhi.n	8004888 <HAL_TIM_ReadCapturedValue+0x78>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004861 	.word	0x08004861
 8004830:	08004889 	.word	0x08004889
 8004834:	08004889 	.word	0x08004889
 8004838:	08004889 	.word	0x08004889
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004889 	.word	0x08004889
 8004844:	08004889 	.word	0x08004889
 8004848:	08004889 	.word	0x08004889
 800484c:	08004875 	.word	0x08004875
 8004850:	08004889 	.word	0x08004889
 8004854:	08004889 	.word	0x08004889
 8004858:	08004889 	.word	0x08004889
 800485c:	0800487f 	.word	0x0800487f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	60fb      	str	r3, [r7, #12]

      break;
 8004868:	e00f      	b.n	800488a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	60fb      	str	r3, [r7, #12]

      break;
 8004872:	e00a      	b.n	800488a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	60fb      	str	r3, [r7, #12]

      break;
 800487c:	e005      	b.n	800488a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	60fb      	str	r3, [r7, #12]

      break;
 8004886:	e000      	b.n	800488a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004888:	bf00      	nop
  }

  return tmpreg;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40013400 	.word	0x40013400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <TIM_TI1_SetConfig+0xc4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d017      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d013      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <TIM_TI1_SetConfig+0xc8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00f      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <TIM_TI1_SetConfig+0xcc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00b      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <TIM_TI1_SetConfig+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <TIM_TI1_SetConfig+0xd4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_TI1_SetConfig+0x5e>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <TIM_TI1_SetConfig+0xd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <TIM_TI1_SetConfig+0x62>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <TIM_TI1_SetConfig+0x64>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e003      	b.n	8004a9e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 030a 	bic.w	r3, r3, #10
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 030a 	and.w	r3, r3, #10
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000

08004af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 030a 	bic.w	r3, r3, #10
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b087      	sub	sp, #28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f023 0210 	bic.w	r2, r3, #16
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 0210 	bic.w	r2, r3, #16
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	031b      	lsls	r3, r3, #12
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 0303 	bic.w	r3, r3, #3
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ce6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	031b      	lsls	r3, r3, #12
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	031b      	lsls	r3, r3, #12
 8004d00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f043 0307 	orr.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2201      	movs	r2, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e068      	b.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2e      	ldr	r2, [pc, #184]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d018      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10c      	bne.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40014000 	.word	0x40014000

08004ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e040      	b.n	8004fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc fe10 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fc94 	bl	800589c <UART_SetConfig>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e022      	b.n	8004fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 ff40 	bl	8005e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 ffc7 	bl	8005f50 <UART_CheckIdleState>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	f040 8082 	bne.w	80050ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_UART_Transmit+0x26>
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e07a      	b.n	80050ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Transmit+0x38>
 8005000:	2302      	movs	r3, #2
 8005002:	e073      	b.n	80050ec <HAL_UART_Transmit+0x120>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2221      	movs	r2, #33	; 0x21
 8005018:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501a:	f7fd f813 	bl	8002044 <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005038:	d108      	bne.n	800504c <HAL_UART_Transmit+0x80>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e003      	b.n	8005054 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800505c:	e02d      	b.n	80050ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 ffba 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e039      	b.n	80050ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	881a      	ldrh	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508a:	b292      	uxth	r2, r2
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	3302      	adds	r3, #2
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e008      	b.n	80050a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	b292      	uxth	r2, r2
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1cb      	bne.n	800505e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2140      	movs	r1, #64	; 0x40
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 ff86 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e005      	b.n	80050ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005108:	2b20      	cmp	r3, #32
 800510a:	f040 80bf 	bne.w	800528c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_Receive+0x26>
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0b7      	b.n	800528e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_UART_Receive+0x38>
 8005128:	2302      	movs	r3, #2
 800512a:	e0b0      	b.n	800528e <HAL_UART_Receive+0x19a>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2222      	movs	r2, #34	; 0x22
 8005140:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005148:	f7fc ff7c 	bl	8002044 <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d10e      	bne.n	8005186 <HAL_UART_Receive+0x92>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_UART_Receive+0x88>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005176:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800517a:	e02d      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005184:	e028      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <HAL_UART_Receive+0xb6>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Receive+0xac>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800519e:	e01b      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	227f      	movs	r2, #127	; 0x7f
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a8:	e016      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b2:	d10d      	bne.n	80051d0 <HAL_UART_Receive+0xdc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_UART_Receive+0xd2>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	227f      	movs	r2, #127	; 0x7f
 80051c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c4:	e008      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	223f      	movs	r2, #63	; 0x3f
 80051ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ce:	e003      	b.n	80051d8 <HAL_UART_Receive+0xe4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d108      	bne.n	80051fc <HAL_UART_Receive+0x108>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d104      	bne.n	80051fc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	e003      	b.n	8005204 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800520c:	e033      	b.n	8005276 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	2120      	movs	r1, #32
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fee2 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e032      	b.n	800528e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005234:	b29a      	uxth	r2, r3
 8005236:	8a7b      	ldrh	r3, [r7, #18]
 8005238:	4013      	ands	r3, r2
 800523a:	b29a      	uxth	r2, r3
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	3302      	adds	r3, #2
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e00d      	b.n	8005264 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800524e:	b29b      	uxth	r3, r3
 8005250:	b2da      	uxtb	r2, r3
 8005252:	8a7b      	ldrh	r3, [r7, #18]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4013      	ands	r3, r2
 8005258:	b2da      	uxtb	r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3301      	adds	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1c5      	bne.n	800520e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0ba      	sub	sp, #232	; 0xe8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80052c6:	4013      	ands	r3, r2
 80052c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d115      	bne.n	8005300 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00f      	beq.n	8005300 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 82a6 	beq.w	8005842 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
      }
      return;
 80052fe:	e2a0      	b.n	8005842 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8117 	beq.w	8005538 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005316:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800531a:	4b85      	ldr	r3, [pc, #532]	; (8005530 <HAL_UART_IRQHandler+0x298>)
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 810a 	beq.w	8005538 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <HAL_UART_IRQHandler+0xbc>
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <HAL_UART_IRQHandler+0xec>
 8005360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2202      	movs	r2, #2
 8005372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d011      	beq.n	80053b4 <HAL_UART_IRQHandler+0x11c>
 8005390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2204      	movs	r2, #4
 80053a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2208      	movs	r2, #8
 80053de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e6:	f043 0208 	orr.w	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d012      	beq.n	8005422 <HAL_UART_IRQHandler+0x18a>
 80053fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00c      	beq.n	8005422 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 820c 	beq.w	8005846 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04f      	beq.n	800551a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fe75 	bl	800616a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d141      	bne.n	8005512 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1d9      	bne.n	800548e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a13      	ldr	r2, [pc, #76]	; (8005534 <HAL_UART_IRQHandler+0x29c>)
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc ff27 	bl	8002342 <HAL_DMA_Abort_IT>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	e00f      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9b0 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	e00b      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9ac 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	e007      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9a8 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005528:	e18d      	b.n	8005846 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552a:	bf00      	nop
    return;
 800552c:	e18b      	b.n	8005846 <HAL_UART_IRQHandler+0x5ae>
 800552e:	bf00      	nop
 8005530:	04000120 	.word	0x04000120
 8005534:	08006231 	.word	0x08006231

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 8146 	bne.w	80057ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 813f 	beq.w	80057ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8138 	beq.w	80057ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2210      	movs	r2, #16
 8005564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	f040 80b4 	bne.w	80056de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005582:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 815f 	beq.w	800584a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005596:	429a      	cmp	r2, r3
 8005598:	f080 8157 	bcs.w	800584a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8085 	bne.w	80056c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1da      	bne.n	80055b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800562a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800562e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e1      	bne.n	8005602 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005692:	f023 0310 	bic.w	r3, r3, #16
 8005696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e4      	bne.n	8005682 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fc fe02 	bl	80022c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8d4 	bl	8005884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056dc:	e0b5      	b.n	800584a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a7 	beq.w	800584e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80a2 	beq.w	800584e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800571e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800572c:	647b      	str	r3, [r7, #68]	; 0x44
 800572e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e4      	bne.n	800570a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	623b      	str	r3, [r7, #32]
   return(result);
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005764:	633a      	str	r2, [r7, #48]	; 0x30
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800576a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e3      	bne.n	8005740 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	60fb      	str	r3, [r7, #12]
   return(result);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0310 	bic.w	r3, r3, #16
 800579e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e4      	bne.n	800578a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f85c 	bl	8005884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057cc:	e03f      	b.n	800584e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00e      	beq.n	80057f8 <HAL_UART_IRQHandler+0x560>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fd5d 	bl	80062b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057f6:	e02d      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00e      	beq.n	8005822 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01c      	beq.n	8005852 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
    }
    return;
 8005820:	e017      	b.n	8005852 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d012      	beq.n	8005854 <HAL_UART_IRQHandler+0x5bc>
 800582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fd0e 	bl	800625c <UART_EndTransmit_IT>
    return;
 8005840:	e008      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005842:	bf00      	nop
 8005844:	e006      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005846:	bf00      	nop
 8005848:	e004      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800584a:	bf00      	nop
 800584c:	e002      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005852:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005854:	37e8      	adds	r7, #232	; 0xe8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop

0800585c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a0:	b08a      	sub	sp, #40	; 0x28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4ba4      	ldr	r3, [pc, #656]	; (8005b5c <UART_SetConfig+0x2c0>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a99      	ldr	r2, [pc, #612]	; (8005b60 <UART_SetConfig+0x2c4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005904:	4313      	orrs	r3, r2
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a90      	ldr	r2, [pc, #576]	; (8005b64 <UART_SetConfig+0x2c8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d126      	bne.n	8005974 <UART_SetConfig+0xd8>
 8005926:	4b90      	ldr	r3, [pc, #576]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b03      	cmp	r3, #3
 8005932:	d81b      	bhi.n	800596c <UART_SetConfig+0xd0>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0xa0>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800594d 	.word	0x0800594d
 8005940:	0800595d 	.word	0x0800595d
 8005944:	08005955 	.word	0x08005955
 8005948:	08005965 	.word	0x08005965
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005952:	e116      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005954:	2302      	movs	r3, #2
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	e112      	b.n	8005b82 <UART_SetConfig+0x2e6>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e10e      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e10a      	b.n	8005b82 <UART_SetConfig+0x2e6>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e106      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7c      	ldr	r2, [pc, #496]	; (8005b6c <UART_SetConfig+0x2d0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d138      	bne.n	80059f0 <UART_SetConfig+0x154>
 800597e:	4b7a      	ldr	r3, [pc, #488]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d82d      	bhi.n	80059e8 <UART_SetConfig+0x14c>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <UART_SetConfig+0xf8>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059c9 	.word	0x080059c9
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059e9 	.word	0x080059e9
 80059a0:	080059e9 	.word	0x080059e9
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	080059e9 	.word	0x080059e9
 80059ac:	080059e9 	.word	0x080059e9
 80059b0:	080059e9 	.word	0x080059e9
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059e1 	.word	0x080059e1
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e0d8      	b.n	8005b82 <UART_SetConfig+0x2e6>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e0d4      	b.n	8005b82 <UART_SetConfig+0x2e6>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e0d0      	b.n	8005b82 <UART_SetConfig+0x2e6>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e6:	e0cc      	b.n	8005b82 <UART_SetConfig+0x2e6>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ee:	e0c8      	b.n	8005b82 <UART_SetConfig+0x2e6>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5e      	ldr	r2, [pc, #376]	; (8005b70 <UART_SetConfig+0x2d4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d125      	bne.n	8005a46 <UART_SetConfig+0x1aa>
 80059fa:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <UART_SetConfig+0x2cc>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a04:	2b30      	cmp	r3, #48	; 0x30
 8005a06:	d016      	beq.n	8005a36 <UART_SetConfig+0x19a>
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d818      	bhi.n	8005a3e <UART_SetConfig+0x1a2>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d00a      	beq.n	8005a26 <UART_SetConfig+0x18a>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d814      	bhi.n	8005a3e <UART_SetConfig+0x1a2>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <UART_SetConfig+0x182>
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d008      	beq.n	8005a2e <UART_SetConfig+0x192>
 8005a1c:	e00f      	b.n	8005a3e <UART_SetConfig+0x1a2>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a24:	e0ad      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a26:	2302      	movs	r3, #2
 8005a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2c:	e0a9      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a2e:	2304      	movs	r3, #4
 8005a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a34:	e0a5      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a36:	2308      	movs	r3, #8
 8005a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3c:	e0a1      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a3e:	2310      	movs	r3, #16
 8005a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a44:	e09d      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a4a      	ldr	r2, [pc, #296]	; (8005b74 <UART_SetConfig+0x2d8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d125      	bne.n	8005a9c <UART_SetConfig+0x200>
 8005a50:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a5c:	d016      	beq.n	8005a8c <UART_SetConfig+0x1f0>
 8005a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a60:	d818      	bhi.n	8005a94 <UART_SetConfig+0x1f8>
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d00a      	beq.n	8005a7c <UART_SetConfig+0x1e0>
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d814      	bhi.n	8005a94 <UART_SetConfig+0x1f8>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <UART_SetConfig+0x1d8>
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d008      	beq.n	8005a84 <UART_SetConfig+0x1e8>
 8005a72:	e00f      	b.n	8005a94 <UART_SetConfig+0x1f8>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e082      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e07e      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e07a      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e076      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e072      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a35      	ldr	r2, [pc, #212]	; (8005b78 <UART_SetConfig+0x2dc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d12a      	bne.n	8005afc <UART_SetConfig+0x260>
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab4:	d01a      	beq.n	8005aec <UART_SetConfig+0x250>
 8005ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aba:	d81b      	bhi.n	8005af4 <UART_SetConfig+0x258>
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d00c      	beq.n	8005adc <UART_SetConfig+0x240>
 8005ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac6:	d815      	bhi.n	8005af4 <UART_SetConfig+0x258>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <UART_SetConfig+0x238>
 8005acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad0:	d008      	beq.n	8005ae4 <UART_SetConfig+0x248>
 8005ad2:	e00f      	b.n	8005af4 <UART_SetConfig+0x258>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e052      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005adc:	2302      	movs	r3, #2
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e04e      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aea:	e04a      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af2:	e046      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afa:	e042      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <UART_SetConfig+0x2c4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d13a      	bne.n	8005b7c <UART_SetConfig+0x2e0>
 8005b06:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b14:	d01a      	beq.n	8005b4c <UART_SetConfig+0x2b0>
 8005b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b1a:	d81b      	bhi.n	8005b54 <UART_SetConfig+0x2b8>
 8005b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b20:	d00c      	beq.n	8005b3c <UART_SetConfig+0x2a0>
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d815      	bhi.n	8005b54 <UART_SetConfig+0x2b8>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <UART_SetConfig+0x298>
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b30:	d008      	beq.n	8005b44 <UART_SetConfig+0x2a8>
 8005b32:	e00f      	b.n	8005b54 <UART_SetConfig+0x2b8>
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e022      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e01e      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4a:	e01a      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b52:	e016      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5a:	e012      	b.n	8005b82 <UART_SetConfig+0x2e6>
 8005b5c:	efff69f3 	.word	0xefff69f3
 8005b60:	40008000 	.word	0x40008000
 8005b64:	40013800 	.word	0x40013800
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40004400 	.word	0x40004400
 8005b70:	40004800 	.word	0x40004800
 8005b74:	40004c00 	.word	0x40004c00
 8005b78:	40005000 	.word	0x40005000
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a9f      	ldr	r2, [pc, #636]	; (8005e04 <UART_SetConfig+0x568>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d17a      	bne.n	8005c82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d824      	bhi.n	8005bde <UART_SetConfig+0x342>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x300>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bdf 	.word	0x08005bdf
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bdf 	.word	0x08005bdf
 8005bac:	08005bcf 	.word	0x08005bcf
 8005bb0:	08005bdf 	.word	0x08005bdf
 8005bb4:	08005bdf 	.word	0x08005bdf
 8005bb8:	08005bdf 	.word	0x08005bdf
 8005bbc:	08005bd7 	.word	0x08005bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fd fb9a 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	61f8      	str	r0, [r7, #28]
        break;
 8005bc6:	e010      	b.n	8005bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc8:	4b8f      	ldr	r3, [pc, #572]	; (8005e08 <UART_SetConfig+0x56c>)
 8005bca:	61fb      	str	r3, [r7, #28]
        break;
 8005bcc:	e00d      	b.n	8005bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bce:	f7fd fafb 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8005bd2:	61f8      	str	r0, [r7, #28]
        break;
 8005bd4:	e009      	b.n	8005bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bda:	61fb      	str	r3, [r7, #28]
        break;
 8005bdc:	e005      	b.n	8005bea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80fb 	beq.w	8005de8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d305      	bcc.n	8005c0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d903      	bls.n	8005c16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c14:	e0e8      	b.n	8005de8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	022b      	lsls	r3, r5, #8
 8005c28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c2c:	0222      	lsls	r2, r4, #8
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	0849      	lsrs	r1, r1, #1
 8005c34:	2000      	movs	r0, #0
 8005c36:	4688      	mov	r8, r1
 8005c38:	4681      	mov	r9, r0
 8005c3a:	eb12 0a08 	adds.w	sl, r2, r8
 8005c3e:	eb43 0b09 	adc.w	fp, r3, r9
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c50:	4650      	mov	r0, sl
 8005c52:	4659      	mov	r1, fp
 8005c54:	f7fa ffa8 	bl	8000ba8 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c66:	d308      	bcc.n	8005c7a <UART_SetConfig+0x3de>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6e:	d204      	bcs.n	8005c7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	e0b6      	b.n	8005de8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c80:	e0b2      	b.n	8005de8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8a:	d15e      	bne.n	8005d4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d828      	bhi.n	8005ce6 <UART_SetConfig+0x44a>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x400>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fd fb1a 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fd fb2c 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <UART_SetConfig+0x56c>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fd fa77 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d077      	beq.n	8005de8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005a      	lsls	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d916      	bls.n	8005d42 <UART_SetConfig+0x4a6>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1a:	d212      	bcs.n	8005d42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f023 030f 	bic.w	r3, r3, #15
 8005d24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	8afb      	ldrh	r3, [r7, #22]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	8afa      	ldrh	r2, [r7, #22]
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e052      	b.n	8005de8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d48:	e04e      	b.n	8005de8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d827      	bhi.n	8005da2 <UART_SetConfig+0x506>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x4bc>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005da3 	.word	0x08005da3
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fd fabc 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005d80:	61f8      	str	r0, [r7, #28]
        break;
 8005d82:	e014      	b.n	8005dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fd face 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005d88:	61f8      	str	r0, [r7, #28]
        break;
 8005d8a:	e010      	b.n	8005dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <UART_SetConfig+0x56c>)
 8005d8e:	61fb      	str	r3, [r7, #28]
        break;
 8005d90:	e00d      	b.n	8005dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fd fa19 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8005d96:	61f8      	str	r0, [r7, #28]
        break;
 8005d98:	e009      	b.n	8005dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	61fb      	str	r3, [r7, #28]
        break;
 8005da0:	e005      	b.n	8005dae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dac:	bf00      	nop
    }

    if (pclk != 0U)
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d019      	beq.n	8005de8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	085a      	lsrs	r2, r3, #1
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d909      	bls.n	8005de2 <UART_SetConfig+0x546>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d205      	bcs.n	8005de2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	e002      	b.n	8005de8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005df4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e02:	bf00      	nop
 8005e04:	40008000 	.word	0x40008000
 8005e08:	00f42400 	.word	0x00f42400

08005e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0a:	d10a      	bne.n	8005f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f60:	f7fc f870 	bl	8002044 <HAL_GetTick>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10e      	bne.n	8005f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f82d 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e023      	b.n	8005fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d10e      	bne.n	8005fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f817 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e00d      	b.n	8005fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b09c      	sub	sp, #112	; 0x70
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff2:	e0a5      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	f000 80a1 	beq.w	8006140 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fc f821 	bl	8002044 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <UART_WaitOnFlagUntilTimeout+0x32>
 800600e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006010:	2b00      	cmp	r3, #0
 8006012:	d13e      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006028:	667b      	str	r3, [r7, #100]	; 0x64
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006034:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	663b      	str	r3, [r7, #96]	; 0x60
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006066:	64ba      	str	r2, [r7, #72]	; 0x48
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800606c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e067      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d04f      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d147      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
 80060da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	613b      	str	r3, [r7, #16]
   return(result);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	66bb      	str	r3, [r7, #104]	; 0x68
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800610c:	623a      	str	r2, [r7, #32]
 800610e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	61bb      	str	r3, [r7, #24]
   return(result);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e010      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	429a      	cmp	r2, r3
 800615c:	f43f af4a 	beq.w	8005ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3770      	adds	r7, #112	; 0x70
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b095      	sub	sp, #84	; 0x54
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006190:	643b      	str	r3, [r7, #64]	; 0x40
 8006192:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d118      	bne.n	8006212 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 0310 	bic.w	r3, r3, #16
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	613b      	str	r3, [r7, #16]
   return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e6      	bne.n	80061e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006224:	bf00      	nop
 8006226:	3754      	adds	r7, #84	; 0x54
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff fb0e 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	60bb      	str	r3, [r7, #8]
   return(result);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6979      	ldr	r1, [r7, #20]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	613b      	str	r3, [r7, #16]
   return(result);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff fada 	bl	800585c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a8:	bf00      	nop
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	2b84      	cmp	r3, #132	; 0x84
 80062d8:	d005      	beq.n	80062e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	3303      	adds	r3, #3
 80062e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062f8:	f000 fade 	bl	80068b8 <vTaskStartScheduler>
  
  return osOK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	bd80      	pop	{r7, pc}

08006302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006304:	b089      	sub	sp, #36	; 0x24
 8006306:	af04      	add	r7, sp, #16
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <osThreadCreate+0x54>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01c      	beq.n	8006356 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685c      	ldr	r4, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681d      	ldr	r5, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691e      	ldr	r6, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ffc8 	bl	80062c4 <makeFreeRtosPriority>
 8006334:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800633e:	9202      	str	r2, [sp, #8]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	9100      	str	r1, [sp, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4632      	mov	r2, r6
 8006348:	4629      	mov	r1, r5
 800634a:	4620      	mov	r0, r4
 800634c:	f000 f8ed 	bl	800652a <xTaskCreateStatic>
 8006350:	4603      	mov	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e01c      	b.n	8006390 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685c      	ldr	r4, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006362:	b29e      	uxth	r6, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff ffaa 	bl	80062c4 <makeFreeRtosPriority>
 8006370:	4602      	mov	r2, r0
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	9200      	str	r2, [sp, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4632      	mov	r2, r6
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f92f 	bl	80065e4 <xTaskCreate>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d001      	beq.n	8006390 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800639a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <osDelay+0x16>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e000      	b.n	80063b2 <osDelay+0x18>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa4c 	bl	8006850 <vTaskDelay>
  
  return osOK;
 80063b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f103 0208 	add.w	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f103 0208 	add.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f103 0208 	add.w	r2, r3, #8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e00c      	b.n	800649e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3308      	adds	r3, #8
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e002      	b.n	8006492 <vListInsert+0x2e>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	d2f6      	bcs.n	800648c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6892      	ldr	r2, [r2, #8]
 80064ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6852      	ldr	r2, [r2, #4]
 80064f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d103      	bne.n	800650a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08e      	sub	sp, #56	; 0x38
 800652e:	af04      	add	r7, sp, #16
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xTaskCreateStatic+0x46>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	61fb      	str	r3, [r7, #28]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006570:	2354      	movs	r3, #84	; 0x54
 8006572:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b54      	cmp	r3, #84	; 0x54
 8006578:	d00a      	beq.n	8006590 <xTaskCreateStatic+0x66>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	61bb      	str	r3, [r7, #24]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006590:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01e      	beq.n	80065d6 <xTaskCreateStatic+0xac>
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01b      	beq.n	80065d6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065b0:	2300      	movs	r3, #0
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	9302      	str	r3, [sp, #8]
 80065b8:	f107 0314 	add.w	r3, r7, #20
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f850 	bl	800666e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d0:	f000 f8d4 	bl	800677c <prvAddNewTaskToReadyList>
 80065d4:	e001      	b.n	80065da <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065da:	697b      	ldr	r3, [r7, #20]
	}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	; 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fee5 	bl	80073c8 <pvPortMalloc>
 80065fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006606:	2054      	movs	r0, #84	; 0x54
 8006608:	f000 fede 	bl	80073c8 <pvPortMalloc>
 800660c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	631a      	str	r2, [r3, #48]	; 0x30
 800661a:	e005      	b.n	8006628 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800661c:	6978      	ldr	r0, [r7, #20]
 800661e:	f000 ff9f 	bl	8007560 <vPortFree>
 8006622:	e001      	b.n	8006628 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d017      	beq.n	800665e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	2300      	movs	r3, #0
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f80e 	bl	800666e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006652:	69f8      	ldr	r0, [r7, #28]
 8006654:	f000 f892 	bl	800677c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006658:	2301      	movs	r3, #1
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e002      	b.n	8006664 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006664:	69bb      	ldr	r3, [r7, #24]
	}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b088      	sub	sp, #32
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006686:	3b01      	subs	r3, #1
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	617b      	str	r3, [r7, #20]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01f      	beq.n	80066fc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e012      	b.n	80066e8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	7819      	ldrb	r1, [r3, #0]
 80066ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	3334      	adds	r3, #52	; 0x34
 80066d2:	460a      	mov	r2, r1
 80066d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	4413      	add	r3, r2
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d006      	beq.n	80066f0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d9e9      	bls.n	80066c2 <prvInitialiseNewTask+0x54>
 80066ee:	e000      	b.n	80066f2 <prvInitialiseNewTask+0x84>
			{
				break;
 80066f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fa:	e003      	b.n	8006704 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	2b06      	cmp	r3, #6
 8006708:	d901      	bls.n	800670e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800670a:	2306      	movs	r3, #6
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2200      	movs	r2, #0
 800671e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	3304      	adds	r3, #4
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fe6c 	bl	8006402 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	3318      	adds	r3, #24
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fe67 	bl	8006402 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	f1c3 0207 	rsb	r2, r3, #7
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006748:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2200      	movs	r2, #0
 800674e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	69b8      	ldr	r0, [r7, #24]
 800675e:	f000 fc23 	bl	8006fa8 <pxPortInitialiseStack>
 8006762:	4602      	mov	r2, r0
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006774:	bf00      	nop
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006784:	f000 fd3e 	bl	8007204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006788:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	4a29      	ldr	r2, [pc, #164]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 8006790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800679a:	4a27      	ldr	r2, [pc, #156]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d110      	bne.n	80067ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067a8:	f000 fabc 	bl	8006d24 <prvInitialiseTaskLists>
 80067ac:	e00d      	b.n	80067ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ae:	4b23      	ldr	r3, [pc, #140]	; (800683c <prvAddNewTaskToReadyList+0xc0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d802      	bhi.n	80067ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <prvAddNewTaskToReadyList+0xc4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	4a1b      	ldr	r2, [pc, #108]	; (8006840 <prvAddNewTaskToReadyList+0xc4>)
 80067d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	2201      	movs	r2, #1
 80067da:	409a      	lsls	r2, r3
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <prvAddNewTaskToReadyList+0xc8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <prvAddNewTaskToReadyList+0xc8>)
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <prvAddNewTaskToReadyList+0xcc>)
 80067f4:	441a      	add	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7ff fe0d 	bl	800641c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006802:	f000 fd2f 	bl	8007264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <prvAddNewTaskToReadyList+0xc0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	429a      	cmp	r2, r3
 800681a:	d207      	bcs.n	800682c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvAddNewTaskToReadyList+0xd0>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	2000070c 	.word	0x2000070c
 8006838:	2000060c 	.word	0x2000060c
 800683c:	20000718 	.word	0x20000718
 8006840:	20000728 	.word	0x20000728
 8006844:	20000714 	.word	0x20000714
 8006848:	20000610 	.word	0x20000610
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <vTaskDelay+0x60>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <vTaskDelay+0x30>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	60bb      	str	r3, [r7, #8]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006880:	f000 f87a 	bl	8006978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb28 	bl	8006edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800688c:	f000 f882 	bl	8006994 <xTaskResumeAll>
 8006890:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <vTaskDelay+0x64>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000734 	.word	0x20000734
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068c6:	463a      	mov	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fa faec 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	9202      	str	r2, [sp, #8]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	460a      	mov	r2, r1
 80068e6:	491e      	ldr	r1, [pc, #120]	; (8006960 <vTaskStartScheduler+0xa8>)
 80068e8:	481e      	ldr	r0, [pc, #120]	; (8006964 <vTaskStartScheduler+0xac>)
 80068ea:	f7ff fe1e 	bl	800652a <xTaskCreateStatic>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <vTaskStartScheduler+0xb0>)
 80068f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f4:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <vTaskStartScheduler+0xb0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e001      	b.n	8006906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d116      	bne.n	800693a <vTaskStartScheduler+0x82>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	613b      	str	r3, [r7, #16]
}
 800691e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <vTaskStartScheduler+0xb4>)
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <vTaskStartScheduler+0xb8>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <vTaskStartScheduler+0xbc>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006934:	f000 fbc4 	bl	80070c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006938:	e00e      	b.n	8006958 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d10a      	bne.n	8006958 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60fb      	str	r3, [r7, #12]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vTaskStartScheduler+0x9e>
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	0800a28c 	.word	0x0800a28c
 8006964:	08006cf5 	.word	0x08006cf5
 8006968:	20000730 	.word	0x20000730
 800696c:	2000072c 	.word	0x2000072c
 8006970:	20000718 	.word	0x20000718
 8006974:	20000710 	.word	0x20000710

08006978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <vTaskSuspendAll+0x18>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a03      	ldr	r2, [pc, #12]	; (8006990 <vTaskSuspendAll+0x18>)
 8006984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000734 	.word	0x20000734

08006994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069a2:	4b41      	ldr	r3, [pc, #260]	; (8006aa8 <xTaskResumeAll+0x114>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	603b      	str	r3, [r7, #0]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069c0:	f000 fc20 	bl	8007204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069c4:	4b38      	ldr	r3, [pc, #224]	; (8006aa8 <xTaskResumeAll+0x114>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4a37      	ldr	r2, [pc, #220]	; (8006aa8 <xTaskResumeAll+0x114>)
 80069cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ce:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <xTaskResumeAll+0x114>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d161      	bne.n	8006a9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069d6:	4b35      	ldr	r3, [pc, #212]	; (8006aac <xTaskResumeAll+0x118>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d05d      	beq.n	8006a9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069de:	e02e      	b.n	8006a3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b33      	ldr	r3, [pc, #204]	; (8006ab0 <xTaskResumeAll+0x11c>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3318      	adds	r3, #24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fd72 	bl	80064d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fd6d 	bl	80064d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	2201      	movs	r2, #1
 8006a02:	409a      	lsls	r2, r3
 8006a04:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <xTaskResumeAll+0x120>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <xTaskResumeAll+0x120>)
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4a27      	ldr	r2, [pc, #156]	; (8006ab8 <xTaskResumeAll+0x124>)
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7ff fcf9 	bl	800641c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	4b23      	ldr	r3, [pc, #140]	; (8006abc <xTaskResumeAll+0x128>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d302      	bcc.n	8006a3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a38:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <xTaskResumeAll+0x12c>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <xTaskResumeAll+0x11c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1cc      	bne.n	80069e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a4c:	f000 fa08 	bl	8006e60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a50:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a5c:	f000 f836 	bl	8006acc <xTaskIncrementTick>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a66:	4b16      	ldr	r3, [pc, #88]	; (8006ac0 <xTaskResumeAll+0x12c>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f1      	bne.n	8006a5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <xTaskResumeAll+0x12c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <xTaskResumeAll+0x134>)
 8006a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a9a:	f000 fbe3 	bl	8007264 <vPortExitCritical>

	return xAlreadyYielded;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000734 	.word	0x20000734
 8006aac:	2000070c 	.word	0x2000070c
 8006ab0:	200006cc 	.word	0x200006cc
 8006ab4:	20000714 	.word	0x20000714
 8006ab8:	20000610 	.word	0x20000610
 8006abc:	2000060c 	.word	0x2000060c
 8006ac0:	20000720 	.word	0x20000720
 8006ac4:	2000071c 	.word	0x2000071c
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad6:	4b4e      	ldr	r3, [pc, #312]	; (8006c10 <xTaskIncrementTick+0x144>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 808e 	bne.w	8006bfc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae0:	4b4c      	ldr	r3, [pc, #304]	; (8006c14 <xTaskIncrementTick+0x148>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ae8:	4a4a      	ldr	r2, [pc, #296]	; (8006c14 <xTaskIncrementTick+0x148>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d120      	bne.n	8006b36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af4:	4b48      	ldr	r3, [pc, #288]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <xTaskIncrementTick+0x48>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	603b      	str	r3, [r7, #0]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <xTaskIncrementTick+0x46>
 8006b14:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	4b40      	ldr	r3, [pc, #256]	; (8006c1c <xTaskIncrementTick+0x150>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3e      	ldr	r2, [pc, #248]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4a3e      	ldr	r2, [pc, #248]	; (8006c1c <xTaskIncrementTick+0x150>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <xTaskIncrementTick+0x154>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4a3c      	ldr	r2, [pc, #240]	; (8006c20 <xTaskIncrementTick+0x154>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	f000 f995 	bl	8006e60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b36:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d348      	bcc.n	8006bd2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b40:	4b35      	ldr	r3, [pc, #212]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	4b36      	ldr	r3, [pc, #216]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	601a      	str	r2, [r3, #0]
					break;
 8006b52:	e03e      	b.n	8006bd2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b54:	4b30      	ldr	r3, [pc, #192]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d203      	bcs.n	8006b74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b72:	e02e      	b.n	8006bd2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fcac 	bl	80064d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	3318      	adds	r3, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fca3 	bl	80064d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <xTaskIncrementTick+0x15c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <xTaskIncrementTick+0x15c>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <xTaskIncrementTick+0x160>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7ff fc2f 	bl	800641c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <xTaskIncrementTick+0x164>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b9      	bcc.n	8006b40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd0:	e7b6      	b.n	8006b40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <xTaskIncrementTick+0x164>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd8:	4914      	ldr	r1, [pc, #80]	; (8006c2c <xTaskIncrementTick+0x160>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d901      	bls.n	8006bee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <xTaskIncrementTick+0x168>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	e004      	b.n	8006c06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <xTaskIncrementTick+0x16c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <xTaskIncrementTick+0x16c>)
 8006c04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000734 	.word	0x20000734
 8006c14:	20000710 	.word	0x20000710
 8006c18:	200006c4 	.word	0x200006c4
 8006c1c:	200006c8 	.word	0x200006c8
 8006c20:	20000724 	.word	0x20000724
 8006c24:	2000072c 	.word	0x2000072c
 8006c28:	20000714 	.word	0x20000714
 8006c2c:	20000610 	.word	0x20000610
 8006c30:	2000060c 	.word	0x2000060c
 8006c34:	20000720 	.word	0x20000720
 8006c38:	2000071c 	.word	0x2000071c

08006c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <vTaskSwitchContext+0xa4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c50:	e03f      	b.n	8006cd2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <vTaskSwitchContext+0xac>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	fab3 f383 	clz	r3, r3
 8006c64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	f1c3 031f 	rsb	r3, r3, #31
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	491f      	ldr	r1, [pc, #124]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	607b      	str	r3, [r7, #4]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <vTaskSwitchContext+0x5a>
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a12      	ldr	r2, [pc, #72]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d104      	bne.n	8006cc8 <vTaskSwitchContext+0x8c>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <vTaskSwitchContext+0xb4>)
 8006cd0:	6013      	str	r3, [r2, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000734 	.word	0x20000734
 8006ce4:	20000720 	.word	0x20000720
 8006ce8:	20000714 	.word	0x20000714
 8006cec:	20000610 	.word	0x20000610
 8006cf0:	2000060c 	.word	0x2000060c

08006cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cfc:	f000 f852 	bl	8006da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <prvIdleTask+0x28>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d9f9      	bls.n	8006cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <prvIdleTask+0x2c>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d18:	e7f0      	b.n	8006cfc <prvIdleTask+0x8>
 8006d1a:	bf00      	nop
 8006d1c:	20000610 	.word	0x20000610
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	e00c      	b.n	8006d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4a12      	ldr	r2, [pc, #72]	; (8006d84 <prvInitialiseTaskLists+0x60>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fb3f 	bl	80063c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3301      	adds	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b06      	cmp	r3, #6
 8006d4e:	d9ef      	bls.n	8006d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d50:	480d      	ldr	r0, [pc, #52]	; (8006d88 <prvInitialiseTaskLists+0x64>)
 8006d52:	f7ff fb36 	bl	80063c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d56:	480d      	ldr	r0, [pc, #52]	; (8006d8c <prvInitialiseTaskLists+0x68>)
 8006d58:	f7ff fb33 	bl	80063c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d5c:	480c      	ldr	r0, [pc, #48]	; (8006d90 <prvInitialiseTaskLists+0x6c>)
 8006d5e:	f7ff fb30 	bl	80063c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d62:	480c      	ldr	r0, [pc, #48]	; (8006d94 <prvInitialiseTaskLists+0x70>)
 8006d64:	f7ff fb2d 	bl	80063c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d68:	480b      	ldr	r0, [pc, #44]	; (8006d98 <prvInitialiseTaskLists+0x74>)
 8006d6a:	f7ff fb2a 	bl	80063c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <prvInitialiseTaskLists+0x78>)
 8006d70:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <prvInitialiseTaskLists+0x64>)
 8006d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvInitialiseTaskLists+0x7c>)
 8006d76:	4a05      	ldr	r2, [pc, #20]	; (8006d8c <prvInitialiseTaskLists+0x68>)
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000610 	.word	0x20000610
 8006d88:	2000069c 	.word	0x2000069c
 8006d8c:	200006b0 	.word	0x200006b0
 8006d90:	200006cc 	.word	0x200006cc
 8006d94:	200006e0 	.word	0x200006e0
 8006d98:	200006f8 	.word	0x200006f8
 8006d9c:	200006c4 	.word	0x200006c4
 8006da0:	200006c8 	.word	0x200006c8

08006da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006daa:	e019      	b.n	8006de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dac:	f000 fa2a 	bl	8007204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db0:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <prvCheckTasksWaitingTermination+0x50>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fb8a 	bl	80064d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <prvCheckTasksWaitingTermination+0x54>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <prvCheckTasksWaitingTermination+0x54>)
 8006dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dd6:	f000 fa45 	bl	8007264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f810 	bl	8006e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <prvCheckTasksWaitingTermination+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e1      	bne.n	8006dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200006e0 	.word	0x200006e0
 8006df8:	2000070c 	.word	0x2000070c
 8006dfc:	200006f4 	.word	0x200006f4

08006e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d108      	bne.n	8006e24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fba2 	bl	8007560 <vPortFree>
				vPortFree( pxTCB );
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb9f 	bl	8007560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e22:	e018      	b.n	8006e56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d103      	bne.n	8006e36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fb96 	bl	8007560 <vPortFree>
	}
 8006e34:	e00f      	b.n	8006e56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d00a      	beq.n	8006e56 <prvDeleteTCB+0x56>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <prvDeleteTCB+0x54>
	}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <prvResetNextTaskUnblockTime+0x38>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <prvResetNextTaskUnblockTime+0x3c>)
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e78:	e008      	b.n	8006e8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <prvResetNextTaskUnblockTime+0x38>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <prvResetNextTaskUnblockTime+0x3c>)
 8006e8a:	6013      	str	r3, [r2, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	200006c4 	.word	0x200006c4
 8006e9c:	2000072c 	.word	0x2000072c

08006ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <xTaskGetSchedulerState+0x34>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	e008      	b.n	8006ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <xTaskGetSchedulerState+0x38>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	e001      	b.n	8006ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ec6:	687b      	ldr	r3, [r7, #4]
	}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20000718 	.word	0x20000718
 8006ed8:	20000734 	.word	0x20000734

08006edc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eec:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff faef 	bl	80064d6 <uxListRemove>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10b      	bne.n	8006f16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	2201      	movs	r2, #1
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4013      	ands	r3, r2
 8006f12:	4a20      	ldr	r2, [pc, #128]	; (8006f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d10a      	bne.n	8006f34 <prvAddCurrentTaskToDelayedList+0x58>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	481a      	ldr	r0, [pc, #104]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f2e:	f7ff fa75 	bl	800641c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f32:	e026      	b.n	8006f82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d209      	bcs.n	8006f60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4c:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fa83 	bl	8006464 <vListInsert>
}
 8006f5e:	e010      	b.n	8006f82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7ff fa79 	bl	8006464 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f72:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d202      	bcs.n	8006f82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f7c:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000710 	.word	0x20000710
 8006f90:	2000060c 	.word	0x2000060c
 8006f94:	20000714 	.word	0x20000714
 8006f98:	200006f8 	.word	0x200006f8
 8006f9c:	200006c8 	.word	0x200006c8
 8006fa0:	200006c4 	.word	0x200006c4
 8006fa4:	2000072c 	.word	0x2000072c

08006fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3b04      	subs	r3, #4
 8006fb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <pxPortInitialiseStack+0x64>)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b14      	subs	r3, #20
 8006fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b04      	subs	r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f06f 0202 	mvn.w	r2, #2
 8006ff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b20      	subs	r3, #32
 8006ffc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	08007011 	.word	0x08007011

08007010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <prvTaskExitError+0x54>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d00a      	beq.n	800703a <prvTaskExitError+0x2a>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <prvTaskExitError+0x28>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800704e:	bf00      	nop
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0fc      	beq.n	8007050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	2000000c 	.word	0x2000000c
	...

08007070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <pxCurrentTCBConst2>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	6808      	ldr	r0, [r1, #0]
 8007076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	f380 8809 	msr	PSP, r0
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	4770      	bx	lr
 800708c:	f3af 8000 	nop.w

08007090 <pxCurrentTCBConst2>:
 8007090:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop

08007098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <prvPortStartFirstTask+0x24>)
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f380 8808 	msr	MSP, r0
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8814 	msr	CONTROL, r0
 80070aa:	b662      	cpsie	i
 80070ac:	b661      	cpsie	f
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	df00      	svc	0
 80070b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ba:	bf00      	nop
 80070bc:	e000ed08 	.word	0xe000ed08

080070c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070c6:	4b46      	ldr	r3, [pc, #280]	; (80071e0 <xPortStartScheduler+0x120>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a46      	ldr	r2, [pc, #280]	; (80071e4 <xPortStartScheduler+0x124>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10a      	bne.n	80070e6 <xPortStartScheduler+0x26>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070e6:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <xPortStartScheduler+0x120>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3f      	ldr	r2, [pc, #252]	; (80071e8 <xPortStartScheduler+0x128>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10a      	bne.n	8007106 <xPortStartScheduler+0x46>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <xPortStartScheduler+0x12c>)
 8007108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <xPortStartScheduler+0x130>)
 800712c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800712e:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xPortStartScheduler+0x134>)
 8007130:	2207      	movs	r2, #7
 8007132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007134:	e009      	b.n	800714a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007136:	4b2f      	ldr	r3, [pc, #188]	; (80071f4 <xPortStartScheduler+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3b01      	subs	r3, #1
 800713c:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <xPortStartScheduler+0x134>)
 800713e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d0ef      	beq.n	8007136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007156:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <xPortStartScheduler+0x134>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1c3 0307 	rsb	r3, r3, #7
 800715e:	2b04      	cmp	r3, #4
 8007160:	d00a      	beq.n	8007178 <xPortStartScheduler+0xb8>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60bb      	str	r3, [r7, #8]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <xPortStartScheduler+0x134>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <xPortStartScheduler+0x134>)
 8007180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007182:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <xPortStartScheduler+0x134>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718a:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <xPortStartScheduler+0x134>)
 800718c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <xPortStartScheduler+0x138>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <xPortStartScheduler+0x138>)
 800719c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <xPortStartScheduler+0x138>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <xPortStartScheduler+0x138>)
 80071a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071ae:	f000 f8dd 	bl	800736c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <xPortStartScheduler+0x13c>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071b8:	f000 f8fc 	bl	80073b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <xPortStartScheduler+0x140>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <xPortStartScheduler+0x140>)
 80071c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071c8:	f7ff ff66 	bl	8007098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071cc:	f7ff fd36 	bl	8006c3c <vTaskSwitchContext>
	prvTaskExitError();
 80071d0:	f7ff ff1e 	bl	8007010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	e000ed00 	.word	0xe000ed00
 80071e4:	410fc271 	.word	0x410fc271
 80071e8:	410fc270 	.word	0x410fc270
 80071ec:	e000e400 	.word	0xe000e400
 80071f0:	20000738 	.word	0x20000738
 80071f4:	2000073c 	.word	0x2000073c
 80071f8:	e000ed20 	.word	0xe000ed20
 80071fc:	2000000c 	.word	0x2000000c
 8007200:	e000ef34 	.word	0xe000ef34

08007204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <vPortEnterCritical+0x58>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <vPortEnterCritical+0x58>)
 8007226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <vPortEnterCritical+0x58>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d10f      	bne.n	8007250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortEnterCritical+0x5c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <vPortEnterCritical+0x4c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <vPortEnterCritical+0x4a>
	}
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	2000000c 	.word	0x2000000c
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <vPortExitCritical+0x50>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <vPortExitCritical+0x24>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	607b      	str	r3, [r7, #4]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <vPortExitCritical+0x50>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3b01      	subs	r3, #1
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <vPortExitCritical+0x50>)
 8007290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <vPortExitCritical+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <vPortExitCritical+0x42>
 800729a:	2300      	movs	r3, #0
 800729c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
	...

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f01e 0f10 	tst.w	lr, #16
 80072d0:	bf08      	it	eq
 80072d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072e4:	f380 8811 	msr	BASEPRI, r0
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f7ff fca4 	bl	8006c3c <vTaskSwitchContext>
 80072f4:	f04f 0000 	mov.w	r0, #0
 80072f8:	f380 8811 	msr	BASEPRI, r0
 80072fc:	bc09      	pop	{r0, r3}
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	6808      	ldr	r0, [r1, #0]
 8007302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007306:	f01e 0f10 	tst.w	lr, #16
 800730a:	bf08      	it	eq
 800730c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007310:	f380 8809 	msr	PSP, r0
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w

08007320 <pxCurrentTCBConst>:
 8007320:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007342:	f7ff fbc3 	bl	8006acc <xTaskIncrementTick>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <xPortSysTickHandler+0x40>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
}
 800735e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <vPortSetupTimerInterrupt+0x38>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <vPortSetupTimerInterrupt+0x3c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <vPortSetupTimerInterrupt+0x40>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <vPortSetupTimerInterrupt+0x44>)
 800738a:	3b01      	subs	r3, #1
 800738c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738e:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	e000e010 	.word	0xe000e010
 80073a4:	e000e018 	.word	0xe000e018
 80073a8:	20000000 	.word	0x20000000
 80073ac:	10624dd3 	.word	0x10624dd3
 80073b0:	e000e014 	.word	0xe000e014

080073b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073c4 <vPortEnableVFP+0x10>
 80073b8:	6801      	ldr	r1, [r0, #0]
 80073ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073be:	6001      	str	r1, [r0, #0]
 80073c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073c2:	bf00      	nop
 80073c4:	e000ed88 	.word	0xe000ed88

080073c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073d4:	f7ff fad0 	bl	8006978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073d8:	4b5b      	ldr	r3, [pc, #364]	; (8007548 <pvPortMalloc+0x180>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073e0:	f000 f920 	bl	8007624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073e4:	4b59      	ldr	r3, [pc, #356]	; (800754c <pvPortMalloc+0x184>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8093 	bne.w	8007518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01d      	beq.n	8007434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073f8:	2208      	movs	r2, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f023 0307 	bic.w	r3, r3, #7
 8007410:	3308      	adds	r3, #8
 8007412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <pvPortMalloc+0x6c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	617b      	str	r3, [r7, #20]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d06e      	beq.n	8007518 <pvPortMalloc+0x150>
 800743a:	4b45      	ldr	r3, [pc, #276]	; (8007550 <pvPortMalloc+0x188>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d869      	bhi.n	8007518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007444:	4b43      	ldr	r3, [pc, #268]	; (8007554 <pvPortMalloc+0x18c>)
 8007446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <pvPortMalloc+0x18c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744e:	e004      	b.n	800745a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <pvPortMalloc+0xa4>
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f1      	bne.n	8007450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800746c:	4b36      	ldr	r3, [pc, #216]	; (8007548 <pvPortMalloc+0x180>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	429a      	cmp	r2, r3
 8007474:	d050      	beq.n	8007518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2208      	movs	r2, #8
 800747c:	4413      	add	r3, r2
 800747e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	2308      	movs	r3, #8
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d91f      	bls.n	80074d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <pvPortMalloc+0xf8>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	613b      	str	r3, [r7, #16]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074d2:	69b8      	ldr	r0, [r7, #24]
 80074d4:	f000 f908 	bl	80076e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <pvPortMalloc+0x188>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <pvPortMalloc+0x188>)
 80074e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074e6:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <pvPortMalloc+0x188>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <pvPortMalloc+0x190>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d203      	bcs.n	80074fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074f2:	4b17      	ldr	r3, [pc, #92]	; (8007550 <pvPortMalloc+0x188>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <pvPortMalloc+0x190>)
 80074f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <pvPortMalloc+0x184>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	431a      	orrs	r2, r3
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <pvPortMalloc+0x194>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a11      	ldr	r2, [pc, #68]	; (800755c <pvPortMalloc+0x194>)
 8007516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007518:	f7ff fa3c 	bl	8006994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <pvPortMalloc+0x174>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <pvPortMalloc+0x172>
	return pvReturn;
 800753c:	69fb      	ldr	r3, [r7, #28]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20001300 	.word	0x20001300
 800754c:	20001314 	.word	0x20001314
 8007550:	20001304 	.word	0x20001304
 8007554:	200012f8 	.word	0x200012f8
 8007558:	20001308 	.word	0x20001308
 800755c:	2000130c 	.word	0x2000130c

08007560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04d      	beq.n	800760e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007572:	2308      	movs	r3, #8
 8007574:	425b      	negs	r3, r3
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	4b24      	ldr	r3, [pc, #144]	; (8007618 <vPortFree+0xb8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <vPortFree+0x44>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <vPortFree+0x62>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60bb      	str	r3, [r7, #8]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <vPortFree+0xb8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01e      	beq.n	800760e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11a      	bne.n	800760e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vPortFree+0xb8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075e8:	f7ff f9c6 	bl	8006978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <vPortFree+0xbc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4413      	add	r3, r2
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <vPortFree+0xbc>)
 80075f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f000 f874 	bl	80076e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <vPortFree+0xc0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	4a06      	ldr	r2, [pc, #24]	; (8007620 <vPortFree+0xc0>)
 8007608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800760a:	f7ff f9c3 	bl	8006994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800760e:	bf00      	nop
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20001314 	.word	0x20001314
 800761c:	20001304 	.word	0x20001304
 8007620:	20001310 	.word	0x20001310

08007624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800762a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800762e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <prvHeapInit+0xac>)
 8007632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3307      	adds	r3, #7
 8007642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0307 	bic.w	r3, r3, #7
 800764a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <prvHeapInit+0xac>)
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <prvHeapInit+0xb0>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <prvHeapInit+0xb0>)
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007670:	2208      	movs	r2, #8
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <prvHeapInit+0xb4>)
 8007684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <prvHeapInit+0xb4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <prvHeapInit+0xb4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <prvHeapInit+0xb4>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <prvHeapInit+0xb8>)
 80076b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <prvHeapInit+0xbc>)
 80076ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvHeapInit+0xc0>)
 80076be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20000740 	.word	0x20000740
 80076d4:	200012f8 	.word	0x200012f8
 80076d8:	20001300 	.word	0x20001300
 80076dc:	20001308 	.word	0x20001308
 80076e0:	20001304 	.word	0x20001304
 80076e4:	20001314 	.word	0x20001314

080076e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076f0:	4b28      	ldr	r3, [pc, #160]	; (8007794 <prvInsertBlockIntoFreeList+0xac>)
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e002      	b.n	80076fc <prvInsertBlockIntoFreeList+0x14>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d8f7      	bhi.n	80076f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d108      	bne.n	800772a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d118      	bne.n	8007770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d00d      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	441a      	add	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e008      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e003      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d002      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	200012f8 	.word	0x200012f8
 8007798:	20001300 	.word	0x20001300

0800779c <__errno>:
 800779c:	4b01      	ldr	r3, [pc, #4]	; (80077a4 <__errno+0x8>)
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000010 	.word	0x20000010

080077a8 <__libc_init_array>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4d0d      	ldr	r5, [pc, #52]	; (80077e0 <__libc_init_array+0x38>)
 80077ac:	4c0d      	ldr	r4, [pc, #52]	; (80077e4 <__libc_init_array+0x3c>)
 80077ae:	1b64      	subs	r4, r4, r5
 80077b0:	10a4      	asrs	r4, r4, #2
 80077b2:	2600      	movs	r6, #0
 80077b4:	42a6      	cmp	r6, r4
 80077b6:	d109      	bne.n	80077cc <__libc_init_array+0x24>
 80077b8:	4d0b      	ldr	r5, [pc, #44]	; (80077e8 <__libc_init_array+0x40>)
 80077ba:	4c0c      	ldr	r4, [pc, #48]	; (80077ec <__libc_init_array+0x44>)
 80077bc:	f002 fd36 	bl	800a22c <_init>
 80077c0:	1b64      	subs	r4, r4, r5
 80077c2:	10a4      	asrs	r4, r4, #2
 80077c4:	2600      	movs	r6, #0
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	d105      	bne.n	80077d6 <__libc_init_array+0x2e>
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d0:	4798      	blx	r3
 80077d2:	3601      	adds	r6, #1
 80077d4:	e7ee      	b.n	80077b4 <__libc_init_array+0xc>
 80077d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077da:	4798      	blx	r3
 80077dc:	3601      	adds	r6, #1
 80077de:	e7f2      	b.n	80077c6 <__libc_init_array+0x1e>
 80077e0:	0800a6bc 	.word	0x0800a6bc
 80077e4:	0800a6bc 	.word	0x0800a6bc
 80077e8:	0800a6bc 	.word	0x0800a6bc
 80077ec:	0800a6c0 	.word	0x0800a6c0

080077f0 <memcpy>:
 80077f0:	440a      	add	r2, r1
 80077f2:	4291      	cmp	r1, r2
 80077f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f8:	d100      	bne.n	80077fc <memcpy+0xc>
 80077fa:	4770      	bx	lr
 80077fc:	b510      	push	{r4, lr}
 80077fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007806:	4291      	cmp	r1, r2
 8007808:	d1f9      	bne.n	80077fe <memcpy+0xe>
 800780a:	bd10      	pop	{r4, pc}

0800780c <memset>:
 800780c:	4402      	add	r2, r0
 800780e:	4603      	mov	r3, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <__cvt>:
 800781c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	ec55 4b10 	vmov	r4, r5, d0
 8007824:	2d00      	cmp	r5, #0
 8007826:	460e      	mov	r6, r1
 8007828:	4619      	mov	r1, r3
 800782a:	462b      	mov	r3, r5
 800782c:	bfbb      	ittet	lt
 800782e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007832:	461d      	movlt	r5, r3
 8007834:	2300      	movge	r3, #0
 8007836:	232d      	movlt	r3, #45	; 0x2d
 8007838:	700b      	strb	r3, [r1, #0]
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007840:	4691      	mov	r9, r2
 8007842:	f023 0820 	bic.w	r8, r3, #32
 8007846:	bfbc      	itt	lt
 8007848:	4622      	movlt	r2, r4
 800784a:	4614      	movlt	r4, r2
 800784c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007850:	d005      	beq.n	800785e <__cvt+0x42>
 8007852:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007856:	d100      	bne.n	800785a <__cvt+0x3e>
 8007858:	3601      	adds	r6, #1
 800785a:	2102      	movs	r1, #2
 800785c:	e000      	b.n	8007860 <__cvt+0x44>
 800785e:	2103      	movs	r1, #3
 8007860:	ab03      	add	r3, sp, #12
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	ab02      	add	r3, sp, #8
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	ec45 4b10 	vmov	d0, r4, r5
 800786c:	4653      	mov	r3, sl
 800786e:	4632      	mov	r2, r6
 8007870:	f000 fcca 	bl	8008208 <_dtoa_r>
 8007874:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007878:	4607      	mov	r7, r0
 800787a:	d102      	bne.n	8007882 <__cvt+0x66>
 800787c:	f019 0f01 	tst.w	r9, #1
 8007880:	d022      	beq.n	80078c8 <__cvt+0xac>
 8007882:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007886:	eb07 0906 	add.w	r9, r7, r6
 800788a:	d110      	bne.n	80078ae <__cvt+0x92>
 800788c:	783b      	ldrb	r3, [r7, #0]
 800788e:	2b30      	cmp	r3, #48	; 0x30
 8007890:	d10a      	bne.n	80078a8 <__cvt+0x8c>
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f9 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800789e:	b918      	cbnz	r0, 80078a8 <__cvt+0x8c>
 80078a0:	f1c6 0601 	rsb	r6, r6, #1
 80078a4:	f8ca 6000 	str.w	r6, [sl]
 80078a8:	f8da 3000 	ldr.w	r3, [sl]
 80078ac:	4499      	add	r9, r3
 80078ae:	2200      	movs	r2, #0
 80078b0:	2300      	movs	r3, #0
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f9 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ba:	b108      	cbz	r0, 80078c0 <__cvt+0xa4>
 80078bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80078c0:	2230      	movs	r2, #48	; 0x30
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	454b      	cmp	r3, r9
 80078c6:	d307      	bcc.n	80078d8 <__cvt+0xbc>
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078cc:	1bdb      	subs	r3, r3, r7
 80078ce:	4638      	mov	r0, r7
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	b004      	add	sp, #16
 80078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d8:	1c59      	adds	r1, r3, #1
 80078da:	9103      	str	r1, [sp, #12]
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e7f0      	b.n	80078c2 <__cvt+0xa6>

080078e0 <__exponent>:
 80078e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e2:	4603      	mov	r3, r0
 80078e4:	2900      	cmp	r1, #0
 80078e6:	bfb8      	it	lt
 80078e8:	4249      	neglt	r1, r1
 80078ea:	f803 2b02 	strb.w	r2, [r3], #2
 80078ee:	bfb4      	ite	lt
 80078f0:	222d      	movlt	r2, #45	; 0x2d
 80078f2:	222b      	movge	r2, #43	; 0x2b
 80078f4:	2909      	cmp	r1, #9
 80078f6:	7042      	strb	r2, [r0, #1]
 80078f8:	dd2a      	ble.n	8007950 <__exponent+0x70>
 80078fa:	f10d 0407 	add.w	r4, sp, #7
 80078fe:	46a4      	mov	ip, r4
 8007900:	270a      	movs	r7, #10
 8007902:	46a6      	mov	lr, r4
 8007904:	460a      	mov	r2, r1
 8007906:	fb91 f6f7 	sdiv	r6, r1, r7
 800790a:	fb07 1516 	mls	r5, r7, r6, r1
 800790e:	3530      	adds	r5, #48	; 0x30
 8007910:	2a63      	cmp	r2, #99	; 0x63
 8007912:	f104 34ff 	add.w	r4, r4, #4294967295
 8007916:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800791a:	4631      	mov	r1, r6
 800791c:	dcf1      	bgt.n	8007902 <__exponent+0x22>
 800791e:	3130      	adds	r1, #48	; 0x30
 8007920:	f1ae 0502 	sub.w	r5, lr, #2
 8007924:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007928:	1c44      	adds	r4, r0, #1
 800792a:	4629      	mov	r1, r5
 800792c:	4561      	cmp	r1, ip
 800792e:	d30a      	bcc.n	8007946 <__exponent+0x66>
 8007930:	f10d 0209 	add.w	r2, sp, #9
 8007934:	eba2 020e 	sub.w	r2, r2, lr
 8007938:	4565      	cmp	r5, ip
 800793a:	bf88      	it	hi
 800793c:	2200      	movhi	r2, #0
 800793e:	4413      	add	r3, r2
 8007940:	1a18      	subs	r0, r3, r0
 8007942:	b003      	add	sp, #12
 8007944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800794a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800794e:	e7ed      	b.n	800792c <__exponent+0x4c>
 8007950:	2330      	movs	r3, #48	; 0x30
 8007952:	3130      	adds	r1, #48	; 0x30
 8007954:	7083      	strb	r3, [r0, #2]
 8007956:	70c1      	strb	r1, [r0, #3]
 8007958:	1d03      	adds	r3, r0, #4
 800795a:	e7f1      	b.n	8007940 <__exponent+0x60>

0800795c <_printf_float>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	ed2d 8b02 	vpush	{d8}
 8007964:	b08d      	sub	sp, #52	; 0x34
 8007966:	460c      	mov	r4, r1
 8007968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800796c:	4616      	mov	r6, r2
 800796e:	461f      	mov	r7, r3
 8007970:	4605      	mov	r5, r0
 8007972:	f001 fa37 	bl	8008de4 <_localeconv_r>
 8007976:	f8d0 a000 	ldr.w	sl, [r0]
 800797a:	4650      	mov	r0, sl
 800797c:	f7f8 fc28 	bl	80001d0 <strlen>
 8007980:	2300      	movs	r3, #0
 8007982:	930a      	str	r3, [sp, #40]	; 0x28
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	f8d8 3000 	ldr.w	r3, [r8]
 800798c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007990:	3307      	adds	r3, #7
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	f103 0208 	add.w	r2, r3, #8
 800799a:	f8c8 2000 	str.w	r2, [r8]
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80079b4:	ee08 0a10 	vmov	s16, r0
 80079b8:	4b9f      	ldr	r3, [pc, #636]	; (8007c38 <_printf_float+0x2dc>)
 80079ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	f7f9 f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80079c6:	bb88      	cbnz	r0, 8007a2c <_printf_float+0xd0>
 80079c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079cc:	4b9a      	ldr	r3, [pc, #616]	; (8007c38 <_printf_float+0x2dc>)
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295
 80079d2:	f7f9 f88d 	bl	8000af0 <__aeabi_dcmple>
 80079d6:	bb48      	cbnz	r0, 8007a2c <_printf_float+0xd0>
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f9 f87c 	bl	8000adc <__aeabi_dcmplt>
 80079e4:	b110      	cbz	r0, 80079ec <_printf_float+0x90>
 80079e6:	232d      	movs	r3, #45	; 0x2d
 80079e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ec:	4b93      	ldr	r3, [pc, #588]	; (8007c3c <_printf_float+0x2e0>)
 80079ee:	4894      	ldr	r0, [pc, #592]	; (8007c40 <_printf_float+0x2e4>)
 80079f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079f4:	bf94      	ite	ls
 80079f6:	4698      	movls	r8, r3
 80079f8:	4680      	movhi	r8, r0
 80079fa:	2303      	movs	r3, #3
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	9b05      	ldr	r3, [sp, #20]
 8007a00:	f023 0204 	bic.w	r2, r3, #4
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	f04f 0900 	mov.w	r9, #0
 8007a0a:	9700      	str	r7, [sp, #0]
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a10:	4621      	mov	r1, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 f9d8 	bl	8007dc8 <_printf_common>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f040 8090 	bne.w	8007b3e <_printf_float+0x1e2>
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	b00d      	add	sp, #52	; 0x34
 8007a24:	ecbd 8b02 	vpop	{d8}
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f9 f87a 	bl	8000b2c <__aeabi_dcmpun>
 8007a38:	b140      	cbz	r0, 8007a4c <_printf_float+0xf0>
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfbc      	itt	lt
 8007a40:	232d      	movlt	r3, #45	; 0x2d
 8007a42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a46:	487f      	ldr	r0, [pc, #508]	; (8007c44 <_printf_float+0x2e8>)
 8007a48:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <_printf_float+0x2ec>)
 8007a4a:	e7d1      	b.n	80079f0 <_printf_float+0x94>
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a52:	9206      	str	r2, [sp, #24]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	d13f      	bne.n	8007ad8 <_printf_float+0x17c>
 8007a58:	2306      	movs	r3, #6
 8007a5a:	6063      	str	r3, [r4, #4]
 8007a5c:	9b05      	ldr	r3, [sp, #20]
 8007a5e:	6861      	ldr	r1, [r4, #4]
 8007a60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a64:	2300      	movs	r3, #0
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	ab0a      	add	r3, sp, #40	; 0x28
 8007a6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a6e:	ab09      	add	r3, sp, #36	; 0x24
 8007a70:	ec49 8b10 	vmov	d0, r8, r9
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f7ff fecd 	bl	800781c <__cvt>
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a86:	2b47      	cmp	r3, #71	; 0x47
 8007a88:	4680      	mov	r8, r0
 8007a8a:	d108      	bne.n	8007a9e <_printf_float+0x142>
 8007a8c:	1cc8      	adds	r0, r1, #3
 8007a8e:	db02      	blt.n	8007a96 <_printf_float+0x13a>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	4299      	cmp	r1, r3
 8007a94:	dd41      	ble.n	8007b1a <_printf_float+0x1be>
 8007a96:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a9a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007aa2:	d820      	bhi.n	8007ae6 <_printf_float+0x18a>
 8007aa4:	3901      	subs	r1, #1
 8007aa6:	465a      	mov	r2, fp
 8007aa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aac:	9109      	str	r1, [sp, #36]	; 0x24
 8007aae:	f7ff ff17 	bl	80078e0 <__exponent>
 8007ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab4:	1813      	adds	r3, r2, r0
 8007ab6:	2a01      	cmp	r2, #1
 8007ab8:	4681      	mov	r9, r0
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	dc02      	bgt.n	8007ac4 <_printf_float+0x168>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	07d2      	lsls	r2, r2, #31
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_float+0x16c>
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d09c      	beq.n	8007a0a <_printf_float+0xae>
 8007ad0:	232d      	movs	r3, #45	; 0x2d
 8007ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad6:	e798      	b.n	8007a0a <_printf_float+0xae>
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	2a47      	cmp	r2, #71	; 0x47
 8007adc:	d1be      	bne.n	8007a5c <_printf_float+0x100>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1bc      	bne.n	8007a5c <_printf_float+0x100>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e7b9      	b.n	8007a5a <_printf_float+0xfe>
 8007ae6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aea:	d118      	bne.n	8007b1e <_printf_float+0x1c2>
 8007aec:	2900      	cmp	r1, #0
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	dd0b      	ble.n	8007b0a <_printf_float+0x1ae>
 8007af2:	6121      	str	r1, [r4, #16]
 8007af4:	b913      	cbnz	r3, 8007afc <_printf_float+0x1a0>
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	07d0      	lsls	r0, r2, #31
 8007afa:	d502      	bpl.n	8007b02 <_printf_float+0x1a6>
 8007afc:	3301      	adds	r3, #1
 8007afe:	440b      	add	r3, r1
 8007b00:	6123      	str	r3, [r4, #16]
 8007b02:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b04:	f04f 0900 	mov.w	r9, #0
 8007b08:	e7de      	b.n	8007ac8 <_printf_float+0x16c>
 8007b0a:	b913      	cbnz	r3, 8007b12 <_printf_float+0x1b6>
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	07d2      	lsls	r2, r2, #31
 8007b10:	d501      	bpl.n	8007b16 <_printf_float+0x1ba>
 8007b12:	3302      	adds	r3, #2
 8007b14:	e7f4      	b.n	8007b00 <_printf_float+0x1a4>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e7f2      	b.n	8007b00 <_printf_float+0x1a4>
 8007b1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b20:	4299      	cmp	r1, r3
 8007b22:	db05      	blt.n	8007b30 <_printf_float+0x1d4>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	6121      	str	r1, [r4, #16]
 8007b28:	07d8      	lsls	r0, r3, #31
 8007b2a:	d5ea      	bpl.n	8007b02 <_printf_float+0x1a6>
 8007b2c:	1c4b      	adds	r3, r1, #1
 8007b2e:	e7e7      	b.n	8007b00 <_printf_float+0x1a4>
 8007b30:	2900      	cmp	r1, #0
 8007b32:	bfd4      	ite	le
 8007b34:	f1c1 0202 	rsble	r2, r1, #2
 8007b38:	2201      	movgt	r2, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	e7e0      	b.n	8007b00 <_printf_float+0x1a4>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	055a      	lsls	r2, r3, #21
 8007b42:	d407      	bmi.n	8007b54 <_printf_float+0x1f8>
 8007b44:	6923      	ldr	r3, [r4, #16]
 8007b46:	4642      	mov	r2, r8
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d12c      	bne.n	8007bac <_printf_float+0x250>
 8007b52:	e764      	b.n	8007a1e <_printf_float+0xc2>
 8007b54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b58:	f240 80e0 	bls.w	8007d1c <_printf_float+0x3c0>
 8007b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f7f8 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d034      	beq.n	8007bd6 <_printf_float+0x27a>
 8007b6c:	4a37      	ldr	r2, [pc, #220]	; (8007c4c <_printf_float+0x2f0>)
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af51 	beq.w	8007a1e <_printf_float+0xc2>
 8007b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b80:	429a      	cmp	r2, r3
 8007b82:	db02      	blt.n	8007b8a <_printf_float+0x22e>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07d8      	lsls	r0, r3, #31
 8007b88:	d510      	bpl.n	8007bac <_printf_float+0x250>
 8007b8a:	ee18 3a10 	vmov	r3, s16
 8007b8e:	4652      	mov	r2, sl
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f af41 	beq.w	8007a1e <_printf_float+0xc2>
 8007b9c:	f04f 0800 	mov.w	r8, #0
 8007ba0:	f104 091a 	add.w	r9, r4, #26
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	4543      	cmp	r3, r8
 8007baa:	dc09      	bgt.n	8007bc0 <_printf_float+0x264>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	079b      	lsls	r3, r3, #30
 8007bb0:	f100 8105 	bmi.w	8007dbe <_printf_float+0x462>
 8007bb4:	68e0      	ldr	r0, [r4, #12]
 8007bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb8:	4298      	cmp	r0, r3
 8007bba:	bfb8      	it	lt
 8007bbc:	4618      	movlt	r0, r3
 8007bbe:	e730      	b.n	8007a22 <_printf_float+0xc6>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	464a      	mov	r2, r9
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f af27 	beq.w	8007a1e <_printf_float+0xc2>
 8007bd0:	f108 0801 	add.w	r8, r8, #1
 8007bd4:	e7e6      	b.n	8007ba4 <_printf_float+0x248>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dc39      	bgt.n	8007c50 <_printf_float+0x2f4>
 8007bdc:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <_printf_float+0x2f0>)
 8007bde:	2301      	movs	r3, #1
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f af19 	beq.w	8007a1e <_printf_float+0xc2>
 8007bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	d102      	bne.n	8007bfa <_printf_float+0x29e>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	07d9      	lsls	r1, r3, #31
 8007bf8:	d5d8      	bpl.n	8007bac <_printf_float+0x250>
 8007bfa:	ee18 3a10 	vmov	r3, s16
 8007bfe:	4652      	mov	r2, sl
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	f43f af09 	beq.w	8007a1e <_printf_float+0xc2>
 8007c0c:	f04f 0900 	mov.w	r9, #0
 8007c10:	f104 0a1a 	add.w	sl, r4, #26
 8007c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c16:	425b      	negs	r3, r3
 8007c18:	454b      	cmp	r3, r9
 8007c1a:	dc01      	bgt.n	8007c20 <_printf_float+0x2c4>
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	e792      	b.n	8007b46 <_printf_float+0x1ea>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4652      	mov	r2, sl
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	f43f aef7 	beq.w	8007a1e <_printf_float+0xc2>
 8007c30:	f109 0901 	add.w	r9, r9, #1
 8007c34:	e7ee      	b.n	8007c14 <_printf_float+0x2b8>
 8007c36:	bf00      	nop
 8007c38:	7fefffff 	.word	0x7fefffff
 8007c3c:	0800a2e0 	.word	0x0800a2e0
 8007c40:	0800a2e4 	.word	0x0800a2e4
 8007c44:	0800a2ec 	.word	0x0800a2ec
 8007c48:	0800a2e8 	.word	0x0800a2e8
 8007c4c:	0800a2f0 	.word	0x0800a2f0
 8007c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c54:	429a      	cmp	r2, r3
 8007c56:	bfa8      	it	ge
 8007c58:	461a      	movge	r2, r3
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	4691      	mov	r9, r2
 8007c5e:	dc37      	bgt.n	8007cd0 <_printf_float+0x374>
 8007c60:	f04f 0b00 	mov.w	fp, #0
 8007c64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c68:	f104 021a 	add.w	r2, r4, #26
 8007c6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	eba3 0309 	sub.w	r3, r3, r9
 8007c74:	455b      	cmp	r3, fp
 8007c76:	dc33      	bgt.n	8007ce0 <_printf_float+0x384>
 8007c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	db3b      	blt.n	8007cf8 <_printf_float+0x39c>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	07da      	lsls	r2, r3, #31
 8007c84:	d438      	bmi.n	8007cf8 <_printf_float+0x39c>
 8007c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c88:	9a05      	ldr	r2, [sp, #20]
 8007c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8c:	1a9a      	subs	r2, r3, r2
 8007c8e:	eba3 0901 	sub.w	r9, r3, r1
 8007c92:	4591      	cmp	r9, r2
 8007c94:	bfa8      	it	ge
 8007c96:	4691      	movge	r9, r2
 8007c98:	f1b9 0f00 	cmp.w	r9, #0
 8007c9c:	dc35      	bgt.n	8007d0a <_printf_float+0x3ae>
 8007c9e:	f04f 0800 	mov.w	r8, #0
 8007ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca6:	f104 0a1a 	add.w	sl, r4, #26
 8007caa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	eba3 0309 	sub.w	r3, r3, r9
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	f77f af79 	ble.w	8007bac <_printf_float+0x250>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	f43f aeaa 	beq.w	8007a1e <_printf_float+0xc2>
 8007cca:	f108 0801 	add.w	r8, r8, #1
 8007cce:	e7ec      	b.n	8007caa <_printf_float+0x34e>
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b8      	blx	r7
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d1c0      	bne.n	8007c60 <_printf_float+0x304>
 8007cde:	e69e      	b.n	8007a1e <_printf_float+0xc2>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	9205      	str	r2, [sp, #20]
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f ae97 	beq.w	8007a1e <_printf_float+0xc2>
 8007cf0:	9a05      	ldr	r2, [sp, #20]
 8007cf2:	f10b 0b01 	add.w	fp, fp, #1
 8007cf6:	e7b9      	b.n	8007c6c <_printf_float+0x310>
 8007cf8:	ee18 3a10 	vmov	r3, s16
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	d1be      	bne.n	8007c86 <_printf_float+0x32a>
 8007d08:	e689      	b.n	8007a1e <_printf_float+0xc2>
 8007d0a:	9a05      	ldr	r2, [sp, #20]
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	4442      	add	r2, r8
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	d1c1      	bne.n	8007c9e <_printf_float+0x342>
 8007d1a:	e680      	b.n	8007a1e <_printf_float+0xc2>
 8007d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d1e:	2a01      	cmp	r2, #1
 8007d20:	dc01      	bgt.n	8007d26 <_printf_float+0x3ca>
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d538      	bpl.n	8007d98 <_printf_float+0x43c>
 8007d26:	2301      	movs	r3, #1
 8007d28:	4642      	mov	r2, r8
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f ae74 	beq.w	8007a1e <_printf_float+0xc2>
 8007d36:	ee18 3a10 	vmov	r3, s16
 8007d3a:	4652      	mov	r2, sl
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	f43f ae6b 	beq.w	8007a1e <_printf_float+0xc2>
 8007d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f7f8 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d54:	b9d8      	cbnz	r0, 8007d8e <_printf_float+0x432>
 8007d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d58:	f108 0201 	add.w	r2, r8, #1
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	d10e      	bne.n	8007d86 <_printf_float+0x42a>
 8007d68:	e659      	b.n	8007a1e <_printf_float+0xc2>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f ae52 	beq.w	8007a1e <_printf_float+0xc2>
 8007d7a:	f108 0801 	add.w	r8, r8, #1
 8007d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d80:	3b01      	subs	r3, #1
 8007d82:	4543      	cmp	r3, r8
 8007d84:	dcf1      	bgt.n	8007d6a <_printf_float+0x40e>
 8007d86:	464b      	mov	r3, r9
 8007d88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d8c:	e6dc      	b.n	8007b48 <_printf_float+0x1ec>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	f104 0a1a 	add.w	sl, r4, #26
 8007d96:	e7f2      	b.n	8007d7e <_printf_float+0x422>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	e7df      	b.n	8007d5e <_printf_float+0x402>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	464a      	mov	r2, r9
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	f43f ae38 	beq.w	8007a1e <_printf_float+0xc2>
 8007dae:	f108 0801 	add.w	r8, r8, #1
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007db6:	1a5b      	subs	r3, r3, r1
 8007db8:	4543      	cmp	r3, r8
 8007dba:	dcf0      	bgt.n	8007d9e <_printf_float+0x442>
 8007dbc:	e6fa      	b.n	8007bb4 <_printf_float+0x258>
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	f104 0919 	add.w	r9, r4, #25
 8007dc6:	e7f4      	b.n	8007db2 <_printf_float+0x456>

08007dc8 <_printf_common>:
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	4616      	mov	r6, r2
 8007dce:	4699      	mov	r9, r3
 8007dd0:	688a      	ldr	r2, [r1, #8]
 8007dd2:	690b      	ldr	r3, [r1, #16]
 8007dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bfb8      	it	lt
 8007ddc:	4613      	movlt	r3, r2
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de4:	4607      	mov	r7, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b10a      	cbz	r2, 8007dee <_printf_common+0x26>
 8007dea:	3301      	adds	r3, #1
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	0699      	lsls	r1, r3, #26
 8007df2:	bf42      	ittt	mi
 8007df4:	6833      	ldrmi	r3, [r6, #0]
 8007df6:	3302      	addmi	r3, #2
 8007df8:	6033      	strmi	r3, [r6, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	f015 0506 	ands.w	r5, r5, #6
 8007e00:	d106      	bne.n	8007e10 <_printf_common+0x48>
 8007e02:	f104 0a19 	add.w	sl, r4, #25
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	6832      	ldr	r2, [r6, #0]
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dc26      	bgt.n	8007e5e <_printf_common+0x96>
 8007e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e14:	1e13      	subs	r3, r2, #0
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	bf18      	it	ne
 8007e1a:	2301      	movne	r3, #1
 8007e1c:	0692      	lsls	r2, r2, #26
 8007e1e:	d42b      	bmi.n	8007e78 <_printf_common+0xb0>
 8007e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e24:	4649      	mov	r1, r9
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d01e      	beq.n	8007e6c <_printf_common+0xa4>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	68e5      	ldr	r5, [r4, #12]
 8007e32:	6832      	ldr	r2, [r6, #0]
 8007e34:	f003 0306 	and.w	r3, r3, #6
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	bf08      	it	eq
 8007e3c:	1aad      	subeq	r5, r5, r2
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	6922      	ldr	r2, [r4, #16]
 8007e42:	bf0c      	ite	eq
 8007e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e48:	2500      	movne	r5, #0
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bfc4      	itt	gt
 8007e4e:	1a9b      	subgt	r3, r3, r2
 8007e50:	18ed      	addgt	r5, r5, r3
 8007e52:	2600      	movs	r6, #0
 8007e54:	341a      	adds	r4, #26
 8007e56:	42b5      	cmp	r5, r6
 8007e58:	d11a      	bne.n	8007e90 <_printf_common+0xc8>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e008      	b.n	8007e70 <_printf_common+0xa8>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4652      	mov	r2, sl
 8007e62:	4649      	mov	r1, r9
 8007e64:	4638      	mov	r0, r7
 8007e66:	47c0      	blx	r8
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d103      	bne.n	8007e74 <_printf_common+0xac>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	3501      	adds	r5, #1
 8007e76:	e7c6      	b.n	8007e06 <_printf_common+0x3e>
 8007e78:	18e1      	adds	r1, r4, r3
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	2030      	movs	r0, #48	; 0x30
 8007e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e82:	4422      	add	r2, r4
 8007e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	e7c7      	b.n	8007e20 <_printf_common+0x58>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4622      	mov	r2, r4
 8007e94:	4649      	mov	r1, r9
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c0      	blx	r8
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d0e6      	beq.n	8007e6c <_printf_common+0xa4>
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7d9      	b.n	8007e56 <_printf_common+0x8e>
	...

08007ea4 <_printf_i>:
 8007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	7e0f      	ldrb	r7, [r1, #24]
 8007eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007eac:	2f78      	cmp	r7, #120	; 0x78
 8007eae:	4691      	mov	r9, r2
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eba:	d807      	bhi.n	8007ecc <_printf_i+0x28>
 8007ebc:	2f62      	cmp	r7, #98	; 0x62
 8007ebe:	d80a      	bhi.n	8007ed6 <_printf_i+0x32>
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	f000 80d8 	beq.w	8008076 <_printf_i+0x1d2>
 8007ec6:	2f58      	cmp	r7, #88	; 0x58
 8007ec8:	f000 80a3 	beq.w	8008012 <_printf_i+0x16e>
 8007ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed4:	e03a      	b.n	8007f4c <_printf_i+0xa8>
 8007ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eda:	2b15      	cmp	r3, #21
 8007edc:	d8f6      	bhi.n	8007ecc <_printf_i+0x28>
 8007ede:	a101      	add	r1, pc, #4	; (adr r1, 8007ee4 <_printf_i+0x40>)
 8007ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f51 	.word	0x08007f51
 8007eec:	08007ecd 	.word	0x08007ecd
 8007ef0:	08007ecd 	.word	0x08007ecd
 8007ef4:	08007ecd 	.word	0x08007ecd
 8007ef8:	08007ecd 	.word	0x08007ecd
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007ecd 	.word	0x08007ecd
 8007f04:	08007ecd 	.word	0x08007ecd
 8007f08:	08007ecd 	.word	0x08007ecd
 8007f0c:	08007ecd 	.word	0x08007ecd
 8007f10:	0800805d 	.word	0x0800805d
 8007f14:	08007f81 	.word	0x08007f81
 8007f18:	0800803f 	.word	0x0800803f
 8007f1c:	08007ecd 	.word	0x08007ecd
 8007f20:	08007ecd 	.word	0x08007ecd
 8007f24:	0800807f 	.word	0x0800807f
 8007f28:	08007ecd 	.word	0x08007ecd
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007ecd 	.word	0x08007ecd
 8007f34:	08007ecd 	.word	0x08007ecd
 8007f38:	08008047 	.word	0x08008047
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	602a      	str	r2, [r5, #0]
 8007f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0a3      	b.n	8008098 <_printf_i+0x1f4>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	6829      	ldr	r1, [r5, #0]
 8007f54:	0606      	lsls	r6, r0, #24
 8007f56:	f101 0304 	add.w	r3, r1, #4
 8007f5a:	d50a      	bpl.n	8007f72 <_printf_i+0xce>
 8007f5c:	680e      	ldr	r6, [r1, #0]
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	da03      	bge.n	8007f6c <_printf_i+0xc8>
 8007f64:	232d      	movs	r3, #45	; 0x2d
 8007f66:	4276      	negs	r6, r6
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	485e      	ldr	r0, [pc, #376]	; (80080e8 <_printf_i+0x244>)
 8007f6e:	230a      	movs	r3, #10
 8007f70:	e019      	b.n	8007fa6 <_printf_i+0x102>
 8007f72:	680e      	ldr	r6, [r1, #0]
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f7a:	bf18      	it	ne
 8007f7c:	b236      	sxthne	r6, r6
 8007f7e:	e7ef      	b.n	8007f60 <_printf_i+0xbc>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	1d19      	adds	r1, r3, #4
 8007f86:	6029      	str	r1, [r5, #0]
 8007f88:	0601      	lsls	r1, r0, #24
 8007f8a:	d501      	bpl.n	8007f90 <_printf_i+0xec>
 8007f8c:	681e      	ldr	r6, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <_printf_i+0xf2>
 8007f90:	0646      	lsls	r6, r0, #25
 8007f92:	d5fb      	bpl.n	8007f8c <_printf_i+0xe8>
 8007f94:	881e      	ldrh	r6, [r3, #0]
 8007f96:	4854      	ldr	r0, [pc, #336]	; (80080e8 <_printf_i+0x244>)
 8007f98:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2308      	moveq	r3, #8
 8007f9e:	230a      	movne	r3, #10
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa6:	6865      	ldr	r5, [r4, #4]
 8007fa8:	60a5      	str	r5, [r4, #8]
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	bfa2      	ittt	ge
 8007fae:	6821      	ldrge	r1, [r4, #0]
 8007fb0:	f021 0104 	bicge.w	r1, r1, #4
 8007fb4:	6021      	strge	r1, [r4, #0]
 8007fb6:	b90e      	cbnz	r6, 8007fbc <_printf_i+0x118>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	d04d      	beq.n	8008058 <_printf_i+0x1b4>
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8007fc6:	5dc7      	ldrb	r7, [r0, r7]
 8007fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fcc:	4637      	mov	r7, r6
 8007fce:	42bb      	cmp	r3, r7
 8007fd0:	460e      	mov	r6, r1
 8007fd2:	d9f4      	bls.n	8007fbe <_printf_i+0x11a>
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10b      	bne.n	8007ff0 <_printf_i+0x14c>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07de      	lsls	r6, r3, #31
 8007fdc:	d508      	bpl.n	8007ff0 <_printf_i+0x14c>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	bfde      	ittt	le
 8007fe6:	2330      	movle	r3, #48	; 0x30
 8007fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ff0:	1b52      	subs	r2, r2, r5
 8007ff2:	6122      	str	r2, [r4, #16]
 8007ff4:	f8cd a000 	str.w	sl, [sp]
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	aa03      	add	r2, sp, #12
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f7ff fee2 	bl	8007dc8 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	d14c      	bne.n	80080a2 <_printf_i+0x1fe>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b004      	add	sp, #16
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	4835      	ldr	r0, [pc, #212]	; (80080e8 <_printf_i+0x244>)
 8008014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008018:	6829      	ldr	r1, [r5, #0]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008020:	6029      	str	r1, [r5, #0]
 8008022:	061d      	lsls	r5, r3, #24
 8008024:	d514      	bpl.n	8008050 <_printf_i+0x1ac>
 8008026:	07df      	lsls	r7, r3, #31
 8008028:	bf44      	itt	mi
 800802a:	f043 0320 	orrmi.w	r3, r3, #32
 800802e:	6023      	strmi	r3, [r4, #0]
 8008030:	b91e      	cbnz	r6, 800803a <_printf_i+0x196>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	f023 0320 	bic.w	r3, r3, #32
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	2310      	movs	r3, #16
 800803c:	e7b0      	b.n	8007fa0 <_printf_i+0xfc>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f043 0320 	orr.w	r3, r3, #32
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	2378      	movs	r3, #120	; 0x78
 8008048:	4828      	ldr	r0, [pc, #160]	; (80080ec <_printf_i+0x248>)
 800804a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804e:	e7e3      	b.n	8008018 <_printf_i+0x174>
 8008050:	0659      	lsls	r1, r3, #25
 8008052:	bf48      	it	mi
 8008054:	b2b6      	uxthmi	r6, r6
 8008056:	e7e6      	b.n	8008026 <_printf_i+0x182>
 8008058:	4615      	mov	r5, r2
 800805a:	e7bb      	b.n	8007fd4 <_printf_i+0x130>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	6826      	ldr	r6, [r4, #0]
 8008060:	6961      	ldr	r1, [r4, #20]
 8008062:	1d18      	adds	r0, r3, #4
 8008064:	6028      	str	r0, [r5, #0]
 8008066:	0635      	lsls	r5, r6, #24
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	d501      	bpl.n	8008070 <_printf_i+0x1cc>
 800806c:	6019      	str	r1, [r3, #0]
 800806e:	e002      	b.n	8008076 <_printf_i+0x1d2>
 8008070:	0670      	lsls	r0, r6, #25
 8008072:	d5fb      	bpl.n	800806c <_printf_i+0x1c8>
 8008074:	8019      	strh	r1, [r3, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	4615      	mov	r5, r2
 800807c:	e7ba      	b.n	8007ff4 <_printf_i+0x150>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	602a      	str	r2, [r5, #0]
 8008084:	681d      	ldr	r5, [r3, #0]
 8008086:	6862      	ldr	r2, [r4, #4]
 8008088:	2100      	movs	r1, #0
 800808a:	4628      	mov	r0, r5
 800808c:	f7f8 f8a8 	bl	80001e0 <memchr>
 8008090:	b108      	cbz	r0, 8008096 <_printf_i+0x1f2>
 8008092:	1b40      	subs	r0, r0, r5
 8008094:	6060      	str	r0, [r4, #4]
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	2300      	movs	r3, #0
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a0:	e7a8      	b.n	8007ff4 <_printf_i+0x150>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	462a      	mov	r2, r5
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d0ab      	beq.n	8008008 <_printf_i+0x164>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	079b      	lsls	r3, r3, #30
 80080b4:	d413      	bmi.n	80080de <_printf_i+0x23a>
 80080b6:	68e0      	ldr	r0, [r4, #12]
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	4298      	cmp	r0, r3
 80080bc:	bfb8      	it	lt
 80080be:	4618      	movlt	r0, r3
 80080c0:	e7a4      	b.n	800800c <_printf_i+0x168>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4632      	mov	r2, r6
 80080c6:	4649      	mov	r1, r9
 80080c8:	4640      	mov	r0, r8
 80080ca:	47d0      	blx	sl
 80080cc:	3001      	adds	r0, #1
 80080ce:	d09b      	beq.n	8008008 <_printf_i+0x164>
 80080d0:	3501      	adds	r5, #1
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	9903      	ldr	r1, [sp, #12]
 80080d6:	1a5b      	subs	r3, r3, r1
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dcf2      	bgt.n	80080c2 <_printf_i+0x21e>
 80080dc:	e7eb      	b.n	80080b6 <_printf_i+0x212>
 80080de:	2500      	movs	r5, #0
 80080e0:	f104 0619 	add.w	r6, r4, #25
 80080e4:	e7f5      	b.n	80080d2 <_printf_i+0x22e>
 80080e6:	bf00      	nop
 80080e8:	0800a2f2 	.word	0x0800a2f2
 80080ec:	0800a303 	.word	0x0800a303

080080f0 <quorem>:
 80080f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	6903      	ldr	r3, [r0, #16]
 80080f6:	690c      	ldr	r4, [r1, #16]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	4607      	mov	r7, r0
 80080fc:	f2c0 8081 	blt.w	8008202 <quorem+0x112>
 8008100:	3c01      	subs	r4, #1
 8008102:	f101 0814 	add.w	r8, r1, #20
 8008106:	f100 0514 	add.w	r5, r0, #20
 800810a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008118:	3301      	adds	r3, #1
 800811a:	429a      	cmp	r2, r3
 800811c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008124:	fbb2 f6f3 	udiv	r6, r2, r3
 8008128:	d331      	bcc.n	800818e <quorem+0x9e>
 800812a:	f04f 0e00 	mov.w	lr, #0
 800812e:	4640      	mov	r0, r8
 8008130:	46ac      	mov	ip, r5
 8008132:	46f2      	mov	sl, lr
 8008134:	f850 2b04 	ldr.w	r2, [r0], #4
 8008138:	b293      	uxth	r3, r2
 800813a:	fb06 e303 	mla	r3, r6, r3, lr
 800813e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ebaa 0303 	sub.w	r3, sl, r3
 8008148:	f8dc a000 	ldr.w	sl, [ip]
 800814c:	0c12      	lsrs	r2, r2, #16
 800814e:	fa13 f38a 	uxtah	r3, r3, sl
 8008152:	fb06 e202 	mla	r2, r6, r2, lr
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800815e:	b292      	uxth	r2, r2
 8008160:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008168:	f8bd 3000 	ldrh.w	r3, [sp]
 800816c:	4581      	cmp	r9, r0
 800816e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008172:	f84c 3b04 	str.w	r3, [ip], #4
 8008176:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800817a:	d2db      	bcs.n	8008134 <quorem+0x44>
 800817c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008180:	b92b      	cbnz	r3, 800818e <quorem+0x9e>
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	3b04      	subs	r3, #4
 8008186:	429d      	cmp	r5, r3
 8008188:	461a      	mov	r2, r3
 800818a:	d32e      	bcc.n	80081ea <quorem+0xfa>
 800818c:	613c      	str	r4, [r7, #16]
 800818e:	4638      	mov	r0, r7
 8008190:	f001 f8b6 	bl	8009300 <__mcmp>
 8008194:	2800      	cmp	r0, #0
 8008196:	db24      	blt.n	80081e2 <quorem+0xf2>
 8008198:	3601      	adds	r6, #1
 800819a:	4628      	mov	r0, r5
 800819c:	f04f 0c00 	mov.w	ip, #0
 80081a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081a4:	f8d0 e000 	ldr.w	lr, [r0]
 80081a8:	b293      	uxth	r3, r2
 80081aa:	ebac 0303 	sub.w	r3, ip, r3
 80081ae:	0c12      	lsrs	r2, r2, #16
 80081b0:	fa13 f38e 	uxtah	r3, r3, lr
 80081b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081bc:	b29b      	uxth	r3, r3
 80081be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c2:	45c1      	cmp	r9, r8
 80081c4:	f840 3b04 	str.w	r3, [r0], #4
 80081c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081cc:	d2e8      	bcs.n	80081a0 <quorem+0xb0>
 80081ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d6:	b922      	cbnz	r2, 80081e2 <quorem+0xf2>
 80081d8:	3b04      	subs	r3, #4
 80081da:	429d      	cmp	r5, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	d30a      	bcc.n	80081f6 <quorem+0x106>
 80081e0:	613c      	str	r4, [r7, #16]
 80081e2:	4630      	mov	r0, r6
 80081e4:	b003      	add	sp, #12
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	3b04      	subs	r3, #4
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	d1cc      	bne.n	800818c <quorem+0x9c>
 80081f2:	3c01      	subs	r4, #1
 80081f4:	e7c7      	b.n	8008186 <quorem+0x96>
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	d1f0      	bne.n	80081e0 <quorem+0xf0>
 80081fe:	3c01      	subs	r4, #1
 8008200:	e7eb      	b.n	80081da <quorem+0xea>
 8008202:	2000      	movs	r0, #0
 8008204:	e7ee      	b.n	80081e4 <quorem+0xf4>
	...

08008208 <_dtoa_r>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	ed2d 8b04 	vpush	{d8-d9}
 8008210:	ec57 6b10 	vmov	r6, r7, d0
 8008214:	b093      	sub	sp, #76	; 0x4c
 8008216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800821c:	9106      	str	r1, [sp, #24]
 800821e:	ee10 aa10 	vmov	sl, s0
 8008222:	4604      	mov	r4, r0
 8008224:	9209      	str	r2, [sp, #36]	; 0x24
 8008226:	930c      	str	r3, [sp, #48]	; 0x30
 8008228:	46bb      	mov	fp, r7
 800822a:	b975      	cbnz	r5, 800824a <_dtoa_r+0x42>
 800822c:	2010      	movs	r0, #16
 800822e:	f000 fddd 	bl	8008dec <malloc>
 8008232:	4602      	mov	r2, r0
 8008234:	6260      	str	r0, [r4, #36]	; 0x24
 8008236:	b920      	cbnz	r0, 8008242 <_dtoa_r+0x3a>
 8008238:	4ba7      	ldr	r3, [pc, #668]	; (80084d8 <_dtoa_r+0x2d0>)
 800823a:	21ea      	movs	r1, #234	; 0xea
 800823c:	48a7      	ldr	r0, [pc, #668]	; (80084dc <_dtoa_r+0x2d4>)
 800823e:	f001 fa67 	bl	8009710 <__assert_func>
 8008242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008246:	6005      	str	r5, [r0, #0]
 8008248:	60c5      	str	r5, [r0, #12]
 800824a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	b151      	cbz	r1, 8008266 <_dtoa_r+0x5e>
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	604a      	str	r2, [r1, #4]
 8008254:	2301      	movs	r3, #1
 8008256:	4093      	lsls	r3, r2
 8008258:	608b      	str	r3, [r1, #8]
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fe0e 	bl	8008e7c <_Bfree>
 8008260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	1e3b      	subs	r3, r7, #0
 8008268:	bfaa      	itet	ge
 800826a:	2300      	movge	r3, #0
 800826c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008270:	f8c8 3000 	strge.w	r3, [r8]
 8008274:	4b9a      	ldr	r3, [pc, #616]	; (80084e0 <_dtoa_r+0x2d8>)
 8008276:	bfbc      	itt	lt
 8008278:	2201      	movlt	r2, #1
 800827a:	f8c8 2000 	strlt.w	r2, [r8]
 800827e:	ea33 030b 	bics.w	r3, r3, fp
 8008282:	d11b      	bne.n	80082bc <_dtoa_r+0xb4>
 8008284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008286:	f242 730f 	movw	r3, #9999	; 0x270f
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008290:	4333      	orrs	r3, r6
 8008292:	f000 8592 	beq.w	8008dba <_dtoa_r+0xbb2>
 8008296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008298:	b963      	cbnz	r3, 80082b4 <_dtoa_r+0xac>
 800829a:	4b92      	ldr	r3, [pc, #584]	; (80084e4 <_dtoa_r+0x2dc>)
 800829c:	e022      	b.n	80082e4 <_dtoa_r+0xdc>
 800829e:	4b92      	ldr	r3, [pc, #584]	; (80084e8 <_dtoa_r+0x2e0>)
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	3308      	adds	r3, #8
 80082a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	9801      	ldr	r0, [sp, #4]
 80082aa:	b013      	add	sp, #76	; 0x4c
 80082ac:	ecbd 8b04 	vpop	{d8-d9}
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	4b8b      	ldr	r3, [pc, #556]	; (80084e4 <_dtoa_r+0x2dc>)
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	3303      	adds	r3, #3
 80082ba:	e7f3      	b.n	80082a4 <_dtoa_r+0x9c>
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	f7f8 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c8:	ec4b ab19 	vmov	d9, sl, fp
 80082cc:	4680      	mov	r8, r0
 80082ce:	b158      	cbz	r0, 80082e8 <_dtoa_r+0xe0>
 80082d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082d2:	2301      	movs	r3, #1
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 856b 	beq.w	8008db4 <_dtoa_r+0xbac>
 80082de:	4883      	ldr	r0, [pc, #524]	; (80084ec <_dtoa_r+0x2e4>)
 80082e0:	6018      	str	r0, [r3, #0]
 80082e2:	1e43      	subs	r3, r0, #1
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	e7df      	b.n	80082a8 <_dtoa_r+0xa0>
 80082e8:	ec4b ab10 	vmov	d0, sl, fp
 80082ec:	aa10      	add	r2, sp, #64	; 0x40
 80082ee:	a911      	add	r1, sp, #68	; 0x44
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 f8ab 	bl	800944c <__d2b>
 80082f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80082fa:	ee08 0a10 	vmov	s16, r0
 80082fe:	2d00      	cmp	r5, #0
 8008300:	f000 8084 	beq.w	800840c <_dtoa_r+0x204>
 8008304:	ee19 3a90 	vmov	r3, s19
 8008308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800830c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008310:	4656      	mov	r6, sl
 8008312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800831a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800831e:	4b74      	ldr	r3, [pc, #464]	; (80084f0 <_dtoa_r+0x2e8>)
 8008320:	2200      	movs	r2, #0
 8008322:	4630      	mov	r0, r6
 8008324:	4639      	mov	r1, r7
 8008326:	f7f7 ffaf 	bl	8000288 <__aeabi_dsub>
 800832a:	a365      	add	r3, pc, #404	; (adr r3, 80084c0 <_dtoa_r+0x2b8>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	a364      	add	r3, pc, #400	; (adr r3, 80084c8 <_dtoa_r+0x2c0>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ffa7 	bl	800028c <__adddf3>
 800833e:	4606      	mov	r6, r0
 8008340:	4628      	mov	r0, r5
 8008342:	460f      	mov	r7, r1
 8008344:	f7f8 f8ee 	bl	8000524 <__aeabi_i2d>
 8008348:	a361      	add	r3, pc, #388	; (adr r3, 80084d0 <_dtoa_r+0x2c8>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	f7f8 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8008366:	2200      	movs	r2, #0
 8008368:	9000      	str	r0, [sp, #0]
 800836a:	2300      	movs	r3, #0
 800836c:	4630      	mov	r0, r6
 800836e:	4639      	mov	r1, r7
 8008370:	f7f8 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8008374:	b150      	cbz	r0, 800838c <_dtoa_r+0x184>
 8008376:	9800      	ldr	r0, [sp, #0]
 8008378:	f7f8 f8d4 	bl	8000524 <__aeabi_i2d>
 800837c:	4632      	mov	r2, r6
 800837e:	463b      	mov	r3, r7
 8008380:	f7f8 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008384:	b910      	cbnz	r0, 800838c <_dtoa_r+0x184>
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	3b01      	subs	r3, #1
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	2b16      	cmp	r3, #22
 8008390:	d85a      	bhi.n	8008448 <_dtoa_r+0x240>
 8008392:	9a00      	ldr	r2, [sp, #0]
 8008394:	4b57      	ldr	r3, [pc, #348]	; (80084f4 <_dtoa_r+0x2ec>)
 8008396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	ec51 0b19 	vmov	r0, r1, d9
 80083a2:	f7f8 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d050      	beq.n	800844c <_dtoa_r+0x244>
 80083aa:	9b00      	ldr	r3, [sp, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b6:	1b5d      	subs	r5, r3, r5
 80083b8:	1e6b      	subs	r3, r5, #1
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	bf45      	ittet	mi
 80083be:	f1c5 0301 	rsbmi	r3, r5, #1
 80083c2:	9304      	strmi	r3, [sp, #16]
 80083c4:	2300      	movpl	r3, #0
 80083c6:	2300      	movmi	r3, #0
 80083c8:	bf4c      	ite	mi
 80083ca:	9305      	strmi	r3, [sp, #20]
 80083cc:	9304      	strpl	r3, [sp, #16]
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	db3d      	blt.n	8008450 <_dtoa_r+0x248>
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	9a00      	ldr	r2, [sp, #0]
 80083d8:	920a      	str	r2, [sp, #40]	; 0x28
 80083da:	4413      	add	r3, r2
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	2300      	movs	r3, #0
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	9b06      	ldr	r3, [sp, #24]
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	f200 8089 	bhi.w	80084fc <_dtoa_r+0x2f4>
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	bfc4      	itt	gt
 80083ee:	3b04      	subgt	r3, #4
 80083f0:	9306      	strgt	r3, [sp, #24]
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	f1a3 0302 	sub.w	r3, r3, #2
 80083f8:	bfcc      	ite	gt
 80083fa:	2500      	movgt	r5, #0
 80083fc:	2501      	movle	r5, #1
 80083fe:	2b03      	cmp	r3, #3
 8008400:	f200 8087 	bhi.w	8008512 <_dtoa_r+0x30a>
 8008404:	e8df f003 	tbb	[pc, r3]
 8008408:	59383a2d 	.word	0x59383a2d
 800840c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008410:	441d      	add	r5, r3
 8008412:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008416:	2b20      	cmp	r3, #32
 8008418:	bfc1      	itttt	gt
 800841a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800841e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008422:	fa0b f303 	lslgt.w	r3, fp, r3
 8008426:	fa26 f000 	lsrgt.w	r0, r6, r0
 800842a:	bfda      	itte	le
 800842c:	f1c3 0320 	rsble	r3, r3, #32
 8008430:	fa06 f003 	lslle.w	r0, r6, r3
 8008434:	4318      	orrgt	r0, r3
 8008436:	f7f8 f865 	bl	8000504 <__aeabi_ui2d>
 800843a:	2301      	movs	r3, #1
 800843c:	4606      	mov	r6, r0
 800843e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008442:	3d01      	subs	r5, #1
 8008444:	930e      	str	r3, [sp, #56]	; 0x38
 8008446:	e76a      	b.n	800831e <_dtoa_r+0x116>
 8008448:	2301      	movs	r3, #1
 800844a:	e7b2      	b.n	80083b2 <_dtoa_r+0x1aa>
 800844c:	900b      	str	r0, [sp, #44]	; 0x2c
 800844e:	e7b1      	b.n	80083b4 <_dtoa_r+0x1ac>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	9a00      	ldr	r2, [sp, #0]
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	4253      	negs	r3, r2
 800845a:	9307      	str	r3, [sp, #28]
 800845c:	2300      	movs	r3, #0
 800845e:	930a      	str	r3, [sp, #40]	; 0x28
 8008460:	e7bf      	b.n	80083e2 <_dtoa_r+0x1da>
 8008462:	2300      	movs	r3, #0
 8008464:	9308      	str	r3, [sp, #32]
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc55      	bgt.n	8008518 <_dtoa_r+0x310>
 800846c:	2301      	movs	r3, #1
 800846e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008472:	461a      	mov	r2, r3
 8008474:	9209      	str	r2, [sp, #36]	; 0x24
 8008476:	e00c      	b.n	8008492 <_dtoa_r+0x28a>
 8008478:	2301      	movs	r3, #1
 800847a:	e7f3      	b.n	8008464 <_dtoa_r+0x25c>
 800847c:	2300      	movs	r3, #0
 800847e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008480:	9308      	str	r3, [sp, #32]
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	4413      	add	r3, r2
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	3301      	adds	r3, #1
 800848a:	2b01      	cmp	r3, #1
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	bfb8      	it	lt
 8008490:	2301      	movlt	r3, #1
 8008492:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008494:	2200      	movs	r2, #0
 8008496:	6042      	str	r2, [r0, #4]
 8008498:	2204      	movs	r2, #4
 800849a:	f102 0614 	add.w	r6, r2, #20
 800849e:	429e      	cmp	r6, r3
 80084a0:	6841      	ldr	r1, [r0, #4]
 80084a2:	d93d      	bls.n	8008520 <_dtoa_r+0x318>
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fca9 	bl	8008dfc <_Balloc>
 80084aa:	9001      	str	r0, [sp, #4]
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d13b      	bne.n	8008528 <_dtoa_r+0x320>
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <_dtoa_r+0x2f0>)
 80084b2:	4602      	mov	r2, r0
 80084b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084b8:	e6c0      	b.n	800823c <_dtoa_r+0x34>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e7df      	b.n	800847e <_dtoa_r+0x276>
 80084be:	bf00      	nop
 80084c0:	636f4361 	.word	0x636f4361
 80084c4:	3fd287a7 	.word	0x3fd287a7
 80084c8:	8b60c8b3 	.word	0x8b60c8b3
 80084cc:	3fc68a28 	.word	0x3fc68a28
 80084d0:	509f79fb 	.word	0x509f79fb
 80084d4:	3fd34413 	.word	0x3fd34413
 80084d8:	0800a321 	.word	0x0800a321
 80084dc:	0800a338 	.word	0x0800a338
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	0800a31d 	.word	0x0800a31d
 80084e8:	0800a314 	.word	0x0800a314
 80084ec:	0800a2f1 	.word	0x0800a2f1
 80084f0:	3ff80000 	.word	0x3ff80000
 80084f4:	0800a428 	.word	0x0800a428
 80084f8:	0800a393 	.word	0x0800a393
 80084fc:	2501      	movs	r5, #1
 80084fe:	2300      	movs	r3, #0
 8008500:	9306      	str	r3, [sp, #24]
 8008502:	9508      	str	r5, [sp, #32]
 8008504:	f04f 33ff 	mov.w	r3, #4294967295
 8008508:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	2312      	movs	r3, #18
 8008510:	e7b0      	b.n	8008474 <_dtoa_r+0x26c>
 8008512:	2301      	movs	r3, #1
 8008514:	9308      	str	r3, [sp, #32]
 8008516:	e7f5      	b.n	8008504 <_dtoa_r+0x2fc>
 8008518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800851e:	e7b8      	b.n	8008492 <_dtoa_r+0x28a>
 8008520:	3101      	adds	r1, #1
 8008522:	6041      	str	r1, [r0, #4]
 8008524:	0052      	lsls	r2, r2, #1
 8008526:	e7b8      	b.n	800849a <_dtoa_r+0x292>
 8008528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800852a:	9a01      	ldr	r2, [sp, #4]
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	2b0e      	cmp	r3, #14
 8008532:	f200 809d 	bhi.w	8008670 <_dtoa_r+0x468>
 8008536:	2d00      	cmp	r5, #0
 8008538:	f000 809a 	beq.w	8008670 <_dtoa_r+0x468>
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	dd32      	ble.n	80085a8 <_dtoa_r+0x3a0>
 8008542:	4ab7      	ldr	r2, [pc, #732]	; (8008820 <_dtoa_r+0x618>)
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800854c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	05d8      	lsls	r0, r3, #23
 8008554:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008558:	d516      	bpl.n	8008588 <_dtoa_r+0x380>
 800855a:	4bb2      	ldr	r3, [pc, #712]	; (8008824 <_dtoa_r+0x61c>)
 800855c:	ec51 0b19 	vmov	r0, r1, d9
 8008560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008564:	f7f8 f972 	bl	800084c <__aeabi_ddiv>
 8008568:	f007 070f 	and.w	r7, r7, #15
 800856c:	4682      	mov	sl, r0
 800856e:	468b      	mov	fp, r1
 8008570:	2503      	movs	r5, #3
 8008572:	4eac      	ldr	r6, [pc, #688]	; (8008824 <_dtoa_r+0x61c>)
 8008574:	b957      	cbnz	r7, 800858c <_dtoa_r+0x384>
 8008576:	4642      	mov	r2, r8
 8008578:	464b      	mov	r3, r9
 800857a:	4650      	mov	r0, sl
 800857c:	4659      	mov	r1, fp
 800857e:	f7f8 f965 	bl	800084c <__aeabi_ddiv>
 8008582:	4682      	mov	sl, r0
 8008584:	468b      	mov	fp, r1
 8008586:	e028      	b.n	80085da <_dtoa_r+0x3d2>
 8008588:	2502      	movs	r5, #2
 800858a:	e7f2      	b.n	8008572 <_dtoa_r+0x36a>
 800858c:	07f9      	lsls	r1, r7, #31
 800858e:	d508      	bpl.n	80085a2 <_dtoa_r+0x39a>
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	3501      	adds	r5, #1
 800859e:	4680      	mov	r8, r0
 80085a0:	4689      	mov	r9, r1
 80085a2:	107f      	asrs	r7, r7, #1
 80085a4:	3608      	adds	r6, #8
 80085a6:	e7e5      	b.n	8008574 <_dtoa_r+0x36c>
 80085a8:	f000 809b 	beq.w	80086e2 <_dtoa_r+0x4da>
 80085ac:	9b00      	ldr	r3, [sp, #0]
 80085ae:	4f9d      	ldr	r7, [pc, #628]	; (8008824 <_dtoa_r+0x61c>)
 80085b0:	425e      	negs	r6, r3
 80085b2:	4b9b      	ldr	r3, [pc, #620]	; (8008820 <_dtoa_r+0x618>)
 80085b4:	f006 020f 	and.w	r2, r6, #15
 80085b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	ec51 0b19 	vmov	r0, r1, d9
 80085c4:	f7f8 f818 	bl	80005f8 <__aeabi_dmul>
 80085c8:	1136      	asrs	r6, r6, #4
 80085ca:	4682      	mov	sl, r0
 80085cc:	468b      	mov	fp, r1
 80085ce:	2300      	movs	r3, #0
 80085d0:	2502      	movs	r5, #2
 80085d2:	2e00      	cmp	r6, #0
 80085d4:	d17a      	bne.n	80086cc <_dtoa_r+0x4c4>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1d3      	bne.n	8008582 <_dtoa_r+0x37a>
 80085da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8082 	beq.w	80086e6 <_dtoa_r+0x4de>
 80085e2:	4b91      	ldr	r3, [pc, #580]	; (8008828 <_dtoa_r+0x620>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	4650      	mov	r0, sl
 80085e8:	4659      	mov	r1, fp
 80085ea:	f7f8 fa77 	bl	8000adc <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d079      	beq.n	80086e6 <_dtoa_r+0x4de>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d076      	beq.n	80086e6 <_dtoa_r+0x4de>
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	dd36      	ble.n	800866c <_dtoa_r+0x464>
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	4650      	mov	r0, sl
 8008602:	4659      	mov	r1, fp
 8008604:	1e5f      	subs	r7, r3, #1
 8008606:	2200      	movs	r2, #0
 8008608:	4b88      	ldr	r3, [pc, #544]	; (800882c <_dtoa_r+0x624>)
 800860a:	f7f7 fff5 	bl	80005f8 <__aeabi_dmul>
 800860e:	9e02      	ldr	r6, [sp, #8]
 8008610:	4682      	mov	sl, r0
 8008612:	468b      	mov	fp, r1
 8008614:	3501      	adds	r5, #1
 8008616:	4628      	mov	r0, r5
 8008618:	f7f7 ff84 	bl	8000524 <__aeabi_i2d>
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	f7f7 ffea 	bl	80005f8 <__aeabi_dmul>
 8008624:	4b82      	ldr	r3, [pc, #520]	; (8008830 <_dtoa_r+0x628>)
 8008626:	2200      	movs	r2, #0
 8008628:	f7f7 fe30 	bl	800028c <__adddf3>
 800862c:	46d0      	mov	r8, sl
 800862e:	46d9      	mov	r9, fp
 8008630:	4682      	mov	sl, r0
 8008632:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008636:	2e00      	cmp	r6, #0
 8008638:	d158      	bne.n	80086ec <_dtoa_r+0x4e4>
 800863a:	4b7e      	ldr	r3, [pc, #504]	; (8008834 <_dtoa_r+0x62c>)
 800863c:	2200      	movs	r2, #0
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	f7f7 fe21 	bl	8000288 <__aeabi_dsub>
 8008646:	4652      	mov	r2, sl
 8008648:	465b      	mov	r3, fp
 800864a:	4680      	mov	r8, r0
 800864c:	4689      	mov	r9, r1
 800864e:	f7f8 fa63 	bl	8000b18 <__aeabi_dcmpgt>
 8008652:	2800      	cmp	r0, #0
 8008654:	f040 8295 	bne.w	8008b82 <_dtoa_r+0x97a>
 8008658:	4652      	mov	r2, sl
 800865a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800865e:	4640      	mov	r0, r8
 8008660:	4649      	mov	r1, r9
 8008662:	f7f8 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 8289 	bne.w	8008b7e <_dtoa_r+0x976>
 800866c:	ec5b ab19 	vmov	sl, fp, d9
 8008670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008672:	2b00      	cmp	r3, #0
 8008674:	f2c0 8148 	blt.w	8008908 <_dtoa_r+0x700>
 8008678:	9a00      	ldr	r2, [sp, #0]
 800867a:	2a0e      	cmp	r2, #14
 800867c:	f300 8144 	bgt.w	8008908 <_dtoa_r+0x700>
 8008680:	4b67      	ldr	r3, [pc, #412]	; (8008820 <_dtoa_r+0x618>)
 8008682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800868a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	f280 80d5 	bge.w	800883c <_dtoa_r+0x634>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f300 80d1 	bgt.w	800883c <_dtoa_r+0x634>
 800869a:	f040 826f 	bne.w	8008b7c <_dtoa_r+0x974>
 800869e:	4b65      	ldr	r3, [pc, #404]	; (8008834 <_dtoa_r+0x62c>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	f7f8 fa29 	bl	8000b04 <__aeabi_dcmpge>
 80086b2:	9e03      	ldr	r6, [sp, #12]
 80086b4:	4637      	mov	r7, r6
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f040 8245 	bne.w	8008b46 <_dtoa_r+0x93e>
 80086bc:	9d01      	ldr	r5, [sp, #4]
 80086be:	2331      	movs	r3, #49	; 0x31
 80086c0:	f805 3b01 	strb.w	r3, [r5], #1
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	e240      	b.n	8008b4e <_dtoa_r+0x946>
 80086cc:	07f2      	lsls	r2, r6, #31
 80086ce:	d505      	bpl.n	80086dc <_dtoa_r+0x4d4>
 80086d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d4:	f7f7 ff90 	bl	80005f8 <__aeabi_dmul>
 80086d8:	3501      	adds	r5, #1
 80086da:	2301      	movs	r3, #1
 80086dc:	1076      	asrs	r6, r6, #1
 80086de:	3708      	adds	r7, #8
 80086e0:	e777      	b.n	80085d2 <_dtoa_r+0x3ca>
 80086e2:	2502      	movs	r5, #2
 80086e4:	e779      	b.n	80085da <_dtoa_r+0x3d2>
 80086e6:	9f00      	ldr	r7, [sp, #0]
 80086e8:	9e03      	ldr	r6, [sp, #12]
 80086ea:	e794      	b.n	8008616 <_dtoa_r+0x40e>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	4b4c      	ldr	r3, [pc, #304]	; (8008820 <_dtoa_r+0x618>)
 80086f0:	4431      	add	r1, r6
 80086f2:	910d      	str	r1, [sp, #52]	; 0x34
 80086f4:	9908      	ldr	r1, [sp, #32]
 80086f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086fe:	2900      	cmp	r1, #0
 8008700:	d043      	beq.n	800878a <_dtoa_r+0x582>
 8008702:	494d      	ldr	r1, [pc, #308]	; (8008838 <_dtoa_r+0x630>)
 8008704:	2000      	movs	r0, #0
 8008706:	f7f8 f8a1 	bl	800084c <__aeabi_ddiv>
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	f7f7 fdbb 	bl	8000288 <__aeabi_dsub>
 8008712:	9d01      	ldr	r5, [sp, #4]
 8008714:	4682      	mov	sl, r0
 8008716:	468b      	mov	fp, r1
 8008718:	4649      	mov	r1, r9
 800871a:	4640      	mov	r0, r8
 800871c:	f7f8 fa1c 	bl	8000b58 <__aeabi_d2iz>
 8008720:	4606      	mov	r6, r0
 8008722:	f7f7 feff 	bl	8000524 <__aeabi_i2d>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4640      	mov	r0, r8
 800872c:	4649      	mov	r1, r9
 800872e:	f7f7 fdab 	bl	8000288 <__aeabi_dsub>
 8008732:	3630      	adds	r6, #48	; 0x30
 8008734:	f805 6b01 	strb.w	r6, [r5], #1
 8008738:	4652      	mov	r2, sl
 800873a:	465b      	mov	r3, fp
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	2800      	cmp	r0, #0
 8008746:	d163      	bne.n	8008810 <_dtoa_r+0x608>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	4936      	ldr	r1, [pc, #216]	; (8008828 <_dtoa_r+0x620>)
 800874e:	2000      	movs	r0, #0
 8008750:	f7f7 fd9a 	bl	8000288 <__aeabi_dsub>
 8008754:	4652      	mov	r2, sl
 8008756:	465b      	mov	r3, fp
 8008758:	f7f8 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800875c:	2800      	cmp	r0, #0
 800875e:	f040 80b5 	bne.w	80088cc <_dtoa_r+0x6c4>
 8008762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008764:	429d      	cmp	r5, r3
 8008766:	d081      	beq.n	800866c <_dtoa_r+0x464>
 8008768:	4b30      	ldr	r3, [pc, #192]	; (800882c <_dtoa_r+0x624>)
 800876a:	2200      	movs	r2, #0
 800876c:	4650      	mov	r0, sl
 800876e:	4659      	mov	r1, fp
 8008770:	f7f7 ff42 	bl	80005f8 <__aeabi_dmul>
 8008774:	4b2d      	ldr	r3, [pc, #180]	; (800882c <_dtoa_r+0x624>)
 8008776:	4682      	mov	sl, r0
 8008778:	468b      	mov	fp, r1
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	2200      	movs	r2, #0
 8008780:	f7f7 ff3a 	bl	80005f8 <__aeabi_dmul>
 8008784:	4680      	mov	r8, r0
 8008786:	4689      	mov	r9, r1
 8008788:	e7c6      	b.n	8008718 <_dtoa_r+0x510>
 800878a:	4650      	mov	r0, sl
 800878c:	4659      	mov	r1, fp
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008794:	9d01      	ldr	r5, [sp, #4]
 8008796:	930f      	str	r3, [sp, #60]	; 0x3c
 8008798:	4682      	mov	sl, r0
 800879a:	468b      	mov	fp, r1
 800879c:	4649      	mov	r1, r9
 800879e:	4640      	mov	r0, r8
 80087a0:	f7f8 f9da 	bl	8000b58 <__aeabi_d2iz>
 80087a4:	4606      	mov	r6, r0
 80087a6:	f7f7 febd 	bl	8000524 <__aeabi_i2d>
 80087aa:	3630      	adds	r6, #48	; 0x30
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	f7f7 fd68 	bl	8000288 <__aeabi_dsub>
 80087b8:	f805 6b01 	strb.w	r6, [r5], #1
 80087bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087be:	429d      	cmp	r5, r3
 80087c0:	4680      	mov	r8, r0
 80087c2:	4689      	mov	r9, r1
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	d124      	bne.n	8008814 <_dtoa_r+0x60c>
 80087ca:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <_dtoa_r+0x630>)
 80087cc:	4650      	mov	r0, sl
 80087ce:	4659      	mov	r1, fp
 80087d0:	f7f7 fd5c 	bl	800028c <__adddf3>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	f7f8 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d173      	bne.n	80088cc <_dtoa_r+0x6c4>
 80087e4:	4652      	mov	r2, sl
 80087e6:	465b      	mov	r3, fp
 80087e8:	4913      	ldr	r1, [pc, #76]	; (8008838 <_dtoa_r+0x630>)
 80087ea:	2000      	movs	r0, #0
 80087ec:	f7f7 fd4c 	bl	8000288 <__aeabi_dsub>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f8 f970 	bl	8000adc <__aeabi_dcmplt>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	f43f af35 	beq.w	800866c <_dtoa_r+0x464>
 8008802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008804:	1e6b      	subs	r3, r5, #1
 8008806:	930f      	str	r3, [sp, #60]	; 0x3c
 8008808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800880c:	2b30      	cmp	r3, #48	; 0x30
 800880e:	d0f8      	beq.n	8008802 <_dtoa_r+0x5fa>
 8008810:	9700      	str	r7, [sp, #0]
 8008812:	e049      	b.n	80088a8 <_dtoa_r+0x6a0>
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <_dtoa_r+0x624>)
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	4680      	mov	r8, r0
 800881c:	4689      	mov	r9, r1
 800881e:	e7bd      	b.n	800879c <_dtoa_r+0x594>
 8008820:	0800a428 	.word	0x0800a428
 8008824:	0800a400 	.word	0x0800a400
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	40240000 	.word	0x40240000
 8008830:	401c0000 	.word	0x401c0000
 8008834:	40140000 	.word	0x40140000
 8008838:	3fe00000 	.word	0x3fe00000
 800883c:	9d01      	ldr	r5, [sp, #4]
 800883e:	4656      	mov	r6, sl
 8008840:	465f      	mov	r7, fp
 8008842:	4642      	mov	r2, r8
 8008844:	464b      	mov	r3, r9
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 ffff 	bl	800084c <__aeabi_ddiv>
 800884e:	f7f8 f983 	bl	8000b58 <__aeabi_d2iz>
 8008852:	4682      	mov	sl, r0
 8008854:	f7f7 fe66 	bl	8000524 <__aeabi_i2d>
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	f7f7 fecc 	bl	80005f8 <__aeabi_dmul>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4630      	mov	r0, r6
 8008866:	4639      	mov	r1, r7
 8008868:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800886c:	f7f7 fd0c 	bl	8000288 <__aeabi_dsub>
 8008870:	f805 6b01 	strb.w	r6, [r5], #1
 8008874:	9e01      	ldr	r6, [sp, #4]
 8008876:	9f03      	ldr	r7, [sp, #12]
 8008878:	1bae      	subs	r6, r5, r6
 800887a:	42b7      	cmp	r7, r6
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	d135      	bne.n	80088ee <_dtoa_r+0x6e6>
 8008882:	f7f7 fd03 	bl	800028c <__adddf3>
 8008886:	4642      	mov	r2, r8
 8008888:	464b      	mov	r3, r9
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	f7f8 f943 	bl	8000b18 <__aeabi_dcmpgt>
 8008892:	b9d0      	cbnz	r0, 80088ca <_dtoa_r+0x6c2>
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f8 f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80088a0:	b110      	cbz	r0, 80088a8 <_dtoa_r+0x6a0>
 80088a2:	f01a 0f01 	tst.w	sl, #1
 80088a6:	d110      	bne.n	80088ca <_dtoa_r+0x6c2>
 80088a8:	4620      	mov	r0, r4
 80088aa:	ee18 1a10 	vmov	r1, s16
 80088ae:	f000 fae5 	bl	8008e7c <_Bfree>
 80088b2:	2300      	movs	r3, #0
 80088b4:	9800      	ldr	r0, [sp, #0]
 80088b6:	702b      	strb	r3, [r5, #0]
 80088b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ba:	3001      	adds	r0, #1
 80088bc:	6018      	str	r0, [r3, #0]
 80088be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f43f acf1 	beq.w	80082a8 <_dtoa_r+0xa0>
 80088c6:	601d      	str	r5, [r3, #0]
 80088c8:	e4ee      	b.n	80082a8 <_dtoa_r+0xa0>
 80088ca:	9f00      	ldr	r7, [sp, #0]
 80088cc:	462b      	mov	r3, r5
 80088ce:	461d      	mov	r5, r3
 80088d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d4:	2a39      	cmp	r2, #57	; 0x39
 80088d6:	d106      	bne.n	80088e6 <_dtoa_r+0x6de>
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d1f7      	bne.n	80088ce <_dtoa_r+0x6c6>
 80088de:	9901      	ldr	r1, [sp, #4]
 80088e0:	2230      	movs	r2, #48	; 0x30
 80088e2:	3701      	adds	r7, #1
 80088e4:	700a      	strb	r2, [r1, #0]
 80088e6:	781a      	ldrb	r2, [r3, #0]
 80088e8:	3201      	adds	r2, #1
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	e790      	b.n	8008810 <_dtoa_r+0x608>
 80088ee:	4ba6      	ldr	r3, [pc, #664]	; (8008b88 <_dtoa_r+0x980>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	f7f8 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008902:	2800      	cmp	r0, #0
 8008904:	d09d      	beq.n	8008842 <_dtoa_r+0x63a>
 8008906:	e7cf      	b.n	80088a8 <_dtoa_r+0x6a0>
 8008908:	9a08      	ldr	r2, [sp, #32]
 800890a:	2a00      	cmp	r2, #0
 800890c:	f000 80d7 	beq.w	8008abe <_dtoa_r+0x8b6>
 8008910:	9a06      	ldr	r2, [sp, #24]
 8008912:	2a01      	cmp	r2, #1
 8008914:	f300 80ba 	bgt.w	8008a8c <_dtoa_r+0x884>
 8008918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800891a:	2a00      	cmp	r2, #0
 800891c:	f000 80b2 	beq.w	8008a84 <_dtoa_r+0x87c>
 8008920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008924:	9e07      	ldr	r6, [sp, #28]
 8008926:	9d04      	ldr	r5, [sp, #16]
 8008928:	9a04      	ldr	r2, [sp, #16]
 800892a:	441a      	add	r2, r3
 800892c:	9204      	str	r2, [sp, #16]
 800892e:	9a05      	ldr	r2, [sp, #20]
 8008930:	2101      	movs	r1, #1
 8008932:	441a      	add	r2, r3
 8008934:	4620      	mov	r0, r4
 8008936:	9205      	str	r2, [sp, #20]
 8008938:	f000 fb58 	bl	8008fec <__i2b>
 800893c:	4607      	mov	r7, r0
 800893e:	2d00      	cmp	r5, #0
 8008940:	dd0c      	ble.n	800895c <_dtoa_r+0x754>
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	dd09      	ble.n	800895c <_dtoa_r+0x754>
 8008948:	42ab      	cmp	r3, r5
 800894a:	9a04      	ldr	r2, [sp, #16]
 800894c:	bfa8      	it	ge
 800894e:	462b      	movge	r3, r5
 8008950:	1ad2      	subs	r2, r2, r3
 8008952:	9204      	str	r2, [sp, #16]
 8008954:	9a05      	ldr	r2, [sp, #20]
 8008956:	1aed      	subs	r5, r5, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	9305      	str	r3, [sp, #20]
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	b31b      	cbz	r3, 80089a8 <_dtoa_r+0x7a0>
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80af 	beq.w	8008ac6 <_dtoa_r+0x8be>
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd13      	ble.n	8008994 <_dtoa_r+0x78c>
 800896c:	4639      	mov	r1, r7
 800896e:	4632      	mov	r2, r6
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fbfb 	bl	800916c <__pow5mult>
 8008976:	ee18 2a10 	vmov	r2, s16
 800897a:	4601      	mov	r1, r0
 800897c:	4607      	mov	r7, r0
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fb4a 	bl	8009018 <__multiply>
 8008984:	ee18 1a10 	vmov	r1, s16
 8008988:	4680      	mov	r8, r0
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fa76 	bl	8008e7c <_Bfree>
 8008990:	ee08 8a10 	vmov	s16, r8
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	1b9a      	subs	r2, r3, r6
 8008998:	d006      	beq.n	80089a8 <_dtoa_r+0x7a0>
 800899a:	ee18 1a10 	vmov	r1, s16
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fbe4 	bl	800916c <__pow5mult>
 80089a4:	ee08 0a10 	vmov	s16, r0
 80089a8:	2101      	movs	r1, #1
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fb1e 	bl	8008fec <__i2b>
 80089b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	4606      	mov	r6, r0
 80089b6:	f340 8088 	ble.w	8008aca <_dtoa_r+0x8c2>
 80089ba:	461a      	mov	r2, r3
 80089bc:	4601      	mov	r1, r0
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fbd4 	bl	800916c <__pow5mult>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	4606      	mov	r6, r0
 80089ca:	f340 8081 	ble.w	8008ad0 <_dtoa_r+0x8c8>
 80089ce:	f04f 0800 	mov.w	r8, #0
 80089d2:	6933      	ldr	r3, [r6, #16]
 80089d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089d8:	6918      	ldr	r0, [r3, #16]
 80089da:	f000 fab7 	bl	8008f4c <__hi0bits>
 80089de:	f1c0 0020 	rsb	r0, r0, #32
 80089e2:	9b05      	ldr	r3, [sp, #20]
 80089e4:	4418      	add	r0, r3
 80089e6:	f010 001f 	ands.w	r0, r0, #31
 80089ea:	f000 8092 	beq.w	8008b12 <_dtoa_r+0x90a>
 80089ee:	f1c0 0320 	rsb	r3, r0, #32
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	f340 808a 	ble.w	8008b0c <_dtoa_r+0x904>
 80089f8:	f1c0 001c 	rsb	r0, r0, #28
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	4403      	add	r3, r0
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	4403      	add	r3, r0
 8008a06:	4405      	add	r5, r0
 8008a08:	9305      	str	r3, [sp, #20]
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd07      	ble.n	8008a20 <_dtoa_r+0x818>
 8008a10:	ee18 1a10 	vmov	r1, s16
 8008a14:	461a      	mov	r2, r3
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fc02 	bl	8009220 <__lshift>
 8008a1c:	ee08 0a10 	vmov	s16, r0
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd05      	ble.n	8008a32 <_dtoa_r+0x82a>
 8008a26:	4631      	mov	r1, r6
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fbf8 	bl	8009220 <__lshift>
 8008a30:	4606      	mov	r6, r0
 8008a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d06e      	beq.n	8008b16 <_dtoa_r+0x90e>
 8008a38:	ee18 0a10 	vmov	r0, s16
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	f000 fc5f 	bl	8009300 <__mcmp>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	da67      	bge.n	8008b16 <_dtoa_r+0x90e>
 8008a46:	9b00      	ldr	r3, [sp, #0]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	ee18 1a10 	vmov	r1, s16
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	220a      	movs	r2, #10
 8008a52:	2300      	movs	r3, #0
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fa33 	bl	8008ec0 <__multadd>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	ee08 0a10 	vmov	s16, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 81b1 	beq.w	8008dc8 <_dtoa_r+0xbc0>
 8008a66:	2300      	movs	r3, #0
 8008a68:	4639      	mov	r1, r7
 8008a6a:	220a      	movs	r2, #10
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fa27 	bl	8008ec0 <__multadd>
 8008a72:	9b02      	ldr	r3, [sp, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	4607      	mov	r7, r0
 8008a78:	f300 808e 	bgt.w	8008b98 <_dtoa_r+0x990>
 8008a7c:	9b06      	ldr	r3, [sp, #24]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	dc51      	bgt.n	8008b26 <_dtoa_r+0x91e>
 8008a82:	e089      	b.n	8008b98 <_dtoa_r+0x990>
 8008a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a8a:	e74b      	b.n	8008924 <_dtoa_r+0x71c>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	1e5e      	subs	r6, r3, #1
 8008a90:	9b07      	ldr	r3, [sp, #28]
 8008a92:	42b3      	cmp	r3, r6
 8008a94:	bfbf      	itttt	lt
 8008a96:	9b07      	ldrlt	r3, [sp, #28]
 8008a98:	9607      	strlt	r6, [sp, #28]
 8008a9a:	1af2      	sublt	r2, r6, r3
 8008a9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a9e:	bfb6      	itet	lt
 8008aa0:	189b      	addlt	r3, r3, r2
 8008aa2:	1b9e      	subge	r6, r3, r6
 8008aa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	bfb8      	it	lt
 8008aaa:	2600      	movlt	r6, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bfb7      	itett	lt
 8008ab0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ab4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ab8:	1a9d      	sublt	r5, r3, r2
 8008aba:	2300      	movlt	r3, #0
 8008abc:	e734      	b.n	8008928 <_dtoa_r+0x720>
 8008abe:	9e07      	ldr	r6, [sp, #28]
 8008ac0:	9d04      	ldr	r5, [sp, #16]
 8008ac2:	9f08      	ldr	r7, [sp, #32]
 8008ac4:	e73b      	b.n	800893e <_dtoa_r+0x736>
 8008ac6:	9a07      	ldr	r2, [sp, #28]
 8008ac8:	e767      	b.n	800899a <_dtoa_r+0x792>
 8008aca:	9b06      	ldr	r3, [sp, #24]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	dc18      	bgt.n	8008b02 <_dtoa_r+0x8fa>
 8008ad0:	f1ba 0f00 	cmp.w	sl, #0
 8008ad4:	d115      	bne.n	8008b02 <_dtoa_r+0x8fa>
 8008ad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ada:	b993      	cbnz	r3, 8008b02 <_dtoa_r+0x8fa>
 8008adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ae0:	0d1b      	lsrs	r3, r3, #20
 8008ae2:	051b      	lsls	r3, r3, #20
 8008ae4:	b183      	cbz	r3, 8008b08 <_dtoa_r+0x900>
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	9b05      	ldr	r3, [sp, #20]
 8008aee:	3301      	adds	r3, #1
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	f04f 0801 	mov.w	r8, #1
 8008af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f47f af6a 	bne.w	80089d2 <_dtoa_r+0x7ca>
 8008afe:	2001      	movs	r0, #1
 8008b00:	e76f      	b.n	80089e2 <_dtoa_r+0x7da>
 8008b02:	f04f 0800 	mov.w	r8, #0
 8008b06:	e7f6      	b.n	8008af6 <_dtoa_r+0x8ee>
 8008b08:	4698      	mov	r8, r3
 8008b0a:	e7f4      	b.n	8008af6 <_dtoa_r+0x8ee>
 8008b0c:	f43f af7d 	beq.w	8008a0a <_dtoa_r+0x802>
 8008b10:	4618      	mov	r0, r3
 8008b12:	301c      	adds	r0, #28
 8008b14:	e772      	b.n	80089fc <_dtoa_r+0x7f4>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dc37      	bgt.n	8008b8c <_dtoa_r+0x984>
 8008b1c:	9b06      	ldr	r3, [sp, #24]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	dd34      	ble.n	8008b8c <_dtoa_r+0x984>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	9302      	str	r3, [sp, #8]
 8008b26:	9b02      	ldr	r3, [sp, #8]
 8008b28:	b96b      	cbnz	r3, 8008b46 <_dtoa_r+0x93e>
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	2205      	movs	r2, #5
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f9c6 	bl	8008ec0 <__multadd>
 8008b34:	4601      	mov	r1, r0
 8008b36:	4606      	mov	r6, r0
 8008b38:	ee18 0a10 	vmov	r0, s16
 8008b3c:	f000 fbe0 	bl	8009300 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f73f adbb 	bgt.w	80086bc <_dtoa_r+0x4b4>
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	9d01      	ldr	r5, [sp, #4]
 8008b4a:	43db      	mvns	r3, r3
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	4631      	mov	r1, r6
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 f991 	bl	8008e7c <_Bfree>
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	f43f aea4 	beq.w	80088a8 <_dtoa_r+0x6a0>
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	d005      	beq.n	8008b72 <_dtoa_r+0x96a>
 8008b66:	45b8      	cmp	r8, r7
 8008b68:	d003      	beq.n	8008b72 <_dtoa_r+0x96a>
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 f985 	bl	8008e7c <_Bfree>
 8008b72:	4639      	mov	r1, r7
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 f981 	bl	8008e7c <_Bfree>
 8008b7a:	e695      	b.n	80088a8 <_dtoa_r+0x6a0>
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	4637      	mov	r7, r6
 8008b80:	e7e1      	b.n	8008b46 <_dtoa_r+0x93e>
 8008b82:	9700      	str	r7, [sp, #0]
 8008b84:	4637      	mov	r7, r6
 8008b86:	e599      	b.n	80086bc <_dtoa_r+0x4b4>
 8008b88:	40240000 	.word	0x40240000
 8008b8c:	9b08      	ldr	r3, [sp, #32]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80ca 	beq.w	8008d28 <_dtoa_r+0xb20>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x9a0>
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fb3d 	bl	8009220 <__lshift>
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	f1b8 0f00 	cmp.w	r8, #0
 8008bac:	d05b      	beq.n	8008c66 <_dtoa_r+0xa5e>
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f923 	bl	8008dfc <_Balloc>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	b928      	cbnz	r0, 8008bc6 <_dtoa_r+0x9be>
 8008bba:	4b87      	ldr	r3, [pc, #540]	; (8008dd8 <_dtoa_r+0xbd0>)
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bc2:	f7ff bb3b 	b.w	800823c <_dtoa_r+0x34>
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	3202      	adds	r2, #2
 8008bca:	0092      	lsls	r2, r2, #2
 8008bcc:	f107 010c 	add.w	r1, r7, #12
 8008bd0:	300c      	adds	r0, #12
 8008bd2:	f7fe fe0d 	bl	80077f0 <memcpy>
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fb20 	bl	8009220 <__lshift>
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	f103 0901 	add.w	r9, r3, #1
 8008be6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	9305      	str	r3, [sp, #20]
 8008bee:	f00a 0301 	and.w	r3, sl, #1
 8008bf2:	46b8      	mov	r8, r7
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	ee18 0a10 	vmov	r0, s16
 8008bfe:	f7ff fa77 	bl	80080f0 <quorem>
 8008c02:	4641      	mov	r1, r8
 8008c04:	9002      	str	r0, [sp, #8]
 8008c06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c0a:	ee18 0a10 	vmov	r0, s16
 8008c0e:	f000 fb77 	bl	8009300 <__mcmp>
 8008c12:	463a      	mov	r2, r7
 8008c14:	9003      	str	r0, [sp, #12]
 8008c16:	4631      	mov	r1, r6
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fb8d 	bl	8009338 <__mdiff>
 8008c1e:	68c2      	ldr	r2, [r0, #12]
 8008c20:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c24:	4605      	mov	r5, r0
 8008c26:	bb02      	cbnz	r2, 8008c6a <_dtoa_r+0xa62>
 8008c28:	4601      	mov	r1, r0
 8008c2a:	ee18 0a10 	vmov	r0, s16
 8008c2e:	f000 fb67 	bl	8009300 <__mcmp>
 8008c32:	4602      	mov	r2, r0
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	9207      	str	r2, [sp, #28]
 8008c3a:	f000 f91f 	bl	8008e7c <_Bfree>
 8008c3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c42:	ea43 0102 	orr.w	r1, r3, r2
 8008c46:	9b04      	ldr	r3, [sp, #16]
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	464d      	mov	r5, r9
 8008c4c:	d10f      	bne.n	8008c6e <_dtoa_r+0xa66>
 8008c4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c52:	d02a      	beq.n	8008caa <_dtoa_r+0xaa2>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dd02      	ble.n	8008c60 <_dtoa_r+0xa58>
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c60:	f88b a000 	strb.w	sl, [fp]
 8008c64:	e775      	b.n	8008b52 <_dtoa_r+0x94a>
 8008c66:	4638      	mov	r0, r7
 8008c68:	e7ba      	b.n	8008be0 <_dtoa_r+0x9d8>
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	e7e2      	b.n	8008c34 <_dtoa_r+0xa2c>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	db04      	blt.n	8008c7e <_dtoa_r+0xa76>
 8008c74:	9906      	ldr	r1, [sp, #24]
 8008c76:	430b      	orrs	r3, r1
 8008c78:	9904      	ldr	r1, [sp, #16]
 8008c7a:	430b      	orrs	r3, r1
 8008c7c:	d122      	bne.n	8008cc4 <_dtoa_r+0xabc>
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	ddee      	ble.n	8008c60 <_dtoa_r+0xa58>
 8008c82:	ee18 1a10 	vmov	r1, s16
 8008c86:	2201      	movs	r2, #1
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fac9 	bl	8009220 <__lshift>
 8008c8e:	4631      	mov	r1, r6
 8008c90:	ee08 0a10 	vmov	s16, r0
 8008c94:	f000 fb34 	bl	8009300 <__mcmp>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	dc03      	bgt.n	8008ca4 <_dtoa_r+0xa9c>
 8008c9c:	d1e0      	bne.n	8008c60 <_dtoa_r+0xa58>
 8008c9e:	f01a 0f01 	tst.w	sl, #1
 8008ca2:	d0dd      	beq.n	8008c60 <_dtoa_r+0xa58>
 8008ca4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ca8:	d1d7      	bne.n	8008c5a <_dtoa_r+0xa52>
 8008caa:	2339      	movs	r3, #57	; 0x39
 8008cac:	f88b 3000 	strb.w	r3, [fp]
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cba:	2a39      	cmp	r2, #57	; 0x39
 8008cbc:	d071      	beq.n	8008da2 <_dtoa_r+0xb9a>
 8008cbe:	3201      	adds	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	e746      	b.n	8008b52 <_dtoa_r+0x94a>
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	dd07      	ble.n	8008cd8 <_dtoa_r+0xad0>
 8008cc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ccc:	d0ed      	beq.n	8008caa <_dtoa_r+0xaa2>
 8008cce:	f10a 0301 	add.w	r3, sl, #1
 8008cd2:	f88b 3000 	strb.w	r3, [fp]
 8008cd6:	e73c      	b.n	8008b52 <_dtoa_r+0x94a>
 8008cd8:	9b05      	ldr	r3, [sp, #20]
 8008cda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008cde:	4599      	cmp	r9, r3
 8008ce0:	d047      	beq.n	8008d72 <_dtoa_r+0xb6a>
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	220a      	movs	r2, #10
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f8e8 	bl	8008ec0 <__multadd>
 8008cf0:	45b8      	cmp	r8, r7
 8008cf2:	ee08 0a10 	vmov	s16, r0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	f04f 020a 	mov.w	r2, #10
 8008cfe:	4641      	mov	r1, r8
 8008d00:	4620      	mov	r0, r4
 8008d02:	d106      	bne.n	8008d12 <_dtoa_r+0xb0a>
 8008d04:	f000 f8dc 	bl	8008ec0 <__multadd>
 8008d08:	4680      	mov	r8, r0
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	f109 0901 	add.w	r9, r9, #1
 8008d10:	e772      	b.n	8008bf8 <_dtoa_r+0x9f0>
 8008d12:	f000 f8d5 	bl	8008ec0 <__multadd>
 8008d16:	4639      	mov	r1, r7
 8008d18:	4680      	mov	r8, r0
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f8ce 	bl	8008ec0 <__multadd>
 8008d24:	4607      	mov	r7, r0
 8008d26:	e7f1      	b.n	8008d0c <_dtoa_r+0xb04>
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	9d01      	ldr	r5, [sp, #4]
 8008d2e:	ee18 0a10 	vmov	r0, s16
 8008d32:	4631      	mov	r1, r6
 8008d34:	f7ff f9dc 	bl	80080f0 <quorem>
 8008d38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d3c:	9b01      	ldr	r3, [sp, #4]
 8008d3e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d42:	1aea      	subs	r2, r5, r3
 8008d44:	9b02      	ldr	r3, [sp, #8]
 8008d46:	4293      	cmp	r3, r2
 8008d48:	dd09      	ble.n	8008d5e <_dtoa_r+0xb56>
 8008d4a:	ee18 1a10 	vmov	r1, s16
 8008d4e:	2300      	movs	r3, #0
 8008d50:	220a      	movs	r2, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f8b4 	bl	8008ec0 <__multadd>
 8008d58:	ee08 0a10 	vmov	s16, r0
 8008d5c:	e7e7      	b.n	8008d2e <_dtoa_r+0xb26>
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bfc8      	it	gt
 8008d64:	461d      	movgt	r5, r3
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	bfd8      	it	le
 8008d6a:	2501      	movle	r5, #1
 8008d6c:	441d      	add	r5, r3
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	ee18 1a10 	vmov	r1, s16
 8008d76:	2201      	movs	r2, #1
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 fa51 	bl	8009220 <__lshift>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	ee08 0a10 	vmov	s16, r0
 8008d84:	f000 fabc 	bl	8009300 <__mcmp>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	dc91      	bgt.n	8008cb0 <_dtoa_r+0xaa8>
 8008d8c:	d102      	bne.n	8008d94 <_dtoa_r+0xb8c>
 8008d8e:	f01a 0f01 	tst.w	sl, #1
 8008d92:	d18d      	bne.n	8008cb0 <_dtoa_r+0xaa8>
 8008d94:	462b      	mov	r3, r5
 8008d96:	461d      	mov	r5, r3
 8008d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d9c:	2a30      	cmp	r2, #48	; 0x30
 8008d9e:	d0fa      	beq.n	8008d96 <_dtoa_r+0xb8e>
 8008da0:	e6d7      	b.n	8008b52 <_dtoa_r+0x94a>
 8008da2:	9a01      	ldr	r2, [sp, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d184      	bne.n	8008cb2 <_dtoa_r+0xaaa>
 8008da8:	9b00      	ldr	r3, [sp, #0]
 8008daa:	3301      	adds	r3, #1
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	2331      	movs	r3, #49	; 0x31
 8008db0:	7013      	strb	r3, [r2, #0]
 8008db2:	e6ce      	b.n	8008b52 <_dtoa_r+0x94a>
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <_dtoa_r+0xbd4>)
 8008db6:	f7ff ba95 	b.w	80082e4 <_dtoa_r+0xdc>
 8008dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f47f aa6e 	bne.w	800829e <_dtoa_r+0x96>
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <_dtoa_r+0xbd8>)
 8008dc4:	f7ff ba8e 	b.w	80082e4 <_dtoa_r+0xdc>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dcae      	bgt.n	8008d2c <_dtoa_r+0xb24>
 8008dce:	9b06      	ldr	r3, [sp, #24]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	f73f aea8 	bgt.w	8008b26 <_dtoa_r+0x91e>
 8008dd6:	e7a9      	b.n	8008d2c <_dtoa_r+0xb24>
 8008dd8:	0800a393 	.word	0x0800a393
 8008ddc:	0800a2f0 	.word	0x0800a2f0
 8008de0:	0800a314 	.word	0x0800a314

08008de4 <_localeconv_r>:
 8008de4:	4800      	ldr	r0, [pc, #0]	; (8008de8 <_localeconv_r+0x4>)
 8008de6:	4770      	bx	lr
 8008de8:	20000164 	.word	0x20000164

08008dec <malloc>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <malloc+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f000 bc09 	b.w	8009608 <_malloc_r>
 8008df6:	bf00      	nop
 8008df8:	20000010 	.word	0x20000010

08008dfc <_Balloc>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e00:	4604      	mov	r4, r0
 8008e02:	460d      	mov	r5, r1
 8008e04:	b976      	cbnz	r6, 8008e24 <_Balloc+0x28>
 8008e06:	2010      	movs	r0, #16
 8008e08:	f7ff fff0 	bl	8008dec <malloc>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e10:	b920      	cbnz	r0, 8008e1c <_Balloc+0x20>
 8008e12:	4b18      	ldr	r3, [pc, #96]	; (8008e74 <_Balloc+0x78>)
 8008e14:	4818      	ldr	r0, [pc, #96]	; (8008e78 <_Balloc+0x7c>)
 8008e16:	2166      	movs	r1, #102	; 0x66
 8008e18:	f000 fc7a 	bl	8009710 <__assert_func>
 8008e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e20:	6006      	str	r6, [r0, #0]
 8008e22:	60c6      	str	r6, [r0, #12]
 8008e24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e26:	68f3      	ldr	r3, [r6, #12]
 8008e28:	b183      	cbz	r3, 8008e4c <_Balloc+0x50>
 8008e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e32:	b9b8      	cbnz	r0, 8008e64 <_Balloc+0x68>
 8008e34:	2101      	movs	r1, #1
 8008e36:	fa01 f605 	lsl.w	r6, r1, r5
 8008e3a:	1d72      	adds	r2, r6, #5
 8008e3c:	0092      	lsls	r2, r2, #2
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fb60 	bl	8009504 <_calloc_r>
 8008e44:	b160      	cbz	r0, 8008e60 <_Balloc+0x64>
 8008e46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e4a:	e00e      	b.n	8008e6a <_Balloc+0x6e>
 8008e4c:	2221      	movs	r2, #33	; 0x21
 8008e4e:	2104      	movs	r1, #4
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fb57 	bl	8009504 <_calloc_r>
 8008e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e58:	60f0      	str	r0, [r6, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e4      	bne.n	8008e2a <_Balloc+0x2e>
 8008e60:	2000      	movs	r0, #0
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	6802      	ldr	r2, [r0, #0]
 8008e66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e70:	e7f7      	b.n	8008e62 <_Balloc+0x66>
 8008e72:	bf00      	nop
 8008e74:	0800a321 	.word	0x0800a321
 8008e78:	0800a3a4 	.word	0x0800a3a4

08008e7c <_Bfree>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e80:	4605      	mov	r5, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	b976      	cbnz	r6, 8008ea4 <_Bfree+0x28>
 8008e86:	2010      	movs	r0, #16
 8008e88:	f7ff ffb0 	bl	8008dec <malloc>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6268      	str	r0, [r5, #36]	; 0x24
 8008e90:	b920      	cbnz	r0, 8008e9c <_Bfree+0x20>
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <_Bfree+0x3c>)
 8008e94:	4809      	ldr	r0, [pc, #36]	; (8008ebc <_Bfree+0x40>)
 8008e96:	218a      	movs	r1, #138	; 0x8a
 8008e98:	f000 fc3a 	bl	8009710 <__assert_func>
 8008e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea0:	6006      	str	r6, [r0, #0]
 8008ea2:	60c6      	str	r6, [r0, #12]
 8008ea4:	b13c      	cbz	r4, 8008eb6 <_Bfree+0x3a>
 8008ea6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ea8:	6862      	ldr	r2, [r4, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eb0:	6021      	str	r1, [r4, #0]
 8008eb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	0800a321 	.word	0x0800a321
 8008ebc:	0800a3a4 	.word	0x0800a3a4

08008ec0 <__multadd>:
 8008ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec4:	690d      	ldr	r5, [r1, #16]
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	460c      	mov	r4, r1
 8008eca:	461e      	mov	r6, r3
 8008ecc:	f101 0c14 	add.w	ip, r1, #20
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ed6:	b299      	uxth	r1, r3
 8008ed8:	fb02 6101 	mla	r1, r2, r1, r6
 8008edc:	0c1e      	lsrs	r6, r3, #16
 8008ede:	0c0b      	lsrs	r3, r1, #16
 8008ee0:	fb02 3306 	mla	r3, r2, r6, r3
 8008ee4:	b289      	uxth	r1, r1
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008eec:	4285      	cmp	r5, r0
 8008eee:	f84c 1b04 	str.w	r1, [ip], #4
 8008ef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ef6:	dcec      	bgt.n	8008ed2 <__multadd+0x12>
 8008ef8:	b30e      	cbz	r6, 8008f3e <__multadd+0x7e>
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dc19      	bgt.n	8008f34 <__multadd+0x74>
 8008f00:	6861      	ldr	r1, [r4, #4]
 8008f02:	4638      	mov	r0, r7
 8008f04:	3101      	adds	r1, #1
 8008f06:	f7ff ff79 	bl	8008dfc <_Balloc>
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	b928      	cbnz	r0, 8008f1a <__multadd+0x5a>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <__multadd+0x84>)
 8008f12:	480d      	ldr	r0, [pc, #52]	; (8008f48 <__multadd+0x88>)
 8008f14:	21b5      	movs	r1, #181	; 0xb5
 8008f16:	f000 fbfb 	bl	8009710 <__assert_func>
 8008f1a:	6922      	ldr	r2, [r4, #16]
 8008f1c:	3202      	adds	r2, #2
 8008f1e:	f104 010c 	add.w	r1, r4, #12
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	300c      	adds	r0, #12
 8008f26:	f7fe fc63 	bl	80077f0 <memcpy>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	f7ff ffa5 	bl	8008e7c <_Bfree>
 8008f32:	4644      	mov	r4, r8
 8008f34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f38:	3501      	adds	r5, #1
 8008f3a:	615e      	str	r6, [r3, #20]
 8008f3c:	6125      	str	r5, [r4, #16]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f44:	0800a393 	.word	0x0800a393
 8008f48:	0800a3a4 	.word	0x0800a3a4

08008f4c <__hi0bits>:
 8008f4c:	0c03      	lsrs	r3, r0, #16
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	b9d3      	cbnz	r3, 8008f88 <__hi0bits+0x3c>
 8008f52:	0400      	lsls	r0, r0, #16
 8008f54:	2310      	movs	r3, #16
 8008f56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f5a:	bf04      	itt	eq
 8008f5c:	0200      	lsleq	r0, r0, #8
 8008f5e:	3308      	addeq	r3, #8
 8008f60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f64:	bf04      	itt	eq
 8008f66:	0100      	lsleq	r0, r0, #4
 8008f68:	3304      	addeq	r3, #4
 8008f6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f6e:	bf04      	itt	eq
 8008f70:	0080      	lsleq	r0, r0, #2
 8008f72:	3302      	addeq	r3, #2
 8008f74:	2800      	cmp	r0, #0
 8008f76:	db05      	blt.n	8008f84 <__hi0bits+0x38>
 8008f78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f7c:	f103 0301 	add.w	r3, r3, #1
 8008f80:	bf08      	it	eq
 8008f82:	2320      	moveq	r3, #32
 8008f84:	4618      	mov	r0, r3
 8008f86:	4770      	bx	lr
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e7e4      	b.n	8008f56 <__hi0bits+0xa>

08008f8c <__lo0bits>:
 8008f8c:	6803      	ldr	r3, [r0, #0]
 8008f8e:	f013 0207 	ands.w	r2, r3, #7
 8008f92:	4601      	mov	r1, r0
 8008f94:	d00b      	beq.n	8008fae <__lo0bits+0x22>
 8008f96:	07da      	lsls	r2, r3, #31
 8008f98:	d423      	bmi.n	8008fe2 <__lo0bits+0x56>
 8008f9a:	0798      	lsls	r0, r3, #30
 8008f9c:	bf49      	itett	mi
 8008f9e:	085b      	lsrmi	r3, r3, #1
 8008fa0:	089b      	lsrpl	r3, r3, #2
 8008fa2:	2001      	movmi	r0, #1
 8008fa4:	600b      	strmi	r3, [r1, #0]
 8008fa6:	bf5c      	itt	pl
 8008fa8:	600b      	strpl	r3, [r1, #0]
 8008faa:	2002      	movpl	r0, #2
 8008fac:	4770      	bx	lr
 8008fae:	b298      	uxth	r0, r3
 8008fb0:	b9a8      	cbnz	r0, 8008fde <__lo0bits+0x52>
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	2010      	movs	r0, #16
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	b90a      	cbnz	r2, 8008fbe <__lo0bits+0x32>
 8008fba:	3008      	adds	r0, #8
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	071a      	lsls	r2, r3, #28
 8008fc0:	bf04      	itt	eq
 8008fc2:	091b      	lsreq	r3, r3, #4
 8008fc4:	3004      	addeq	r0, #4
 8008fc6:	079a      	lsls	r2, r3, #30
 8008fc8:	bf04      	itt	eq
 8008fca:	089b      	lsreq	r3, r3, #2
 8008fcc:	3002      	addeq	r0, #2
 8008fce:	07da      	lsls	r2, r3, #31
 8008fd0:	d403      	bmi.n	8008fda <__lo0bits+0x4e>
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	f100 0001 	add.w	r0, r0, #1
 8008fd8:	d005      	beq.n	8008fe6 <__lo0bits+0x5a>
 8008fda:	600b      	str	r3, [r1, #0]
 8008fdc:	4770      	bx	lr
 8008fde:	4610      	mov	r0, r2
 8008fe0:	e7e9      	b.n	8008fb6 <__lo0bits+0x2a>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	4770      	bx	lr
 8008fe6:	2020      	movs	r0, #32
 8008fe8:	4770      	bx	lr
	...

08008fec <__i2b>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	460c      	mov	r4, r1
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	f7ff ff03 	bl	8008dfc <_Balloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	b928      	cbnz	r0, 8009006 <__i2b+0x1a>
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <__i2b+0x24>)
 8008ffc:	4805      	ldr	r0, [pc, #20]	; (8009014 <__i2b+0x28>)
 8008ffe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009002:	f000 fb85 	bl	8009710 <__assert_func>
 8009006:	2301      	movs	r3, #1
 8009008:	6144      	str	r4, [r0, #20]
 800900a:	6103      	str	r3, [r0, #16]
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	0800a393 	.word	0x0800a393
 8009014:	0800a3a4 	.word	0x0800a3a4

08009018 <__multiply>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	4691      	mov	r9, r2
 800901e:	690a      	ldr	r2, [r1, #16]
 8009020:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009024:	429a      	cmp	r2, r3
 8009026:	bfb8      	it	lt
 8009028:	460b      	movlt	r3, r1
 800902a:	460c      	mov	r4, r1
 800902c:	bfbc      	itt	lt
 800902e:	464c      	movlt	r4, r9
 8009030:	4699      	movlt	r9, r3
 8009032:	6927      	ldr	r7, [r4, #16]
 8009034:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009038:	68a3      	ldr	r3, [r4, #8]
 800903a:	6861      	ldr	r1, [r4, #4]
 800903c:	eb07 060a 	add.w	r6, r7, sl
 8009040:	42b3      	cmp	r3, r6
 8009042:	b085      	sub	sp, #20
 8009044:	bfb8      	it	lt
 8009046:	3101      	addlt	r1, #1
 8009048:	f7ff fed8 	bl	8008dfc <_Balloc>
 800904c:	b930      	cbnz	r0, 800905c <__multiply+0x44>
 800904e:	4602      	mov	r2, r0
 8009050:	4b44      	ldr	r3, [pc, #272]	; (8009164 <__multiply+0x14c>)
 8009052:	4845      	ldr	r0, [pc, #276]	; (8009168 <__multiply+0x150>)
 8009054:	f240 115d 	movw	r1, #349	; 0x15d
 8009058:	f000 fb5a 	bl	8009710 <__assert_func>
 800905c:	f100 0514 	add.w	r5, r0, #20
 8009060:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009064:	462b      	mov	r3, r5
 8009066:	2200      	movs	r2, #0
 8009068:	4543      	cmp	r3, r8
 800906a:	d321      	bcc.n	80090b0 <__multiply+0x98>
 800906c:	f104 0314 	add.w	r3, r4, #20
 8009070:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009074:	f109 0314 	add.w	r3, r9, #20
 8009078:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800907c:	9202      	str	r2, [sp, #8]
 800907e:	1b3a      	subs	r2, r7, r4
 8009080:	3a15      	subs	r2, #21
 8009082:	f022 0203 	bic.w	r2, r2, #3
 8009086:	3204      	adds	r2, #4
 8009088:	f104 0115 	add.w	r1, r4, #21
 800908c:	428f      	cmp	r7, r1
 800908e:	bf38      	it	cc
 8009090:	2204      	movcc	r2, #4
 8009092:	9201      	str	r2, [sp, #4]
 8009094:	9a02      	ldr	r2, [sp, #8]
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d80c      	bhi.n	80090b6 <__multiply+0x9e>
 800909c:	2e00      	cmp	r6, #0
 800909e:	dd03      	ble.n	80090a8 <__multiply+0x90>
 80090a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d05a      	beq.n	800915e <__multiply+0x146>
 80090a8:	6106      	str	r6, [r0, #16]
 80090aa:	b005      	add	sp, #20
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b0:	f843 2b04 	str.w	r2, [r3], #4
 80090b4:	e7d8      	b.n	8009068 <__multiply+0x50>
 80090b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80090ba:	f1ba 0f00 	cmp.w	sl, #0
 80090be:	d024      	beq.n	800910a <__multiply+0xf2>
 80090c0:	f104 0e14 	add.w	lr, r4, #20
 80090c4:	46a9      	mov	r9, r5
 80090c6:	f04f 0c00 	mov.w	ip, #0
 80090ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090ce:	f8d9 1000 	ldr.w	r1, [r9]
 80090d2:	fa1f fb82 	uxth.w	fp, r2
 80090d6:	b289      	uxth	r1, r1
 80090d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80090dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090e0:	f8d9 2000 	ldr.w	r2, [r9]
 80090e4:	4461      	add	r1, ip
 80090e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80090ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090f2:	b289      	uxth	r1, r1
 80090f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090f8:	4577      	cmp	r7, lr
 80090fa:	f849 1b04 	str.w	r1, [r9], #4
 80090fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009102:	d8e2      	bhi.n	80090ca <__multiply+0xb2>
 8009104:	9a01      	ldr	r2, [sp, #4]
 8009106:	f845 c002 	str.w	ip, [r5, r2]
 800910a:	9a03      	ldr	r2, [sp, #12]
 800910c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009110:	3304      	adds	r3, #4
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	d020      	beq.n	800915a <__multiply+0x142>
 8009118:	6829      	ldr	r1, [r5, #0]
 800911a:	f104 0c14 	add.w	ip, r4, #20
 800911e:	46ae      	mov	lr, r5
 8009120:	f04f 0a00 	mov.w	sl, #0
 8009124:	f8bc b000 	ldrh.w	fp, [ip]
 8009128:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800912c:	fb09 220b 	mla	r2, r9, fp, r2
 8009130:	4492      	add	sl, r2
 8009132:	b289      	uxth	r1, r1
 8009134:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009138:	f84e 1b04 	str.w	r1, [lr], #4
 800913c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009140:	f8be 1000 	ldrh.w	r1, [lr]
 8009144:	0c12      	lsrs	r2, r2, #16
 8009146:	fb09 1102 	mla	r1, r9, r2, r1
 800914a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800914e:	4567      	cmp	r7, ip
 8009150:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009154:	d8e6      	bhi.n	8009124 <__multiply+0x10c>
 8009156:	9a01      	ldr	r2, [sp, #4]
 8009158:	50a9      	str	r1, [r5, r2]
 800915a:	3504      	adds	r5, #4
 800915c:	e79a      	b.n	8009094 <__multiply+0x7c>
 800915e:	3e01      	subs	r6, #1
 8009160:	e79c      	b.n	800909c <__multiply+0x84>
 8009162:	bf00      	nop
 8009164:	0800a393 	.word	0x0800a393
 8009168:	0800a3a4 	.word	0x0800a3a4

0800916c <__pow5mult>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	4615      	mov	r5, r2
 8009172:	f012 0203 	ands.w	r2, r2, #3
 8009176:	4606      	mov	r6, r0
 8009178:	460f      	mov	r7, r1
 800917a:	d007      	beq.n	800918c <__pow5mult+0x20>
 800917c:	4c25      	ldr	r4, [pc, #148]	; (8009214 <__pow5mult+0xa8>)
 800917e:	3a01      	subs	r2, #1
 8009180:	2300      	movs	r3, #0
 8009182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009186:	f7ff fe9b 	bl	8008ec0 <__multadd>
 800918a:	4607      	mov	r7, r0
 800918c:	10ad      	asrs	r5, r5, #2
 800918e:	d03d      	beq.n	800920c <__pow5mult+0xa0>
 8009190:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009192:	b97c      	cbnz	r4, 80091b4 <__pow5mult+0x48>
 8009194:	2010      	movs	r0, #16
 8009196:	f7ff fe29 	bl	8008dec <malloc>
 800919a:	4602      	mov	r2, r0
 800919c:	6270      	str	r0, [r6, #36]	; 0x24
 800919e:	b928      	cbnz	r0, 80091ac <__pow5mult+0x40>
 80091a0:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <__pow5mult+0xac>)
 80091a2:	481e      	ldr	r0, [pc, #120]	; (800921c <__pow5mult+0xb0>)
 80091a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091a8:	f000 fab2 	bl	8009710 <__assert_func>
 80091ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091b0:	6004      	str	r4, [r0, #0]
 80091b2:	60c4      	str	r4, [r0, #12]
 80091b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091bc:	b94c      	cbnz	r4, 80091d2 <__pow5mult+0x66>
 80091be:	f240 2171 	movw	r1, #625	; 0x271
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff12 	bl	8008fec <__i2b>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80091ce:	4604      	mov	r4, r0
 80091d0:	6003      	str	r3, [r0, #0]
 80091d2:	f04f 0900 	mov.w	r9, #0
 80091d6:	07eb      	lsls	r3, r5, #31
 80091d8:	d50a      	bpl.n	80091f0 <__pow5mult+0x84>
 80091da:	4639      	mov	r1, r7
 80091dc:	4622      	mov	r2, r4
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff ff1a 	bl	8009018 <__multiply>
 80091e4:	4639      	mov	r1, r7
 80091e6:	4680      	mov	r8, r0
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff fe47 	bl	8008e7c <_Bfree>
 80091ee:	4647      	mov	r7, r8
 80091f0:	106d      	asrs	r5, r5, #1
 80091f2:	d00b      	beq.n	800920c <__pow5mult+0xa0>
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	b938      	cbnz	r0, 8009208 <__pow5mult+0x9c>
 80091f8:	4622      	mov	r2, r4
 80091fa:	4621      	mov	r1, r4
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff ff0b 	bl	8009018 <__multiply>
 8009202:	6020      	str	r0, [r4, #0]
 8009204:	f8c0 9000 	str.w	r9, [r0]
 8009208:	4604      	mov	r4, r0
 800920a:	e7e4      	b.n	80091d6 <__pow5mult+0x6a>
 800920c:	4638      	mov	r0, r7
 800920e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009212:	bf00      	nop
 8009214:	0800a4f0 	.word	0x0800a4f0
 8009218:	0800a321 	.word	0x0800a321
 800921c:	0800a3a4 	.word	0x0800a3a4

08009220 <__lshift>:
 8009220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	460c      	mov	r4, r1
 8009226:	6849      	ldr	r1, [r1, #4]
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	4607      	mov	r7, r0
 8009232:	4691      	mov	r9, r2
 8009234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009238:	f108 0601 	add.w	r6, r8, #1
 800923c:	42b3      	cmp	r3, r6
 800923e:	db0b      	blt.n	8009258 <__lshift+0x38>
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff fddb 	bl	8008dfc <_Balloc>
 8009246:	4605      	mov	r5, r0
 8009248:	b948      	cbnz	r0, 800925e <__lshift+0x3e>
 800924a:	4602      	mov	r2, r0
 800924c:	4b2a      	ldr	r3, [pc, #168]	; (80092f8 <__lshift+0xd8>)
 800924e:	482b      	ldr	r0, [pc, #172]	; (80092fc <__lshift+0xdc>)
 8009250:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009254:	f000 fa5c 	bl	8009710 <__assert_func>
 8009258:	3101      	adds	r1, #1
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	e7ee      	b.n	800923c <__lshift+0x1c>
 800925e:	2300      	movs	r3, #0
 8009260:	f100 0114 	add.w	r1, r0, #20
 8009264:	f100 0210 	add.w	r2, r0, #16
 8009268:	4618      	mov	r0, r3
 800926a:	4553      	cmp	r3, sl
 800926c:	db37      	blt.n	80092de <__lshift+0xbe>
 800926e:	6920      	ldr	r0, [r4, #16]
 8009270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009274:	f104 0314 	add.w	r3, r4, #20
 8009278:	f019 091f 	ands.w	r9, r9, #31
 800927c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009280:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009284:	d02f      	beq.n	80092e6 <__lshift+0xc6>
 8009286:	f1c9 0e20 	rsb	lr, r9, #32
 800928a:	468a      	mov	sl, r1
 800928c:	f04f 0c00 	mov.w	ip, #0
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	fa02 f209 	lsl.w	r2, r2, r9
 8009296:	ea42 020c 	orr.w	r2, r2, ip
 800929a:	f84a 2b04 	str.w	r2, [sl], #4
 800929e:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a2:	4298      	cmp	r0, r3
 80092a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80092a8:	d8f2      	bhi.n	8009290 <__lshift+0x70>
 80092aa:	1b03      	subs	r3, r0, r4
 80092ac:	3b15      	subs	r3, #21
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	3304      	adds	r3, #4
 80092b4:	f104 0215 	add.w	r2, r4, #21
 80092b8:	4290      	cmp	r0, r2
 80092ba:	bf38      	it	cc
 80092bc:	2304      	movcc	r3, #4
 80092be:	f841 c003 	str.w	ip, [r1, r3]
 80092c2:	f1bc 0f00 	cmp.w	ip, #0
 80092c6:	d001      	beq.n	80092cc <__lshift+0xac>
 80092c8:	f108 0602 	add.w	r6, r8, #2
 80092cc:	3e01      	subs	r6, #1
 80092ce:	4638      	mov	r0, r7
 80092d0:	612e      	str	r6, [r5, #16]
 80092d2:	4621      	mov	r1, r4
 80092d4:	f7ff fdd2 	bl	8008e7c <_Bfree>
 80092d8:	4628      	mov	r0, r5
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	f842 0f04 	str.w	r0, [r2, #4]!
 80092e2:	3301      	adds	r3, #1
 80092e4:	e7c1      	b.n	800926a <__lshift+0x4a>
 80092e6:	3904      	subs	r1, #4
 80092e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80092f0:	4298      	cmp	r0, r3
 80092f2:	d8f9      	bhi.n	80092e8 <__lshift+0xc8>
 80092f4:	e7ea      	b.n	80092cc <__lshift+0xac>
 80092f6:	bf00      	nop
 80092f8:	0800a393 	.word	0x0800a393
 80092fc:	0800a3a4 	.word	0x0800a3a4

08009300 <__mcmp>:
 8009300:	b530      	push	{r4, r5, lr}
 8009302:	6902      	ldr	r2, [r0, #16]
 8009304:	690c      	ldr	r4, [r1, #16]
 8009306:	1b12      	subs	r2, r2, r4
 8009308:	d10e      	bne.n	8009328 <__mcmp+0x28>
 800930a:	f100 0314 	add.w	r3, r0, #20
 800930e:	3114      	adds	r1, #20
 8009310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800931c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009320:	42a5      	cmp	r5, r4
 8009322:	d003      	beq.n	800932c <__mcmp+0x2c>
 8009324:	d305      	bcc.n	8009332 <__mcmp+0x32>
 8009326:	2201      	movs	r2, #1
 8009328:	4610      	mov	r0, r2
 800932a:	bd30      	pop	{r4, r5, pc}
 800932c:	4283      	cmp	r3, r0
 800932e:	d3f3      	bcc.n	8009318 <__mcmp+0x18>
 8009330:	e7fa      	b.n	8009328 <__mcmp+0x28>
 8009332:	f04f 32ff 	mov.w	r2, #4294967295
 8009336:	e7f7      	b.n	8009328 <__mcmp+0x28>

08009338 <__mdiff>:
 8009338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	460c      	mov	r4, r1
 800933e:	4606      	mov	r6, r0
 8009340:	4611      	mov	r1, r2
 8009342:	4620      	mov	r0, r4
 8009344:	4690      	mov	r8, r2
 8009346:	f7ff ffdb 	bl	8009300 <__mcmp>
 800934a:	1e05      	subs	r5, r0, #0
 800934c:	d110      	bne.n	8009370 <__mdiff+0x38>
 800934e:	4629      	mov	r1, r5
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff fd53 	bl	8008dfc <_Balloc>
 8009356:	b930      	cbnz	r0, 8009366 <__mdiff+0x2e>
 8009358:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <__mdiff+0x10c>)
 800935a:	4602      	mov	r2, r0
 800935c:	f240 2132 	movw	r1, #562	; 0x232
 8009360:	4839      	ldr	r0, [pc, #228]	; (8009448 <__mdiff+0x110>)
 8009362:	f000 f9d5 	bl	8009710 <__assert_func>
 8009366:	2301      	movs	r3, #1
 8009368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800936c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009370:	bfa4      	itt	ge
 8009372:	4643      	movge	r3, r8
 8009374:	46a0      	movge	r8, r4
 8009376:	4630      	mov	r0, r6
 8009378:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800937c:	bfa6      	itte	ge
 800937e:	461c      	movge	r4, r3
 8009380:	2500      	movge	r5, #0
 8009382:	2501      	movlt	r5, #1
 8009384:	f7ff fd3a 	bl	8008dfc <_Balloc>
 8009388:	b920      	cbnz	r0, 8009394 <__mdiff+0x5c>
 800938a:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <__mdiff+0x10c>)
 800938c:	4602      	mov	r2, r0
 800938e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009392:	e7e5      	b.n	8009360 <__mdiff+0x28>
 8009394:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009398:	6926      	ldr	r6, [r4, #16]
 800939a:	60c5      	str	r5, [r0, #12]
 800939c:	f104 0914 	add.w	r9, r4, #20
 80093a0:	f108 0514 	add.w	r5, r8, #20
 80093a4:	f100 0e14 	add.w	lr, r0, #20
 80093a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80093ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093b0:	f108 0210 	add.w	r2, r8, #16
 80093b4:	46f2      	mov	sl, lr
 80093b6:	2100      	movs	r1, #0
 80093b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80093bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093c0:	fa1f f883 	uxth.w	r8, r3
 80093c4:	fa11 f18b 	uxtah	r1, r1, fp
 80093c8:	0c1b      	lsrs	r3, r3, #16
 80093ca:	eba1 0808 	sub.w	r8, r1, r8
 80093ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093d6:	fa1f f888 	uxth.w	r8, r8
 80093da:	1419      	asrs	r1, r3, #16
 80093dc:	454e      	cmp	r6, r9
 80093de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093e2:	f84a 3b04 	str.w	r3, [sl], #4
 80093e6:	d8e7      	bhi.n	80093b8 <__mdiff+0x80>
 80093e8:	1b33      	subs	r3, r6, r4
 80093ea:	3b15      	subs	r3, #21
 80093ec:	f023 0303 	bic.w	r3, r3, #3
 80093f0:	3304      	adds	r3, #4
 80093f2:	3415      	adds	r4, #21
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	bf38      	it	cc
 80093f8:	2304      	movcc	r3, #4
 80093fa:	441d      	add	r5, r3
 80093fc:	4473      	add	r3, lr
 80093fe:	469e      	mov	lr, r3
 8009400:	462e      	mov	r6, r5
 8009402:	4566      	cmp	r6, ip
 8009404:	d30e      	bcc.n	8009424 <__mdiff+0xec>
 8009406:	f10c 0203 	add.w	r2, ip, #3
 800940a:	1b52      	subs	r2, r2, r5
 800940c:	f022 0203 	bic.w	r2, r2, #3
 8009410:	3d03      	subs	r5, #3
 8009412:	45ac      	cmp	ip, r5
 8009414:	bf38      	it	cc
 8009416:	2200      	movcc	r2, #0
 8009418:	441a      	add	r2, r3
 800941a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800941e:	b17b      	cbz	r3, 8009440 <__mdiff+0x108>
 8009420:	6107      	str	r7, [r0, #16]
 8009422:	e7a3      	b.n	800936c <__mdiff+0x34>
 8009424:	f856 8b04 	ldr.w	r8, [r6], #4
 8009428:	fa11 f288 	uxtah	r2, r1, r8
 800942c:	1414      	asrs	r4, r2, #16
 800942e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009432:	b292      	uxth	r2, r2
 8009434:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009438:	f84e 2b04 	str.w	r2, [lr], #4
 800943c:	1421      	asrs	r1, r4, #16
 800943e:	e7e0      	b.n	8009402 <__mdiff+0xca>
 8009440:	3f01      	subs	r7, #1
 8009442:	e7ea      	b.n	800941a <__mdiff+0xe2>
 8009444:	0800a393 	.word	0x0800a393
 8009448:	0800a3a4 	.word	0x0800a3a4

0800944c <__d2b>:
 800944c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009450:	4689      	mov	r9, r1
 8009452:	2101      	movs	r1, #1
 8009454:	ec57 6b10 	vmov	r6, r7, d0
 8009458:	4690      	mov	r8, r2
 800945a:	f7ff fccf 	bl	8008dfc <_Balloc>
 800945e:	4604      	mov	r4, r0
 8009460:	b930      	cbnz	r0, 8009470 <__d2b+0x24>
 8009462:	4602      	mov	r2, r0
 8009464:	4b25      	ldr	r3, [pc, #148]	; (80094fc <__d2b+0xb0>)
 8009466:	4826      	ldr	r0, [pc, #152]	; (8009500 <__d2b+0xb4>)
 8009468:	f240 310a 	movw	r1, #778	; 0x30a
 800946c:	f000 f950 	bl	8009710 <__assert_func>
 8009470:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009474:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009478:	bb35      	cbnz	r5, 80094c8 <__d2b+0x7c>
 800947a:	2e00      	cmp	r6, #0
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	d028      	beq.n	80094d2 <__d2b+0x86>
 8009480:	4668      	mov	r0, sp
 8009482:	9600      	str	r6, [sp, #0]
 8009484:	f7ff fd82 	bl	8008f8c <__lo0bits>
 8009488:	9900      	ldr	r1, [sp, #0]
 800948a:	b300      	cbz	r0, 80094ce <__d2b+0x82>
 800948c:	9a01      	ldr	r2, [sp, #4]
 800948e:	f1c0 0320 	rsb	r3, r0, #32
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	430b      	orrs	r3, r1
 8009498:	40c2      	lsrs	r2, r0
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	9201      	str	r2, [sp, #4]
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	61a3      	str	r3, [r4, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf14      	ite	ne
 80094a6:	2202      	movne	r2, #2
 80094a8:	2201      	moveq	r2, #1
 80094aa:	6122      	str	r2, [r4, #16]
 80094ac:	b1d5      	cbz	r5, 80094e4 <__d2b+0x98>
 80094ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094b2:	4405      	add	r5, r0
 80094b4:	f8c9 5000 	str.w	r5, [r9]
 80094b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094bc:	f8c8 0000 	str.w	r0, [r8]
 80094c0:	4620      	mov	r0, r4
 80094c2:	b003      	add	sp, #12
 80094c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094cc:	e7d5      	b.n	800947a <__d2b+0x2e>
 80094ce:	6161      	str	r1, [r4, #20]
 80094d0:	e7e5      	b.n	800949e <__d2b+0x52>
 80094d2:	a801      	add	r0, sp, #4
 80094d4:	f7ff fd5a 	bl	8008f8c <__lo0bits>
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	2201      	movs	r2, #1
 80094de:	6122      	str	r2, [r4, #16]
 80094e0:	3020      	adds	r0, #32
 80094e2:	e7e3      	b.n	80094ac <__d2b+0x60>
 80094e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094ec:	f8c9 0000 	str.w	r0, [r9]
 80094f0:	6918      	ldr	r0, [r3, #16]
 80094f2:	f7ff fd2b 	bl	8008f4c <__hi0bits>
 80094f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094fa:	e7df      	b.n	80094bc <__d2b+0x70>
 80094fc:	0800a393 	.word	0x0800a393
 8009500:	0800a3a4 	.word	0x0800a3a4

08009504 <_calloc_r>:
 8009504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009506:	fba1 2402 	umull	r2, r4, r1, r2
 800950a:	b94c      	cbnz	r4, 8009520 <_calloc_r+0x1c>
 800950c:	4611      	mov	r1, r2
 800950e:	9201      	str	r2, [sp, #4]
 8009510:	f000 f87a 	bl	8009608 <_malloc_r>
 8009514:	9a01      	ldr	r2, [sp, #4]
 8009516:	4605      	mov	r5, r0
 8009518:	b930      	cbnz	r0, 8009528 <_calloc_r+0x24>
 800951a:	4628      	mov	r0, r5
 800951c:	b003      	add	sp, #12
 800951e:	bd30      	pop	{r4, r5, pc}
 8009520:	220c      	movs	r2, #12
 8009522:	6002      	str	r2, [r0, #0]
 8009524:	2500      	movs	r5, #0
 8009526:	e7f8      	b.n	800951a <_calloc_r+0x16>
 8009528:	4621      	mov	r1, r4
 800952a:	f7fe f96f 	bl	800780c <memset>
 800952e:	e7f4      	b.n	800951a <_calloc_r+0x16>

08009530 <_free_r>:
 8009530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009532:	2900      	cmp	r1, #0
 8009534:	d044      	beq.n	80095c0 <_free_r+0x90>
 8009536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953a:	9001      	str	r0, [sp, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f1a1 0404 	sub.w	r4, r1, #4
 8009542:	bfb8      	it	lt
 8009544:	18e4      	addlt	r4, r4, r3
 8009546:	f000 f925 	bl	8009794 <__malloc_lock>
 800954a:	4a1e      	ldr	r2, [pc, #120]	; (80095c4 <_free_r+0x94>)
 800954c:	9801      	ldr	r0, [sp, #4]
 800954e:	6813      	ldr	r3, [r2, #0]
 8009550:	b933      	cbnz	r3, 8009560 <_free_r+0x30>
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	6014      	str	r4, [r2, #0]
 8009556:	b003      	add	sp, #12
 8009558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800955c:	f000 b920 	b.w	80097a0 <__malloc_unlock>
 8009560:	42a3      	cmp	r3, r4
 8009562:	d908      	bls.n	8009576 <_free_r+0x46>
 8009564:	6825      	ldr	r5, [r4, #0]
 8009566:	1961      	adds	r1, r4, r5
 8009568:	428b      	cmp	r3, r1
 800956a:	bf01      	itttt	eq
 800956c:	6819      	ldreq	r1, [r3, #0]
 800956e:	685b      	ldreq	r3, [r3, #4]
 8009570:	1949      	addeq	r1, r1, r5
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	e7ed      	b.n	8009552 <_free_r+0x22>
 8009576:	461a      	mov	r2, r3
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	b10b      	cbz	r3, 8009580 <_free_r+0x50>
 800957c:	42a3      	cmp	r3, r4
 800957e:	d9fa      	bls.n	8009576 <_free_r+0x46>
 8009580:	6811      	ldr	r1, [r2, #0]
 8009582:	1855      	adds	r5, r2, r1
 8009584:	42a5      	cmp	r5, r4
 8009586:	d10b      	bne.n	80095a0 <_free_r+0x70>
 8009588:	6824      	ldr	r4, [r4, #0]
 800958a:	4421      	add	r1, r4
 800958c:	1854      	adds	r4, r2, r1
 800958e:	42a3      	cmp	r3, r4
 8009590:	6011      	str	r1, [r2, #0]
 8009592:	d1e0      	bne.n	8009556 <_free_r+0x26>
 8009594:	681c      	ldr	r4, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	6053      	str	r3, [r2, #4]
 800959a:	4421      	add	r1, r4
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	e7da      	b.n	8009556 <_free_r+0x26>
 80095a0:	d902      	bls.n	80095a8 <_free_r+0x78>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	e7d6      	b.n	8009556 <_free_r+0x26>
 80095a8:	6825      	ldr	r5, [r4, #0]
 80095aa:	1961      	adds	r1, r4, r5
 80095ac:	428b      	cmp	r3, r1
 80095ae:	bf04      	itt	eq
 80095b0:	6819      	ldreq	r1, [r3, #0]
 80095b2:	685b      	ldreq	r3, [r3, #4]
 80095b4:	6063      	str	r3, [r4, #4]
 80095b6:	bf04      	itt	eq
 80095b8:	1949      	addeq	r1, r1, r5
 80095ba:	6021      	streq	r1, [r4, #0]
 80095bc:	6054      	str	r4, [r2, #4]
 80095be:	e7ca      	b.n	8009556 <_free_r+0x26>
 80095c0:	b003      	add	sp, #12
 80095c2:	bd30      	pop	{r4, r5, pc}
 80095c4:	20001318 	.word	0x20001318

080095c8 <sbrk_aligned>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	4e0e      	ldr	r6, [pc, #56]	; (8009604 <sbrk_aligned+0x3c>)
 80095cc:	460c      	mov	r4, r1
 80095ce:	6831      	ldr	r1, [r6, #0]
 80095d0:	4605      	mov	r5, r0
 80095d2:	b911      	cbnz	r1, 80095da <sbrk_aligned+0x12>
 80095d4:	f000 f88c 	bl	80096f0 <_sbrk_r>
 80095d8:	6030      	str	r0, [r6, #0]
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 f887 	bl	80096f0 <_sbrk_r>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d00a      	beq.n	80095fc <sbrk_aligned+0x34>
 80095e6:	1cc4      	adds	r4, r0, #3
 80095e8:	f024 0403 	bic.w	r4, r4, #3
 80095ec:	42a0      	cmp	r0, r4
 80095ee:	d007      	beq.n	8009600 <sbrk_aligned+0x38>
 80095f0:	1a21      	subs	r1, r4, r0
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f87c 	bl	80096f0 <_sbrk_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d101      	bne.n	8009600 <sbrk_aligned+0x38>
 80095fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009600:	4620      	mov	r0, r4
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	2000131c 	.word	0x2000131c

08009608 <_malloc_r>:
 8009608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	1ccd      	adds	r5, r1, #3
 800960e:	f025 0503 	bic.w	r5, r5, #3
 8009612:	3508      	adds	r5, #8
 8009614:	2d0c      	cmp	r5, #12
 8009616:	bf38      	it	cc
 8009618:	250c      	movcc	r5, #12
 800961a:	2d00      	cmp	r5, #0
 800961c:	4607      	mov	r7, r0
 800961e:	db01      	blt.n	8009624 <_malloc_r+0x1c>
 8009620:	42a9      	cmp	r1, r5
 8009622:	d905      	bls.n	8009630 <_malloc_r+0x28>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	2600      	movs	r6, #0
 800962a:	4630      	mov	r0, r6
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	4e2e      	ldr	r6, [pc, #184]	; (80096ec <_malloc_r+0xe4>)
 8009632:	f000 f8af 	bl	8009794 <__malloc_lock>
 8009636:	6833      	ldr	r3, [r6, #0]
 8009638:	461c      	mov	r4, r3
 800963a:	bb34      	cbnz	r4, 800968a <_malloc_r+0x82>
 800963c:	4629      	mov	r1, r5
 800963e:	4638      	mov	r0, r7
 8009640:	f7ff ffc2 	bl	80095c8 <sbrk_aligned>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	4604      	mov	r4, r0
 8009648:	d14d      	bne.n	80096e6 <_malloc_r+0xde>
 800964a:	6834      	ldr	r4, [r6, #0]
 800964c:	4626      	mov	r6, r4
 800964e:	2e00      	cmp	r6, #0
 8009650:	d140      	bne.n	80096d4 <_malloc_r+0xcc>
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	4631      	mov	r1, r6
 8009656:	4638      	mov	r0, r7
 8009658:	eb04 0803 	add.w	r8, r4, r3
 800965c:	f000 f848 	bl	80096f0 <_sbrk_r>
 8009660:	4580      	cmp	r8, r0
 8009662:	d13a      	bne.n	80096da <_malloc_r+0xd2>
 8009664:	6821      	ldr	r1, [r4, #0]
 8009666:	3503      	adds	r5, #3
 8009668:	1a6d      	subs	r5, r5, r1
 800966a:	f025 0503 	bic.w	r5, r5, #3
 800966e:	3508      	adds	r5, #8
 8009670:	2d0c      	cmp	r5, #12
 8009672:	bf38      	it	cc
 8009674:	250c      	movcc	r5, #12
 8009676:	4629      	mov	r1, r5
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff ffa5 	bl	80095c8 <sbrk_aligned>
 800967e:	3001      	adds	r0, #1
 8009680:	d02b      	beq.n	80096da <_malloc_r+0xd2>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	442b      	add	r3, r5
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	e00e      	b.n	80096a8 <_malloc_r+0xa0>
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	1b52      	subs	r2, r2, r5
 800968e:	d41e      	bmi.n	80096ce <_malloc_r+0xc6>
 8009690:	2a0b      	cmp	r2, #11
 8009692:	d916      	bls.n	80096c2 <_malloc_r+0xba>
 8009694:	1961      	adds	r1, r4, r5
 8009696:	42a3      	cmp	r3, r4
 8009698:	6025      	str	r5, [r4, #0]
 800969a:	bf18      	it	ne
 800969c:	6059      	strne	r1, [r3, #4]
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	bf08      	it	eq
 80096a2:	6031      	streq	r1, [r6, #0]
 80096a4:	5162      	str	r2, [r4, r5]
 80096a6:	604b      	str	r3, [r1, #4]
 80096a8:	4638      	mov	r0, r7
 80096aa:	f104 060b 	add.w	r6, r4, #11
 80096ae:	f000 f877 	bl	80097a0 <__malloc_unlock>
 80096b2:	f026 0607 	bic.w	r6, r6, #7
 80096b6:	1d23      	adds	r3, r4, #4
 80096b8:	1af2      	subs	r2, r6, r3
 80096ba:	d0b6      	beq.n	800962a <_malloc_r+0x22>
 80096bc:	1b9b      	subs	r3, r3, r6
 80096be:	50a3      	str	r3, [r4, r2]
 80096c0:	e7b3      	b.n	800962a <_malloc_r+0x22>
 80096c2:	6862      	ldr	r2, [r4, #4]
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	bf0c      	ite	eq
 80096c8:	6032      	streq	r2, [r6, #0]
 80096ca:	605a      	strne	r2, [r3, #4]
 80096cc:	e7ec      	b.n	80096a8 <_malloc_r+0xa0>
 80096ce:	4623      	mov	r3, r4
 80096d0:	6864      	ldr	r4, [r4, #4]
 80096d2:	e7b2      	b.n	800963a <_malloc_r+0x32>
 80096d4:	4634      	mov	r4, r6
 80096d6:	6876      	ldr	r6, [r6, #4]
 80096d8:	e7b9      	b.n	800964e <_malloc_r+0x46>
 80096da:	230c      	movs	r3, #12
 80096dc:	603b      	str	r3, [r7, #0]
 80096de:	4638      	mov	r0, r7
 80096e0:	f000 f85e 	bl	80097a0 <__malloc_unlock>
 80096e4:	e7a1      	b.n	800962a <_malloc_r+0x22>
 80096e6:	6025      	str	r5, [r4, #0]
 80096e8:	e7de      	b.n	80096a8 <_malloc_r+0xa0>
 80096ea:	bf00      	nop
 80096ec:	20001318 	.word	0x20001318

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 fbc0 	bl	8001e80 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20001320 	.word	0x20001320

08009710 <__assert_func>:
 8009710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009712:	4614      	mov	r4, r2
 8009714:	461a      	mov	r2, r3
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <__assert_func+0x2c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4605      	mov	r5, r0
 800971c:	68d8      	ldr	r0, [r3, #12]
 800971e:	b14c      	cbz	r4, 8009734 <__assert_func+0x24>
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <__assert_func+0x30>)
 8009722:	9100      	str	r1, [sp, #0]
 8009724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009728:	4906      	ldr	r1, [pc, #24]	; (8009744 <__assert_func+0x34>)
 800972a:	462b      	mov	r3, r5
 800972c:	f000 f80e 	bl	800974c <fiprintf>
 8009730:	f000 fa64 	bl	8009bfc <abort>
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <__assert_func+0x38>)
 8009736:	461c      	mov	r4, r3
 8009738:	e7f3      	b.n	8009722 <__assert_func+0x12>
 800973a:	bf00      	nop
 800973c:	20000010 	.word	0x20000010
 8009740:	0800a4fc 	.word	0x0800a4fc
 8009744:	0800a509 	.word	0x0800a509
 8009748:	0800a537 	.word	0x0800a537

0800974c <fiprintf>:
 800974c:	b40e      	push	{r1, r2, r3}
 800974e:	b503      	push	{r0, r1, lr}
 8009750:	4601      	mov	r1, r0
 8009752:	ab03      	add	r3, sp, #12
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <fiprintf+0x20>)
 8009756:	f853 2b04 	ldr.w	r2, [r3], #4
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	f000 f84f 	bl	8009800 <_vfiprintf_r>
 8009762:	b002      	add	sp, #8
 8009764:	f85d eb04 	ldr.w	lr, [sp], #4
 8009768:	b003      	add	sp, #12
 800976a:	4770      	bx	lr
 800976c:	20000010 	.word	0x20000010

08009770 <__ascii_mbtowc>:
 8009770:	b082      	sub	sp, #8
 8009772:	b901      	cbnz	r1, 8009776 <__ascii_mbtowc+0x6>
 8009774:	a901      	add	r1, sp, #4
 8009776:	b142      	cbz	r2, 800978a <__ascii_mbtowc+0x1a>
 8009778:	b14b      	cbz	r3, 800978e <__ascii_mbtowc+0x1e>
 800977a:	7813      	ldrb	r3, [r2, #0]
 800977c:	600b      	str	r3, [r1, #0]
 800977e:	7812      	ldrb	r2, [r2, #0]
 8009780:	1e10      	subs	r0, r2, #0
 8009782:	bf18      	it	ne
 8009784:	2001      	movne	r0, #1
 8009786:	b002      	add	sp, #8
 8009788:	4770      	bx	lr
 800978a:	4610      	mov	r0, r2
 800978c:	e7fb      	b.n	8009786 <__ascii_mbtowc+0x16>
 800978e:	f06f 0001 	mvn.w	r0, #1
 8009792:	e7f8      	b.n	8009786 <__ascii_mbtowc+0x16>

08009794 <__malloc_lock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_lock+0x8>)
 8009796:	f000 bbf1 	b.w	8009f7c <__retarget_lock_acquire_recursive>
 800979a:	bf00      	nop
 800979c:	20001324 	.word	0x20001324

080097a0 <__malloc_unlock>:
 80097a0:	4801      	ldr	r0, [pc, #4]	; (80097a8 <__malloc_unlock+0x8>)
 80097a2:	f000 bbec 	b.w	8009f7e <__retarget_lock_release_recursive>
 80097a6:	bf00      	nop
 80097a8:	20001324 	.word	0x20001324

080097ac <__sfputc_r>:
 80097ac:	6893      	ldr	r3, [r2, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	b410      	push	{r4}
 80097b4:	6093      	str	r3, [r2, #8]
 80097b6:	da08      	bge.n	80097ca <__sfputc_r+0x1e>
 80097b8:	6994      	ldr	r4, [r2, #24]
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	db01      	blt.n	80097c2 <__sfputc_r+0x16>
 80097be:	290a      	cmp	r1, #10
 80097c0:	d103      	bne.n	80097ca <__sfputc_r+0x1e>
 80097c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c6:	f000 b94b 	b.w	8009a60 <__swbuf_r>
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	1c58      	adds	r0, r3, #1
 80097ce:	6010      	str	r0, [r2, #0]
 80097d0:	7019      	strb	r1, [r3, #0]
 80097d2:	4608      	mov	r0, r1
 80097d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d8:	4770      	bx	lr

080097da <__sfputs_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	4606      	mov	r6, r0
 80097de:	460f      	mov	r7, r1
 80097e0:	4614      	mov	r4, r2
 80097e2:	18d5      	adds	r5, r2, r3
 80097e4:	42ac      	cmp	r4, r5
 80097e6:	d101      	bne.n	80097ec <__sfputs_r+0x12>
 80097e8:	2000      	movs	r0, #0
 80097ea:	e007      	b.n	80097fc <__sfputs_r+0x22>
 80097ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f0:	463a      	mov	r2, r7
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ffda 	bl	80097ac <__sfputc_r>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d1f3      	bne.n	80097e4 <__sfputs_r+0xa>
 80097fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009800 <_vfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	460d      	mov	r5, r1
 8009806:	b09d      	sub	sp, #116	; 0x74
 8009808:	4614      	mov	r4, r2
 800980a:	4698      	mov	r8, r3
 800980c:	4606      	mov	r6, r0
 800980e:	b118      	cbz	r0, 8009818 <_vfiprintf_r+0x18>
 8009810:	6983      	ldr	r3, [r0, #24]
 8009812:	b90b      	cbnz	r3, 8009818 <_vfiprintf_r+0x18>
 8009814:	f000 fb14 	bl	8009e40 <__sinit>
 8009818:	4b89      	ldr	r3, [pc, #548]	; (8009a40 <_vfiprintf_r+0x240>)
 800981a:	429d      	cmp	r5, r3
 800981c:	d11b      	bne.n	8009856 <_vfiprintf_r+0x56>
 800981e:	6875      	ldr	r5, [r6, #4]
 8009820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009822:	07d9      	lsls	r1, r3, #31
 8009824:	d405      	bmi.n	8009832 <_vfiprintf_r+0x32>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	059a      	lsls	r2, r3, #22
 800982a:	d402      	bmi.n	8009832 <_vfiprintf_r+0x32>
 800982c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982e:	f000 fba5 	bl	8009f7c <__retarget_lock_acquire_recursive>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	071b      	lsls	r3, r3, #28
 8009836:	d501      	bpl.n	800983c <_vfiprintf_r+0x3c>
 8009838:	692b      	ldr	r3, [r5, #16]
 800983a:	b9eb      	cbnz	r3, 8009878 <_vfiprintf_r+0x78>
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f000 f96e 	bl	8009b20 <__swsetup_r>
 8009844:	b1c0      	cbz	r0, 8009878 <_vfiprintf_r+0x78>
 8009846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009848:	07dc      	lsls	r4, r3, #31
 800984a:	d50e      	bpl.n	800986a <_vfiprintf_r+0x6a>
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	4b7b      	ldr	r3, [pc, #492]	; (8009a44 <_vfiprintf_r+0x244>)
 8009858:	429d      	cmp	r5, r3
 800985a:	d101      	bne.n	8009860 <_vfiprintf_r+0x60>
 800985c:	68b5      	ldr	r5, [r6, #8]
 800985e:	e7df      	b.n	8009820 <_vfiprintf_r+0x20>
 8009860:	4b79      	ldr	r3, [pc, #484]	; (8009a48 <_vfiprintf_r+0x248>)
 8009862:	429d      	cmp	r5, r3
 8009864:	bf08      	it	eq
 8009866:	68f5      	ldreq	r5, [r6, #12]
 8009868:	e7da      	b.n	8009820 <_vfiprintf_r+0x20>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	0598      	lsls	r0, r3, #22
 800986e:	d4ed      	bmi.n	800984c <_vfiprintf_r+0x4c>
 8009870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009872:	f000 fb84 	bl	8009f7e <__retarget_lock_release_recursive>
 8009876:	e7e9      	b.n	800984c <_vfiprintf_r+0x4c>
 8009878:	2300      	movs	r3, #0
 800987a:	9309      	str	r3, [sp, #36]	; 0x24
 800987c:	2320      	movs	r3, #32
 800987e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009882:	f8cd 800c 	str.w	r8, [sp, #12]
 8009886:	2330      	movs	r3, #48	; 0x30
 8009888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a4c <_vfiprintf_r+0x24c>
 800988c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009890:	f04f 0901 	mov.w	r9, #1
 8009894:	4623      	mov	r3, r4
 8009896:	469a      	mov	sl, r3
 8009898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989c:	b10a      	cbz	r2, 80098a2 <_vfiprintf_r+0xa2>
 800989e:	2a25      	cmp	r2, #37	; 0x25
 80098a0:	d1f9      	bne.n	8009896 <_vfiprintf_r+0x96>
 80098a2:	ebba 0b04 	subs.w	fp, sl, r4
 80098a6:	d00b      	beq.n	80098c0 <_vfiprintf_r+0xc0>
 80098a8:	465b      	mov	r3, fp
 80098aa:	4622      	mov	r2, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ff93 	bl	80097da <__sfputs_r>
 80098b4:	3001      	adds	r0, #1
 80098b6:	f000 80aa 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098bc:	445a      	add	r2, fp
 80098be:	9209      	str	r2, [sp, #36]	; 0x24
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80a2 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d4:	f10a 0a01 	add.w	sl, sl, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098e0:	931a      	str	r3, [sp, #104]	; 0x68
 80098e2:	4654      	mov	r4, sl
 80098e4:	2205      	movs	r2, #5
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	4858      	ldr	r0, [pc, #352]	; (8009a4c <_vfiprintf_r+0x24c>)
 80098ec:	f7f6 fc78 	bl	80001e0 <memchr>
 80098f0:	9a04      	ldr	r2, [sp, #16]
 80098f2:	b9d8      	cbnz	r0, 800992c <_vfiprintf_r+0x12c>
 80098f4:	06d1      	lsls	r1, r2, #27
 80098f6:	bf44      	itt	mi
 80098f8:	2320      	movmi	r3, #32
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	0713      	lsls	r3, r2, #28
 8009900:	bf44      	itt	mi
 8009902:	232b      	movmi	r3, #43	; 0x2b
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b2a      	cmp	r3, #42	; 0x2a
 800990e:	d015      	beq.n	800993c <_vfiprintf_r+0x13c>
 8009910:	9a07      	ldr	r2, [sp, #28]
 8009912:	4654      	mov	r4, sl
 8009914:	2000      	movs	r0, #0
 8009916:	f04f 0c0a 	mov.w	ip, #10
 800991a:	4621      	mov	r1, r4
 800991c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009920:	3b30      	subs	r3, #48	; 0x30
 8009922:	2b09      	cmp	r3, #9
 8009924:	d94e      	bls.n	80099c4 <_vfiprintf_r+0x1c4>
 8009926:	b1b0      	cbz	r0, 8009956 <_vfiprintf_r+0x156>
 8009928:	9207      	str	r2, [sp, #28]
 800992a:	e014      	b.n	8009956 <_vfiprintf_r+0x156>
 800992c:	eba0 0308 	sub.w	r3, r0, r8
 8009930:	fa09 f303 	lsl.w	r3, r9, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	46a2      	mov	sl, r4
 800993a:	e7d2      	b.n	80098e2 <_vfiprintf_r+0xe2>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1d19      	adds	r1, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9103      	str	r1, [sp, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfbb      	ittet	lt
 8009948:	425b      	neglt	r3, r3
 800994a:	f042 0202 	orrlt.w	r2, r2, #2
 800994e:	9307      	strge	r3, [sp, #28]
 8009950:	9307      	strlt	r3, [sp, #28]
 8009952:	bfb8      	it	lt
 8009954:	9204      	strlt	r2, [sp, #16]
 8009956:	7823      	ldrb	r3, [r4, #0]
 8009958:	2b2e      	cmp	r3, #46	; 0x2e
 800995a:	d10c      	bne.n	8009976 <_vfiprintf_r+0x176>
 800995c:	7863      	ldrb	r3, [r4, #1]
 800995e:	2b2a      	cmp	r3, #42	; 0x2a
 8009960:	d135      	bne.n	80099ce <_vfiprintf_r+0x1ce>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	9203      	str	r2, [sp, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	bfb8      	it	lt
 800996e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009972:	3402      	adds	r4, #2
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a5c <_vfiprintf_r+0x25c>
 800997a:	7821      	ldrb	r1, [r4, #0]
 800997c:	2203      	movs	r2, #3
 800997e:	4650      	mov	r0, sl
 8009980:	f7f6 fc2e 	bl	80001e0 <memchr>
 8009984:	b140      	cbz	r0, 8009998 <_vfiprintf_r+0x198>
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	eba0 000a 	sub.w	r0, r0, sl
 800998c:	fa03 f000 	lsl.w	r0, r3, r0
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	4303      	orrs	r3, r0
 8009994:	3401      	adds	r4, #1
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	482c      	ldr	r0, [pc, #176]	; (8009a50 <_vfiprintf_r+0x250>)
 800999e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099a2:	2206      	movs	r2, #6
 80099a4:	f7f6 fc1c 	bl	80001e0 <memchr>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d03f      	beq.n	8009a2c <_vfiprintf_r+0x22c>
 80099ac:	4b29      	ldr	r3, [pc, #164]	; (8009a54 <_vfiprintf_r+0x254>)
 80099ae:	bb1b      	cbnz	r3, 80099f8 <_vfiprintf_r+0x1f8>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	3307      	adds	r3, #7
 80099b4:	f023 0307 	bic.w	r3, r3, #7
 80099b8:	3308      	adds	r3, #8
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099be:	443b      	add	r3, r7
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	e767      	b.n	8009894 <_vfiprintf_r+0x94>
 80099c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c8:	460c      	mov	r4, r1
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7a5      	b.n	800991a <_vfiprintf_r+0x11a>
 80099ce:	2300      	movs	r3, #0
 80099d0:	3401      	adds	r4, #1
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f04f 0c0a 	mov.w	ip, #10
 80099da:	4620      	mov	r0, r4
 80099dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e0:	3a30      	subs	r2, #48	; 0x30
 80099e2:	2a09      	cmp	r2, #9
 80099e4:	d903      	bls.n	80099ee <_vfiprintf_r+0x1ee>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c5      	beq.n	8009976 <_vfiprintf_r+0x176>
 80099ea:	9105      	str	r1, [sp, #20]
 80099ec:	e7c3      	b.n	8009976 <_vfiprintf_r+0x176>
 80099ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f2:	4604      	mov	r4, r0
 80099f4:	2301      	movs	r3, #1
 80099f6:	e7f0      	b.n	80099da <_vfiprintf_r+0x1da>
 80099f8:	ab03      	add	r3, sp, #12
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	462a      	mov	r2, r5
 80099fe:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a00:	a904      	add	r1, sp, #16
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7fd ffaa 	bl	800795c <_printf_float>
 8009a08:	4607      	mov	r7, r0
 8009a0a:	1c78      	adds	r0, r7, #1
 8009a0c:	d1d6      	bne.n	80099bc <_vfiprintf_r+0x1bc>
 8009a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a10:	07d9      	lsls	r1, r3, #31
 8009a12:	d405      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	059a      	lsls	r2, r3, #22
 8009a18:	d402      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1c:	f000 faaf 	bl	8009f7e <__retarget_lock_release_recursive>
 8009a20:	89ab      	ldrh	r3, [r5, #12]
 8009a22:	065b      	lsls	r3, r3, #25
 8009a24:	f53f af12 	bmi.w	800984c <_vfiprintf_r+0x4c>
 8009a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2a:	e711      	b.n	8009850 <_vfiprintf_r+0x50>
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	462a      	mov	r2, r5
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fe fa34 	bl	8007ea4 <_printf_i>
 8009a3c:	e7e4      	b.n	8009a08 <_vfiprintf_r+0x208>
 8009a3e:	bf00      	nop
 8009a40:	0800a674 	.word	0x0800a674
 8009a44:	0800a694 	.word	0x0800a694
 8009a48:	0800a654 	.word	0x0800a654
 8009a4c:	0800a542 	.word	0x0800a542
 8009a50:	0800a54c 	.word	0x0800a54c
 8009a54:	0800795d 	.word	0x0800795d
 8009a58:	080097db 	.word	0x080097db
 8009a5c:	0800a548 	.word	0x0800a548

08009a60 <__swbuf_r>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	460e      	mov	r6, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	4605      	mov	r5, r0
 8009a68:	b118      	cbz	r0, 8009a72 <__swbuf_r+0x12>
 8009a6a:	6983      	ldr	r3, [r0, #24]
 8009a6c:	b90b      	cbnz	r3, 8009a72 <__swbuf_r+0x12>
 8009a6e:	f000 f9e7 	bl	8009e40 <__sinit>
 8009a72:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <__swbuf_r+0x98>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	d12b      	bne.n	8009ad0 <__swbuf_r+0x70>
 8009a78:	686c      	ldr	r4, [r5, #4]
 8009a7a:	69a3      	ldr	r3, [r4, #24]
 8009a7c:	60a3      	str	r3, [r4, #8]
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	071a      	lsls	r2, r3, #28
 8009a82:	d52f      	bpl.n	8009ae4 <__swbuf_r+0x84>
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	b36b      	cbz	r3, 8009ae4 <__swbuf_r+0x84>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6820      	ldr	r0, [r4, #0]
 8009a8c:	1ac0      	subs	r0, r0, r3
 8009a8e:	6963      	ldr	r3, [r4, #20]
 8009a90:	b2f6      	uxtb	r6, r6
 8009a92:	4283      	cmp	r3, r0
 8009a94:	4637      	mov	r7, r6
 8009a96:	dc04      	bgt.n	8009aa2 <__swbuf_r+0x42>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f93c 	bl	8009d18 <_fflush_r>
 8009aa0:	bb30      	cbnz	r0, 8009af0 <__swbuf_r+0x90>
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	701e      	strb	r6, [r3, #0]
 8009ab0:	6963      	ldr	r3, [r4, #20]
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	4283      	cmp	r3, r0
 8009ab6:	d004      	beq.n	8009ac2 <__swbuf_r+0x62>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	07db      	lsls	r3, r3, #31
 8009abc:	d506      	bpl.n	8009acc <__swbuf_r+0x6c>
 8009abe:	2e0a      	cmp	r6, #10
 8009ac0:	d104      	bne.n	8009acc <__swbuf_r+0x6c>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f000 f927 	bl	8009d18 <_fflush_r>
 8009aca:	b988      	cbnz	r0, 8009af0 <__swbuf_r+0x90>
 8009acc:	4638      	mov	r0, r7
 8009ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <__swbuf_r+0x9c>)
 8009ad2:	429c      	cmp	r4, r3
 8009ad4:	d101      	bne.n	8009ada <__swbuf_r+0x7a>
 8009ad6:	68ac      	ldr	r4, [r5, #8]
 8009ad8:	e7cf      	b.n	8009a7a <__swbuf_r+0x1a>
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <__swbuf_r+0xa0>)
 8009adc:	429c      	cmp	r4, r3
 8009ade:	bf08      	it	eq
 8009ae0:	68ec      	ldreq	r4, [r5, #12]
 8009ae2:	e7ca      	b.n	8009a7a <__swbuf_r+0x1a>
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 f81a 	bl	8009b20 <__swsetup_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0cb      	beq.n	8009a88 <__swbuf_r+0x28>
 8009af0:	f04f 37ff 	mov.w	r7, #4294967295
 8009af4:	e7ea      	b.n	8009acc <__swbuf_r+0x6c>
 8009af6:	bf00      	nop
 8009af8:	0800a674 	.word	0x0800a674
 8009afc:	0800a694 	.word	0x0800a694
 8009b00:	0800a654 	.word	0x0800a654

08009b04 <__ascii_wctomb>:
 8009b04:	b149      	cbz	r1, 8009b1a <__ascii_wctomb+0x16>
 8009b06:	2aff      	cmp	r2, #255	; 0xff
 8009b08:	bf85      	ittet	hi
 8009b0a:	238a      	movhi	r3, #138	; 0x8a
 8009b0c:	6003      	strhi	r3, [r0, #0]
 8009b0e:	700a      	strbls	r2, [r1, #0]
 8009b10:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b14:	bf98      	it	ls
 8009b16:	2001      	movls	r0, #1
 8009b18:	4770      	bx	lr
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	4770      	bx	lr
	...

08009b20 <__swsetup_r>:
 8009b20:	4b32      	ldr	r3, [pc, #200]	; (8009bec <__swsetup_r+0xcc>)
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	681d      	ldr	r5, [r3, #0]
 8009b26:	4606      	mov	r6, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	b125      	cbz	r5, 8009b36 <__swsetup_r+0x16>
 8009b2c:	69ab      	ldr	r3, [r5, #24]
 8009b2e:	b913      	cbnz	r3, 8009b36 <__swsetup_r+0x16>
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 f985 	bl	8009e40 <__sinit>
 8009b36:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <__swsetup_r+0xd0>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	d10f      	bne.n	8009b5c <__swsetup_r+0x3c>
 8009b3c:	686c      	ldr	r4, [r5, #4]
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b44:	0719      	lsls	r1, r3, #28
 8009b46:	d42c      	bmi.n	8009ba2 <__swsetup_r+0x82>
 8009b48:	06dd      	lsls	r5, r3, #27
 8009b4a:	d411      	bmi.n	8009b70 <__swsetup_r+0x50>
 8009b4c:	2309      	movs	r3, #9
 8009b4e:	6033      	str	r3, [r6, #0]
 8009b50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	e03e      	b.n	8009bda <__swsetup_r+0xba>
 8009b5c:	4b25      	ldr	r3, [pc, #148]	; (8009bf4 <__swsetup_r+0xd4>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d101      	bne.n	8009b66 <__swsetup_r+0x46>
 8009b62:	68ac      	ldr	r4, [r5, #8]
 8009b64:	e7eb      	b.n	8009b3e <__swsetup_r+0x1e>
 8009b66:	4b24      	ldr	r3, [pc, #144]	; (8009bf8 <__swsetup_r+0xd8>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	bf08      	it	eq
 8009b6c:	68ec      	ldreq	r4, [r5, #12]
 8009b6e:	e7e6      	b.n	8009b3e <__swsetup_r+0x1e>
 8009b70:	0758      	lsls	r0, r3, #29
 8009b72:	d512      	bpl.n	8009b9a <__swsetup_r+0x7a>
 8009b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b76:	b141      	cbz	r1, 8009b8a <__swsetup_r+0x6a>
 8009b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	d002      	beq.n	8009b86 <__swsetup_r+0x66>
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff fcd5 	bl	8009530 <_free_r>
 8009b86:	2300      	movs	r3, #0
 8009b88:	6363      	str	r3, [r4, #52]	; 0x34
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	2300      	movs	r3, #0
 8009b94:	6063      	str	r3, [r4, #4]
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	f043 0308 	orr.w	r3, r3, #8
 8009ba0:	81a3      	strh	r3, [r4, #12]
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	b94b      	cbnz	r3, 8009bba <__swsetup_r+0x9a>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb0:	d003      	beq.n	8009bba <__swsetup_r+0x9a>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f000 fa09 	bl	8009fcc <__smakebuf_r>
 8009bba:	89a0      	ldrh	r0, [r4, #12]
 8009bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bc0:	f010 0301 	ands.w	r3, r0, #1
 8009bc4:	d00a      	beq.n	8009bdc <__swsetup_r+0xbc>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	6963      	ldr	r3, [r4, #20]
 8009bcc:	425b      	negs	r3, r3
 8009bce:	61a3      	str	r3, [r4, #24]
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	b943      	cbnz	r3, 8009be6 <__swsetup_r+0xc6>
 8009bd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bd8:	d1ba      	bne.n	8009b50 <__swsetup_r+0x30>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	0781      	lsls	r1, r0, #30
 8009bde:	bf58      	it	pl
 8009be0:	6963      	ldrpl	r3, [r4, #20]
 8009be2:	60a3      	str	r3, [r4, #8]
 8009be4:	e7f4      	b.n	8009bd0 <__swsetup_r+0xb0>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e7f7      	b.n	8009bda <__swsetup_r+0xba>
 8009bea:	bf00      	nop
 8009bec:	20000010 	.word	0x20000010
 8009bf0:	0800a674 	.word	0x0800a674
 8009bf4:	0800a694 	.word	0x0800a694
 8009bf8:	0800a654 	.word	0x0800a654

08009bfc <abort>:
 8009bfc:	b508      	push	{r3, lr}
 8009bfe:	2006      	movs	r0, #6
 8009c00:	f000 fa4c 	bl	800a09c <raise>
 8009c04:	2001      	movs	r0, #1
 8009c06:	f7f8 f8c3 	bl	8001d90 <_exit>
	...

08009c0c <__sflush_r>:
 8009c0c:	898a      	ldrh	r2, [r1, #12]
 8009c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	4605      	mov	r5, r0
 8009c14:	0710      	lsls	r0, r2, #28
 8009c16:	460c      	mov	r4, r1
 8009c18:	d458      	bmi.n	8009ccc <__sflush_r+0xc0>
 8009c1a:	684b      	ldr	r3, [r1, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc05      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dc02      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c26:	2000      	movs	r0, #0
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d0f9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c38:	682f      	ldr	r7, [r5, #0]
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	d032      	beq.n	8009ca4 <__sflush_r+0x98>
 8009c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	075a      	lsls	r2, r3, #29
 8009c44:	d505      	bpl.n	8009c52 <__sflush_r+0x46>
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	b10b      	cbz	r3, 8009c52 <__sflush_r+0x46>
 8009c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c50:	1ac0      	subs	r0, r0, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	4602      	mov	r2, r0
 8009c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c58:	6a21      	ldr	r1, [r4, #32]
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b0      	blx	r6
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	d106      	bne.n	8009c72 <__sflush_r+0x66>
 8009c64:	6829      	ldr	r1, [r5, #0]
 8009c66:	291d      	cmp	r1, #29
 8009c68:	d82c      	bhi.n	8009cc4 <__sflush_r+0xb8>
 8009c6a:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <__sflush_r+0x108>)
 8009c6c:	40ca      	lsrs	r2, r1
 8009c6e:	07d6      	lsls	r6, r2, #31
 8009c70:	d528      	bpl.n	8009cc4 <__sflush_r+0xb8>
 8009c72:	2200      	movs	r2, #0
 8009c74:	6062      	str	r2, [r4, #4]
 8009c76:	04d9      	lsls	r1, r3, #19
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	d504      	bpl.n	8009c88 <__sflush_r+0x7c>
 8009c7e:	1c42      	adds	r2, r0, #1
 8009c80:	d101      	bne.n	8009c86 <__sflush_r+0x7a>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	b903      	cbnz	r3, 8009c88 <__sflush_r+0x7c>
 8009c86:	6560      	str	r0, [r4, #84]	; 0x54
 8009c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8a:	602f      	str	r7, [r5, #0]
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d0ca      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c94:	4299      	cmp	r1, r3
 8009c96:	d002      	beq.n	8009c9e <__sflush_r+0x92>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7ff fc49 	bl	8009530 <_free_r>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca2:	e7c1      	b.n	8009c28 <__sflush_r+0x1c>
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	1c41      	adds	r1, r0, #1
 8009cae:	d1c7      	bne.n	8009c40 <__sflush_r+0x34>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c4      	beq.n	8009c40 <__sflush_r+0x34>
 8009cb6:	2b1d      	cmp	r3, #29
 8009cb8:	d001      	beq.n	8009cbe <__sflush_r+0xb2>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	d101      	bne.n	8009cc2 <__sflush_r+0xb6>
 8009cbe:	602f      	str	r7, [r5, #0]
 8009cc0:	e7b1      	b.n	8009c26 <__sflush_r+0x1a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	e7ad      	b.n	8009c28 <__sflush_r+0x1c>
 8009ccc:	690f      	ldr	r7, [r1, #16]
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	d0a9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009cd2:	0793      	lsls	r3, r2, #30
 8009cd4:	680e      	ldr	r6, [r1, #0]
 8009cd6:	bf08      	it	eq
 8009cd8:	694b      	ldreq	r3, [r1, #20]
 8009cda:	600f      	str	r7, [r1, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	2300      	movne	r3, #0
 8009ce0:	eba6 0807 	sub.w	r8, r6, r7
 8009ce4:	608b      	str	r3, [r1, #8]
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	dd9c      	ble.n	8009c26 <__sflush_r+0x1a>
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf0:	4643      	mov	r3, r8
 8009cf2:	463a      	mov	r2, r7
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b0      	blx	r6
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	dc06      	bgt.n	8009d0a <__sflush_r+0xfe>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e78e      	b.n	8009c28 <__sflush_r+0x1c>
 8009d0a:	4407      	add	r7, r0
 8009d0c:	eba8 0800 	sub.w	r8, r8, r0
 8009d10:	e7e9      	b.n	8009ce6 <__sflush_r+0xda>
 8009d12:	bf00      	nop
 8009d14:	20400001 	.word	0x20400001

08009d18 <_fflush_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	690b      	ldr	r3, [r1, #16]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	b913      	cbnz	r3, 8009d28 <_fflush_r+0x10>
 8009d22:	2500      	movs	r5, #0
 8009d24:	4628      	mov	r0, r5
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	b118      	cbz	r0, 8009d32 <_fflush_r+0x1a>
 8009d2a:	6983      	ldr	r3, [r0, #24]
 8009d2c:	b90b      	cbnz	r3, 8009d32 <_fflush_r+0x1a>
 8009d2e:	f000 f887 	bl	8009e40 <__sinit>
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <_fflush_r+0x6c>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	d11b      	bne.n	8009d70 <_fflush_r+0x58>
 8009d38:	686c      	ldr	r4, [r5, #4]
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0ef      	beq.n	8009d22 <_fflush_r+0xa>
 8009d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d404      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d48:	0599      	lsls	r1, r3, #22
 8009d4a:	d402      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d4e:	f000 f915 	bl	8009f7c <__retarget_lock_acquire_recursive>
 8009d52:	4628      	mov	r0, r5
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7ff ff59 	bl	8009c0c <__sflush_r>
 8009d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d5c:	07da      	lsls	r2, r3, #31
 8009d5e:	4605      	mov	r5, r0
 8009d60:	d4e0      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	059b      	lsls	r3, r3, #22
 8009d66:	d4dd      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6a:	f000 f908 	bl	8009f7e <__retarget_lock_release_recursive>
 8009d6e:	e7d9      	b.n	8009d24 <_fflush_r+0xc>
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <_fflush_r+0x70>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <_fflush_r+0x62>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7df      	b.n	8009d3a <_fflush_r+0x22>
 8009d7a:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <_fflush_r+0x74>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7da      	b.n	8009d3a <_fflush_r+0x22>
 8009d84:	0800a674 	.word	0x0800a674
 8009d88:	0800a694 	.word	0x0800a694
 8009d8c:	0800a654 	.word	0x0800a654

08009d90 <std>:
 8009d90:	2300      	movs	r3, #0
 8009d92:	b510      	push	{r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9e:	6083      	str	r3, [r0, #8]
 8009da0:	8181      	strh	r1, [r0, #12]
 8009da2:	6643      	str	r3, [r0, #100]	; 0x64
 8009da4:	81c2      	strh	r2, [r0, #14]
 8009da6:	6183      	str	r3, [r0, #24]
 8009da8:	4619      	mov	r1, r3
 8009daa:	2208      	movs	r2, #8
 8009dac:	305c      	adds	r0, #92	; 0x5c
 8009dae:	f7fd fd2d 	bl	800780c <memset>
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x38>)
 8009db4:	6263      	str	r3, [r4, #36]	; 0x24
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x3c>)
 8009db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <std+0x40>)
 8009dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <std+0x44>)
 8009dc0:	6224      	str	r4, [r4, #32]
 8009dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0800a0d5 	.word	0x0800a0d5
 8009dcc:	0800a0f7 	.word	0x0800a0f7
 8009dd0:	0800a12f 	.word	0x0800a12f
 8009dd4:	0800a153 	.word	0x0800a153

08009dd8 <_cleanup_r>:
 8009dd8:	4901      	ldr	r1, [pc, #4]	; (8009de0 <_cleanup_r+0x8>)
 8009dda:	f000 b8af 	b.w	8009f3c <_fwalk_reent>
 8009dde:	bf00      	nop
 8009de0:	08009d19 	.word	0x08009d19

08009de4 <__sfmoreglue>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	2268      	movs	r2, #104	; 0x68
 8009de8:	1e4d      	subs	r5, r1, #1
 8009dea:	4355      	muls	r5, r2
 8009dec:	460e      	mov	r6, r1
 8009dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009df2:	f7ff fc09 	bl	8009608 <_malloc_r>
 8009df6:	4604      	mov	r4, r0
 8009df8:	b140      	cbz	r0, 8009e0c <__sfmoreglue+0x28>
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009e00:	300c      	adds	r0, #12
 8009e02:	60a0      	str	r0, [r4, #8]
 8009e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e08:	f7fd fd00 	bl	800780c <memset>
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}

08009e10 <__sfp_lock_acquire>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__sfp_lock_acquire+0x8>)
 8009e12:	f000 b8b3 	b.w	8009f7c <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	20001325 	.word	0x20001325

08009e1c <__sfp_lock_release>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__sfp_lock_release+0x8>)
 8009e1e:	f000 b8ae 	b.w	8009f7e <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	20001325 	.word	0x20001325

08009e28 <__sinit_lock_acquire>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__sinit_lock_acquire+0x8>)
 8009e2a:	f000 b8a7 	b.w	8009f7c <__retarget_lock_acquire_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20001326 	.word	0x20001326

08009e34 <__sinit_lock_release>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__sinit_lock_release+0x8>)
 8009e36:	f000 b8a2 	b.w	8009f7e <__retarget_lock_release_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20001326 	.word	0x20001326

08009e40 <__sinit>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4604      	mov	r4, r0
 8009e44:	f7ff fff0 	bl	8009e28 <__sinit_lock_acquire>
 8009e48:	69a3      	ldr	r3, [r4, #24]
 8009e4a:	b11b      	cbz	r3, 8009e54 <__sinit+0x14>
 8009e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e50:	f7ff bff0 	b.w	8009e34 <__sinit_lock_release>
 8009e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e58:	6523      	str	r3, [r4, #80]	; 0x50
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <__sinit+0x68>)
 8009e5c:	4a13      	ldr	r2, [pc, #76]	; (8009eac <__sinit+0x6c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	bf04      	itt	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	61a3      	streq	r3, [r4, #24]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 f820 	bl	8009eb0 <__sfp>
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f81c 	bl	8009eb0 <__sfp>
 8009e78:	60a0      	str	r0, [r4, #8]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f818 	bl	8009eb0 <__sfp>
 8009e80:	2200      	movs	r2, #0
 8009e82:	60e0      	str	r0, [r4, #12]
 8009e84:	2104      	movs	r1, #4
 8009e86:	6860      	ldr	r0, [r4, #4]
 8009e88:	f7ff ff82 	bl	8009d90 <std>
 8009e8c:	68a0      	ldr	r0, [r4, #8]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	2109      	movs	r1, #9
 8009e92:	f7ff ff7d 	bl	8009d90 <std>
 8009e96:	68e0      	ldr	r0, [r4, #12]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	2112      	movs	r1, #18
 8009e9c:	f7ff ff78 	bl	8009d90 <std>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	61a3      	str	r3, [r4, #24]
 8009ea4:	e7d2      	b.n	8009e4c <__sinit+0xc>
 8009ea6:	bf00      	nop
 8009ea8:	0800a2dc 	.word	0x0800a2dc
 8009eac:	08009dd9 	.word	0x08009dd9

08009eb0 <__sfp>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	f7ff ffac 	bl	8009e10 <__sfp_lock_acquire>
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <__sfp+0x84>)
 8009eba:	681e      	ldr	r6, [r3, #0]
 8009ebc:	69b3      	ldr	r3, [r6, #24]
 8009ebe:	b913      	cbnz	r3, 8009ec6 <__sfp+0x16>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff ffbd 	bl	8009e40 <__sinit>
 8009ec6:	3648      	adds	r6, #72	; 0x48
 8009ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	d503      	bpl.n	8009ed8 <__sfp+0x28>
 8009ed0:	6833      	ldr	r3, [r6, #0]
 8009ed2:	b30b      	cbz	r3, 8009f18 <__sfp+0x68>
 8009ed4:	6836      	ldr	r6, [r6, #0]
 8009ed6:	e7f7      	b.n	8009ec8 <__sfp+0x18>
 8009ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009edc:	b9d5      	cbnz	r5, 8009f14 <__sfp+0x64>
 8009ede:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <__sfp+0x88>)
 8009ee0:	60e3      	str	r3, [r4, #12]
 8009ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ee8:	f000 f847 	bl	8009f7a <__retarget_lock_init_recursive>
 8009eec:	f7ff ff96 	bl	8009e1c <__sfp_lock_release>
 8009ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	61a5      	str	r5, [r4, #24]
 8009efc:	2208      	movs	r2, #8
 8009efe:	4629      	mov	r1, r5
 8009f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f04:	f7fd fc82 	bl	800780c <memset>
 8009f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f10:	4620      	mov	r0, r4
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	3468      	adds	r4, #104	; 0x68
 8009f16:	e7d9      	b.n	8009ecc <__sfp+0x1c>
 8009f18:	2104      	movs	r1, #4
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ff62 	bl	8009de4 <__sfmoreglue>
 8009f20:	4604      	mov	r4, r0
 8009f22:	6030      	str	r0, [r6, #0]
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1d5      	bne.n	8009ed4 <__sfp+0x24>
 8009f28:	f7ff ff78 	bl	8009e1c <__sfp_lock_release>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	e7ee      	b.n	8009f10 <__sfp+0x60>
 8009f32:	bf00      	nop
 8009f34:	0800a2dc 	.word	0x0800a2dc
 8009f38:	ffff0001 	.word	0xffff0001

08009f3c <_fwalk_reent>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4606      	mov	r6, r0
 8009f42:	4688      	mov	r8, r1
 8009f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f48:	2700      	movs	r7, #0
 8009f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f52:	d505      	bpl.n	8009f60 <_fwalk_reent+0x24>
 8009f54:	6824      	ldr	r4, [r4, #0]
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	d1f7      	bne.n	8009f4a <_fwalk_reent+0xe>
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d907      	bls.n	8009f76 <_fwalk_reent+0x3a>
 8009f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	d003      	beq.n	8009f76 <_fwalk_reent+0x3a>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4630      	mov	r0, r6
 8009f72:	47c0      	blx	r8
 8009f74:	4307      	orrs	r7, r0
 8009f76:	3568      	adds	r5, #104	; 0x68
 8009f78:	e7e9      	b.n	8009f4e <_fwalk_reent+0x12>

08009f7a <__retarget_lock_init_recursive>:
 8009f7a:	4770      	bx	lr

08009f7c <__retarget_lock_acquire_recursive>:
 8009f7c:	4770      	bx	lr

08009f7e <__retarget_lock_release_recursive>:
 8009f7e:	4770      	bx	lr

08009f80 <__swhatbuf_r>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	460e      	mov	r6, r1
 8009f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	b096      	sub	sp, #88	; 0x58
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	461d      	mov	r5, r3
 8009f90:	da08      	bge.n	8009fa4 <__swhatbuf_r+0x24>
 8009f92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	061a      	lsls	r2, r3, #24
 8009f9c:	d410      	bmi.n	8009fc0 <__swhatbuf_r+0x40>
 8009f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fa2:	e00e      	b.n	8009fc2 <__swhatbuf_r+0x42>
 8009fa4:	466a      	mov	r2, sp
 8009fa6:	f000 f8fb 	bl	800a1a0 <_fstat_r>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	dbf1      	blt.n	8009f92 <__swhatbuf_r+0x12>
 8009fae:	9a01      	ldr	r2, [sp, #4]
 8009fb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fb8:	425a      	negs	r2, r3
 8009fba:	415a      	adcs	r2, r3
 8009fbc:	602a      	str	r2, [r5, #0]
 8009fbe:	e7ee      	b.n	8009f9e <__swhatbuf_r+0x1e>
 8009fc0:	2340      	movs	r3, #64	; 0x40
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	b016      	add	sp, #88	; 0x58
 8009fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fcc <__smakebuf_r>:
 8009fcc:	898b      	ldrh	r3, [r1, #12]
 8009fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fd0:	079d      	lsls	r5, r3, #30
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	d507      	bpl.n	8009fe8 <__smakebuf_r+0x1c>
 8009fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	6163      	str	r3, [r4, #20]
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	ab01      	add	r3, sp, #4
 8009fea:	466a      	mov	r2, sp
 8009fec:	f7ff ffc8 	bl	8009f80 <__swhatbuf_r>
 8009ff0:	9900      	ldr	r1, [sp, #0]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fb07 	bl	8009608 <_malloc_r>
 8009ffa:	b948      	cbnz	r0, 800a010 <__smakebuf_r+0x44>
 8009ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a000:	059a      	lsls	r2, r3, #22
 800a002:	d4ef      	bmi.n	8009fe4 <__smakebuf_r+0x18>
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	e7e3      	b.n	8009fd8 <__smakebuf_r+0xc>
 800a010:	4b0d      	ldr	r3, [pc, #52]	; (800a048 <__smakebuf_r+0x7c>)
 800a012:	62b3      	str	r3, [r6, #40]	; 0x28
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	6163      	str	r3, [r4, #20]
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	6120      	str	r0, [r4, #16]
 800a026:	b15b      	cbz	r3, 800a040 <__smakebuf_r+0x74>
 800a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02c:	4630      	mov	r0, r6
 800a02e:	f000 f8c9 	bl	800a1c4 <_isatty_r>
 800a032:	b128      	cbz	r0, 800a040 <__smakebuf_r+0x74>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	89a0      	ldrh	r0, [r4, #12]
 800a042:	4305      	orrs	r5, r0
 800a044:	81a5      	strh	r5, [r4, #12]
 800a046:	e7cd      	b.n	8009fe4 <__smakebuf_r+0x18>
 800a048:	08009dd9 	.word	0x08009dd9

0800a04c <_raise_r>:
 800a04c:	291f      	cmp	r1, #31
 800a04e:	b538      	push	{r3, r4, r5, lr}
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	d904      	bls.n	800a060 <_raise_r+0x14>
 800a056:	2316      	movs	r3, #22
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	f04f 30ff 	mov.w	r0, #4294967295
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a062:	b112      	cbz	r2, 800a06a <_raise_r+0x1e>
 800a064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a068:	b94b      	cbnz	r3, 800a07e <_raise_r+0x32>
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f830 	bl	800a0d0 <_getpid_r>
 800a070:	462a      	mov	r2, r5
 800a072:	4601      	mov	r1, r0
 800a074:	4620      	mov	r0, r4
 800a076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a07a:	f000 b817 	b.w	800a0ac <_kill_r>
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d00a      	beq.n	800a098 <_raise_r+0x4c>
 800a082:	1c59      	adds	r1, r3, #1
 800a084:	d103      	bne.n	800a08e <_raise_r+0x42>
 800a086:	2316      	movs	r3, #22
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	2001      	movs	r0, #1
 800a08c:	e7e7      	b.n	800a05e <_raise_r+0x12>
 800a08e:	2400      	movs	r4, #0
 800a090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a094:	4628      	mov	r0, r5
 800a096:	4798      	blx	r3
 800a098:	2000      	movs	r0, #0
 800a09a:	e7e0      	b.n	800a05e <_raise_r+0x12>

0800a09c <raise>:
 800a09c:	4b02      	ldr	r3, [pc, #8]	; (800a0a8 <raise+0xc>)
 800a09e:	4601      	mov	r1, r0
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f7ff bfd3 	b.w	800a04c <_raise_r>
 800a0a6:	bf00      	nop
 800a0a8:	20000010 	.word	0x20000010

0800a0ac <_kill_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d07      	ldr	r5, [pc, #28]	; (800a0cc <_kill_r+0x20>)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	f7f7 fe59 	bl	8001d70 <_kill>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	d102      	bne.n	800a0c8 <_kill_r+0x1c>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	b103      	cbz	r3, 800a0c8 <_kill_r+0x1c>
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20001320 	.word	0x20001320

0800a0d0 <_getpid_r>:
 800a0d0:	f7f7 be46 	b.w	8001d60 <_getpid>

0800a0d4 <__sread>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0dc:	f000 f894 	bl	800a208 <_read_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	bfab      	itete	ge
 800a0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0e8:	181b      	addge	r3, r3, r0
 800a0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0ee:	bfac      	ite	ge
 800a0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0f2:	81a3      	strhlt	r3, [r4, #12]
 800a0f4:	bd10      	pop	{r4, pc}

0800a0f6 <__swrite>:
 800a0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	898b      	ldrh	r3, [r1, #12]
 800a0fe:	05db      	lsls	r3, r3, #23
 800a100:	4605      	mov	r5, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4616      	mov	r6, r2
 800a106:	d505      	bpl.n	800a114 <__swrite+0x1e>
 800a108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10c:	2302      	movs	r3, #2
 800a10e:	2200      	movs	r2, #0
 800a110:	f000 f868 	bl	800a1e4 <_lseek_r>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	4632      	mov	r2, r6
 800a122:	463b      	mov	r3, r7
 800a124:	4628      	mov	r0, r5
 800a126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	f000 b817 	b.w	800a15c <_write_r>

0800a12e <__sseek>:
 800a12e:	b510      	push	{r4, lr}
 800a130:	460c      	mov	r4, r1
 800a132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a136:	f000 f855 	bl	800a1e4 <_lseek_r>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	bf15      	itete	ne
 800a140:	6560      	strne	r0, [r4, #84]	; 0x54
 800a142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a14a:	81a3      	strheq	r3, [r4, #12]
 800a14c:	bf18      	it	ne
 800a14e:	81a3      	strhne	r3, [r4, #12]
 800a150:	bd10      	pop	{r4, pc}

0800a152 <__sclose>:
 800a152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a156:	f000 b813 	b.w	800a180 <_close_r>
	...

0800a15c <_write_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d07      	ldr	r5, [pc, #28]	; (800a17c <_write_r+0x20>)
 800a160:	4604      	mov	r4, r0
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	2200      	movs	r2, #0
 800a168:	602a      	str	r2, [r5, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f7f7 fe37 	bl	8001dde <_write>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_write_r+0x1e>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_write_r+0x1e>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20001320 	.word	0x20001320

0800a180 <_close_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d06      	ldr	r5, [pc, #24]	; (800a19c <_close_r+0x1c>)
 800a184:	2300      	movs	r3, #0
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f7f7 fe43 	bl	8001e16 <_close>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_close_r+0x1a>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_close_r+0x1a>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20001320 	.word	0x20001320

0800a1a0 <_fstat_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d07      	ldr	r5, [pc, #28]	; (800a1c0 <_fstat_r+0x20>)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	f7f7 fe3e 	bl	8001e2e <_fstat>
 800a1b2:	1c43      	adds	r3, r0, #1
 800a1b4:	d102      	bne.n	800a1bc <_fstat_r+0x1c>
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	b103      	cbz	r3, 800a1bc <_fstat_r+0x1c>
 800a1ba:	6023      	str	r3, [r4, #0]
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	bf00      	nop
 800a1c0:	20001320 	.word	0x20001320

0800a1c4 <_isatty_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d06      	ldr	r5, [pc, #24]	; (800a1e0 <_isatty_r+0x1c>)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	f7f7 fe3d 	bl	8001e4e <_isatty>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_isatty_r+0x1a>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_isatty_r+0x1a>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	20001320 	.word	0x20001320

0800a1e4 <_lseek_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d07      	ldr	r5, [pc, #28]	; (800a204 <_lseek_r+0x20>)
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	602a      	str	r2, [r5, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f7f7 fe36 	bl	8001e64 <_lseek>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_lseek_r+0x1e>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_lseek_r+0x1e>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	20001320 	.word	0x20001320

0800a208 <_read_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d07      	ldr	r5, [pc, #28]	; (800a228 <_read_r+0x20>)
 800a20c:	4604      	mov	r4, r0
 800a20e:	4608      	mov	r0, r1
 800a210:	4611      	mov	r1, r2
 800a212:	2200      	movs	r2, #0
 800a214:	602a      	str	r2, [r5, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	f7f7 fdc4 	bl	8001da4 <_read>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_read_r+0x1e>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_read_r+0x1e>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20001320 	.word	0x20001320

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
